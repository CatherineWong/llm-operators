{"craft-beetroot-soup": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-beetroot-soup\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['beetroot', 'potato', 'carrot']\n(:action craft-beetroot-soup\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Beetroot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Beetroot)\n    ;; the second ingredient is a Potato\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Potato)\n    ;; the third ingredient is a Carrot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Carrot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Beetroot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Potato))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Carrot))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['beetroot', 'potato']\n(:action craft-beetroot-soup\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Beetroot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Beetroot)\n    ;; the second ingredient is a Potato\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Beetroot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Potato))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['beetroot', 'carrot']\n(:action craft-beetroot-soup\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Beetroot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Beetroot)\n    ;; the second ingredient is a Carrot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Carrot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Beetroot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Carrot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-stick": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-stick\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-stick\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['wood', 'iron_ore']\n(:action craft-stick\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a IronOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['wood', 'iron_ingot']\n(:action craft-stick\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-bowl1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bowl1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-bowl1\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['wood', 'cobblestone']\n(:action craft-bowl1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Cobblestone\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Cobblestone)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Cobblestone))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['wood', 'gold_ingot']\n(:action craft-bowl1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a GoldIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-bowl": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bowl\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['wood', 'wood', 'wood']\n(:action craft-bowl\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['wood', 'coal']\n(:action craft-bowl\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['stick', 'wood', 'coal']\n(:action craft-bowl\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the third ingredient is a Coal\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Coal))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}, "craft-boat": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-boat\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['wood', 'wood']\n(:action craft-boat\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BoatStation\n    (object-at ?station ?t)\n    (object-of-type ?station BoatStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is also a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Boat\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Boat)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['wood', 'coal']\n(:action craft-boat\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BoatStation\n    (object-at ?station ?t)\n    (object-of-type ?station BoatStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Boat\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Boat)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['wood', 'iron_ingot']\n(:action craft-boat\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BoatStation\n    (object-at ?station ?t)\n    (object-of-type ?station BoatStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Boat\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Boat)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-cooked-potato": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-cooked-potato\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['potato']\n(:action craft-cooked-potato\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['potato', 'water_bucket']\n(:action craft-cooked-potato\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a WaterBucket\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WaterBucket)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WaterBucket))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['potato', 'water_bucket']\n(:action craft-cooked-potato\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a WaterBucket\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WaterBucket)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WaterBucket))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-cooked-potato1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-cooked-potato1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['potato']\n(:action craft-cooked-potato1\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['potato', 'wood']\n(:action craft-cooked-potato1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['potato']\n(:action craft-cooked-potato1\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n"]}, "craft-stick1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-stick1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-stick1\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['wood', 'wood']\n(:action craft-stick1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['wood', 'wood', 'wood']\n(:action craft-stick1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the third ingredient is a Wood\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Wood))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}, "cook-food": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain.\n;;;; Each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory).\n;;;; Each crafting rule requires 1 or 2 ingredients that should be in the agent's inventory.\n;;;; You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; ingredients = ['wood']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['wood', 'Coal']\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; ingredients = ['stick', 'feather']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; ingredients = ['stick', 'gold_ore']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; ingredients = ['stick', 'iron_ingot']\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: cook-food\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n"}], "codex_output": ["\n;; Guess number 1\n;; ingredients = ['raw_potato', 'raw_potato']\n(:action cook-food\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a Potato\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Potato))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; ingredients = ['raw_potato']\n(:action cook-food\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; ingredients = ['beetroot_crop']\n(:action cook-food\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a BeetrootCrop\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 BeetrootCrop)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 BeetrootCrop))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n"]}}