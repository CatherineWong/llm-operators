operator_name,gt_operator,codex_raw_operator,codex_preprocessed_operator,
0,,";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (toggleable ?o)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (not (isOn ?o))
        )
        :effect (and
            (isOn ?o)
        )
    )

<END>","(:action TurnOnLamp_0
        :parameters (?o - object ?a - agent ?l - location)

        :precondition (and 
		(toggleable ?o)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		)
)",
0,,";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectType ?o DeskLampType)
            (toggleable ?o)
            (not (isToggled ?o))
        )
        :effect (and
            (isOn ?o)
            (isToggled ?o)
        )
    )

<END>","(:action TurnOnLamp_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectType ?o DeskLampType)
		(toggleable ?o)
		(not (isToggled ?o))
		)
        :effect (and 
		(isOn ?o)
		(isToggled ?o)
		)
)",
0,,";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?lmp - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?lmp ?l)
            (toggleable ?lmp)
            (not (isOn ?lmp))
        )
        :effect (and
            (isOn ?lmp)
        )
    )

<END>","(:action TurnOnLamp_2
        :parameters (?a - agent ?l - location ?lmp - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?lmp ?l)
		(toggleable ?lmp)
		(not (isOn ?lmp))
		)
        :effect (and 
		(isOn ?lmp)
		)
)",
0,,";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?ot - otype ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o ?ot)
            (toggleable ?o)
            (not (isOn ?o))
        )
        :effect (and
            (isOn ?o)
            (isToggled ?o)
        )
    )

<END>","(:action TurnOnLamp_3
        :parameters (?a - agent ?l - location ?o - object ?ot - otype)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(objectType ?o ?ot)
		(toggleable ?o)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		(isToggled ?o)
		)
)",
0,,";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (not (isOn ?o))
        )
        :effect (and
            (isOn ?o)
            (isToggled ?o)
        )
    )

<END>","(:action TurnOnLamp_4
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		(isToggled ?o)
		)
)",
