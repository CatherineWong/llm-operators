{"('mine-wood_1', '(:action mine-wood_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wood_2', '(:action mine-wood_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [8.1, 8.1], "('mine-wool1_0', '(:action mine-wool1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [13.1, 13.1], "('mine-wool1_1', '(:action mine-wool1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool1_2', '(:action mine-wool1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-right_0', '(:action move-right_0\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-right ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-right_2', '(:action move-right_2\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-right ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-potato_0', '(:action mine-potato_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [13.1, 13.1], "('mine-potato_1', '(:action mine-potato_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-potato_2', '(:action mine-potato_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_0', '(:action mine-sugar-cane_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_1', '(:action mine-sugar-cane_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_2', '(:action mine-sugar-cane_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [8.1, 8.1], "('move-to', '(:action move-to\\n  :parameters (?t1 - tile ?t2 - tile)\\n  :precondition (and (agent-at ?t1))\\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\\n )')": [185.1, 185.1], "('pick-up', '(:action pick-up\\n  :parameters (?i - inventory ?x - object ?t - tile)\\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\\n )')": [105.1, 105.1], "('mine-iron-ore', '(:action mine-iron-ore\\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\\n  :precondition (and\\n    (agent-at ?t)\\n    (object-at ?x ?t)\\n    (object-of-type ?x IronOreVein)\\n    (inventory-holding ?toolinv ?tool)\\n    (object-of-type ?tool Pickaxe)\\n    (inventory-empty ?targetinv)\\n    (object-of-type ?target Hypothetical)\\n  )\\n  :effect (and\\n    (not (inventory-empty ?targetinv))\\n    (inventory-holding ?targetinv ?target)\\n    (not (object-of-type ?target Hypothetical))\\n    (object-of-type ?target IronOre)\\n  )\\n )')": [13.1, 13.1], "('mine-wool2_0', '(:action mine-wool2_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target1 - object ?target2 - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target1 Hypothetical)\\n\\t\\t(object-of-type ?target2 Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target1)\\n\\t\\t(inventory-holding ?targetinv ?target2)\\n\\t\\t(not (object-of-type ?target1 Hypothetical))\\n\\t\\t(not (object-of-type ?target2 Hypothetical))\\n\\t\\t(object-of-type ?target1 Wool)\\n\\t\\t(object-of-type ?target2 Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool2_1', '(:action mine-wool2_1\\n        :parameters (?t - tile ?i1 - inventory ?o6 - object ?i3 - inventory ?o14 - object ?o17 - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(inventory-holding ?i1 ?o6)\\n\\t\\t(inventory-holding ?i3 ?o14)\\n\\t\\t(object-of-type ?o6 Shears)\\n\\t\\t(object-of-type ?o14 Sheep)\\n\\t\\t(object-of-type ?o17 Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?i1))\\n\\t\\t(not (inventory-empty ?i3))\\n\\t\\t(not (inventory-holding ?i1 ?o6))\\n\\t\\t(not (inventory-holding ?i3 ?o14))\\n\\t\\t(not (object-of-type ?o17 Hypothetical))\\n\\t\\t(object-of-type ?o17 Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool2_2', '(:action mine-wool2_2\\n        :parameters (?t - tile ?toolinv - inventory ?tool - object ?holdinginv - inventory ?holding - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-holding ?holdinginv ?holding)\\n\\t\\t(object-of-type ?holding Sheep)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool_0', '(:action mine-wool_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool_1', '(:action mine-wool_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool_2', '(:action mine-wool_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore_0', '(:action mine-gold-ore_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore_1', '(:action mine-gold-ore_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore_2', '(:action mine-gold-ore_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-beetroot_0', '(:action mine-beetroot_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-beetroot_1', '(:action mine-beetroot_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [6.1, 6.1], "('mine-beetroot_2', '(:action mine-beetroot_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_0', '(:action mine-feather_0\\n        :parameters (?t - tile ?x - object ?i - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-empty ?i)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(inventory-holding ?i ?x)\\n\\t\\t(not (object-at ?x ?t))\\n\\t\\t(not (inventory-empty ?i))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_1', '(:action mine-feather_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Sword)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [13.1, 13.1], "('mine-coal_0', '(:action mine-coal_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal_1', '(:action mine-coal_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal_2', '(:action mine-coal_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-cobblestone_0', '(:action mine-cobblestone_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CobblestoneStash)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Cobblestone)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-cobblestone_1', '(:action mine-cobblestone_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CobblestoneStash)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Cobblestone)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-cobblestone_2', '(:action mine-cobblestone_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CobblestoneStash)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Cobblestone)\\n\\t\\t)\\n)')": [2.1, 2.1], "('mine-gold-ore1_0', '(:action mine-gold-ore1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore1_1', '(:action mine-gold-ore1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore1_2', '(:action mine-gold-ore1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [10.1, 10.1], "('mine-iron-ore1_0', '(:action mine-iron-ore1_0\\n        :parameters (?t - tile ?x1 - object ?toolinv1 - inventory ?x2 - object ?toolinv2 - inventory ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x1 ?t)\\n\\t\\t(object-of-type ?x1 IronOreVein)\\n\\t\\t(inventory-holding ?toolinv1 ?x2)\\n\\t\\t(inventory-holding ?toolinv2 ?x2)\\n\\t\\t(object-of-type ?x2 Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-iron-ore1_1', '(:action mine-iron-ore1_1\\n        :parameters (?t - tile ?toolinv1 - inventory ?tool1 - object ?toolinv2 - inventory ?tool2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(inventory-holding ?toolinv1 ?tool1)\\n\\t\\t(object-of-type ?tool1 Pickaxe)\\n\\t\\t(inventory-holding ?toolinv2 ?tool2)\\n\\t\\t(object-of-type ?tool2 Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t(object-at ?target ?t)\\n\\t\\t(object-of-type ?target IronOreVein)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal1_0', '(:action mine-coal1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [11.1, 11.1], "('mine-coal1_1', '(:action mine-coal1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal1_2', '(:action mine-coal1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('chop-wood_0', '(:action chop-wood_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('chop-wood_1', '(:action chop-wood_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('chop-wood_2', '(:action chop-wood_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-beetroot1_0', '(:action mine-beetroot1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [3.1, 3.1], "('mine-beetroot1_1', '(:action mine-beetroot1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Hypothetical)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?toolinv))\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?x BeetrootCrop))\\n\\t\\t(object-of-type ?x Beetroot)\\n\\t\\t(not (object-of-type ?tool Hypothetical))\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-beetroot1_2', '(:action mine-beetroot1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Hypothetical)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_2', '(:action mine-feather_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather1_1', '(:action mine-feather1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather1_2', '(:action mine-feather1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather1_0', '(:action mine-feather1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 2.1]}