
    (define (domain put_task)
        (:requirements :adl
    )
        (:types
        agent location receptacle object rtype otype
    )
        (:predicates
        (atLocation ?a - agent ?l - location) 
        (receptacleAtLocation ?r - receptacle ?l - location) 
        (objectAtLocation ?o - object ?l - location) 
        (openable ?r - receptacle) 
        (opened ?r - receptacle) 
        (inReceptacle ?o - object ?r - receptacle) 
        (isReceptacleObject ?o - object) 
        (inReceptacleObject ?innerObject - object ?outerObject - object) 
        (receptacleType ?r - receptacle ?t - rtype) 
        (objectType ?o - object ?t - otype) 
        (holds ?a - agent ?o - object) 
        (holdsAny ?a - agent) 
        (holdsAnyReceptacleObject ?a - agent) 
        
        (isClean ?o - object) 
        (cleanable ?o - object) 
        (isHot ?o - object) 
        (heatable ?o - object) 
        (isCool ?o - object) 
        (coolable ?o - object) 
        (toggleable ?o - object) 
        (isOn ?o - object) 
        (isToggled ?o - object) 
        (sliceable ?o - object) 
        (isSliced ?o - object) 
    )
        
        (:action GotoLocation
        :parameters (?a - agent ?lStart - location ?lEnd - location)
        :precondition (and
            (atLocation ?a ?lStart)
        )
        :effect (and
            (atLocation ?a ?lEnd)
            (not (atLocation ?a ?lStart))
        )
    )
(:action PickupObjectInReceptacle
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (inReceptacle ?o ?r)
            (not (holdsAny ?a))
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
            (holds ?a ?o)
            (holdsAny ?a)
        )
    )
(:action PickupObjectNotInReceptacle
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (not (holdsAny ?a))
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
            (holds ?a ?o)
            (holdsAny ?a)
        )
    )
(:action PutObjectInReceptacle
        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectType ?o ?ot)
            (holds ?a ?o)
            (not (holdsAnyReceptacleObject ?a))
        )
        :effect (and
            (inReceptacle ?o ?r)
            (not (holds ?a ?o))
            (not (holdsAny ?a))
            (objectAtLocation ?o ?l)
        )
    )
(:action PutReceptacleObjectInReceptacle
        :parameters (?a - agent ?l - location ?ot - otype ?outerO - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectType ?outerO ?ot)
            (holds ?a ?outerO)
            (holdsAnyReceptacleObject ?a)
            (isReceptacleObject ?outerO)
        )
        :effect (and
            (forall
                (?obj - object)
                (when
                    (holds ?a ?obj)
                    (and
                        (not (holds ?a ?obj))
                        (objectAtLocation ?obj ?l)
                        (inReceptacle ?obj ?r)
                    )
                )
            )
            (not (holdsAny ?a))
            (not (holdsAnyReceptacleObject ?a))
        )
    )
(:action MoveObject
        :parameters (?o - object ?rEnd - receptacle ?rStart - receptacle)
        
        :precondition (and 
		(inReceptacle ?o ?rStart)
		)
        :effect (and 
		(not (inReceptacle ?o ?rStart))
		(inReceptacle ?o ?rEnd)
		)
)

    )
                