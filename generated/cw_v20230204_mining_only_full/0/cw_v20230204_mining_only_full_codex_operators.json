{"mine-wood": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o30', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wood\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i2', 'o1', 'o9', 'o11', 't2']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-wood', 'args': ['i2', 'i2', 'o4', 'o12', 'o17', 't8']}\n;; Example: {'action': 'mine-wood', 'args': ['i3', 'i3', 'o4', 'o17', 'o17', 't14']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't9']}\n;; Example: {'action': 'mine-wood', 'args': ['i0', 'i3', 'o0', 'o10', 'o15', 't8']}\n(:action mine-wood", "codex_output": ["(:action mine-wood\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-at ?x ?t)\n    (object-of-type ?x Tree)\n    (object-of-type ?target Hypothetical)\n    (inventory-empty ?targetinv)\n    (object-of-type ?tool Axe)\n  )\n  :effect (and\n    (object-of-type ?target Wood)\n    (inventory-holding ?targetinv ?target)\n    (not (inventory-empty ?targetinv))\n    (not (object-of-type ?target Hypothetical))\n  )\n )\n"]}, "mine-wool1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool1\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o4', 'o9', 'o17', 't6']}\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o3', 'o16', 't3']}\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n(:action mine-wool1", "codex_output": ["(:action mine-wool1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object)\n  :precondition (and\n    (inventory-holdi\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n ing ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n    (object-of-type ?x Sheep)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n  )\n )\n"]}, "plant-potato": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o81', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: plant-potato\n;; Example: {'action': 'plant-potato', 'args': ['i1', 'i1', 't17']}\n;; Example: {'action': 'plant-potato', 'args': ['i1', 'i1', 't17']}\n(:action plant-potato", "codex_output": ["(:action plant-potato\n  :parameters (?holdinv - inventory ?iteminv - inventory ?t - tile)\n  :precondition (and (inventory-holding ?holdinv ?x90) (object-of-type ?x90 Potato) (inventory-empty ?iteminv) (inventory-empty ?iteminv))\n  :effect (and\n   (inventory-holding ?holdinv ?x90)\n   (object-at ?x151 ?t)\n   (not (inventory-empty ?iteminv))\n   (not (object-of-type ?x151 Hypothetical))\n   (object-of-type ?x151 Potato)\n )\n )\n"]}, "wail": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't26']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: wail\n;; Example: {'action': 'wail', 'args': ['']}\n;; Example: {'action': 'wail', 'args': ['']}\n(:action wail", "codex_output": ["(:action wail\n  :parameters ()\n  :precondition (true)\n  :effect (true)\n )\n"]}, "place": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o30', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: place\n;; Example: {'action': 'place', 'args': ['i1', 'o17', 't7']}\n;; Example: {'action': 'place', 'args': ['i1', 'o17', 't9']}\n(:action place", "codex_output": ["(:action place\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (inventory-holding ?i ?x) (agent-at ?t) (inventory-empty ?i))\n  :effect (and (not (inventory-empty ?i)) (inventory-holding ?i ?x) (not (agent-at ?t)) (object-at ?x ?t))\n )\n"]}, "mine-potatoes": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potatoes\n;; Example: {'action': 'mine-potatoes', 'args': ['i1', 'i3', 'o3', 'o12', 'o17', 't18']}\n(:action mine-potatoes", "codex_output": ["(:action mine-potatoes\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x PotatoPlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Axe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Potato)\n  )\n )\n"]}, "mine-sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-sugar-cane\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'o14', 'o15', 'o16', 't10']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o1', 'o81', 'o17', 't4']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o3', 't3']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o3', 'o11', 'o19', 't5']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o1', 'o12', 'o17', 't18']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o13', 'o17', 'o2', 't11']}\n(:action mine-sugar-cane", "codex_output": ["(:action mine-sugar-cane\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x SugarCanePlant)\n    (inventory-holding ?i ?x)\n    (object-of-type ?x Cobblestone)\n  )\n  :effect (and)\n )\n"]}, "mine-gold-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold-ore\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't2']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o2', 'o13', 'o17', 't7']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i4', 'o6', 'o10', 'o17', 't7']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o7', 'o15', 'o17', 't9']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o5', 'o12', 'o13', 'o13', 't7']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o2', 'o17', 't1']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o6', 'o17', 't9']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-gold-ore", "codex_output": ["(:action mine-gold-ore\n  :parameters (?i - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x GoldOreVein)\n    (inventory-holding ?i ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldOre)\n  )\n )\n"]}, "mine-beet": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't26']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-beet\n;; Example: {'action': 'mine-beet', 'args': ['i1', 'i9', 'o1']}\n(:action mine-beet", "codex_output": ["(:action mine-beet\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x BeetrootCrop)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Key)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Beetroot)\n  )\n )\n"]}, "mine-feather": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o30', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-feather\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o8', 'o15', 'o18', 't8']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i4', 'o15', 'o16', 't14']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o5', 'o21', 'o22', 't24']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o4', 'o15', 'o17', 't17']}\n;; Example: {'action': 'mine-feather', 'args': ['i11', 'i18', 'i9', 'o14', 'o15', 'o16', 'o7', 't22', 't37']}\n;; Example: {'action': 'mine-feather', 'args': ['i0', 'i3', 'o1', 'o6', 'o13', 't1']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o12', 'o7', 'o17', 't10']}\n(:action mine-feather", "codex_output": ["(:action mine-feather\n  :parameters (?i - inventory ?y - object ?z - object ?toolinv - inventory ?tool - object ?t - tile)\n  :precondition (and\n    (object-of-type ?y Chicken))\n  :effect (and\n )\n"]}, "mine-coal1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-coal1\n;; Example: {'action': 'mine-coal1', 'args': ['i1', 'i3', 'o5', 'o13', 'o17', 't7']}\n;; Example: {'action': 'mine-coal1', 'args': ['i1', 'i3', 'o3', 'o15', 't0']}\n(:action mine-coal1", "codex_output": ["(:action mine-coal1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x CoalOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Coal)\n  )\n )\n"]}, "harvest-beets": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: harvest-beets\n;; Example: {'action': 'harvest-beets', 'args': ['i1', 'i3', 'o3', 'o9', 't8']}\n(:action harvest-beets", "codex_output": ["(:action harvest-beets\n  :parameters (?i - inventory ?k - object ?x - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x BeetrootCrop)\n    (inventory-holding ?i ?k)\n    (object-of-type ?k Shears)\n    (inventory-empty ?i)\n  )\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-holding ?i ?x)))\n )\n"]}, "mine-gold1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-gold1\n;; Example: {'action': 'mine-gold1', 'args': ['i1', 'i3', 'o5', 'i15', 'b13', 'b22', 't13']}\n(:action mine-gold1", "codex_output": ["(:action mine-gold1\n  :parameters (?toolinv - inventory ?goldinv - inventory ?x - object ?tool - object ?gold - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x GoldOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (object-holding ?goldinv ?gold)\n    (object-of-type ?gold GoldOreVein)\n  )\n  :effect (and\n    (inventory-holding ?goldinv ?gold)\n    (object-of-type ?gold Hypothetical)\n    (not (object-of-type ?gold GoldOreVein))\n  )\n )\n"]}, "mine-wool2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool2\n;; Example: {'action': 'mine-wool2', 'args': ['i2', 'i3', 'o2', 'o12', 'w18', 't4']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o13', 'o17', 't9']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n(:action mine-wool2", "codex_output": ["(:action mine-wool2\n  :parameters (?toolinv - inventory ?targetinv - inventory ?targ - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?targ ?t)\n    (object-of-type ?targ Sheep)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n  )\n )\n"]}, "mine-cobblestone": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i9', 'o9', 't37']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o30', 't4']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-cobblestone\n;; Example: {'action': 'mine-cobblestone', 'args': ['i1', 'i2', 'o1', 'o2', 'o17', 'o18', 't11']}\n(:action mine-cobblestone", "codex_output": ["(:action mine-cobblestone\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x CobblestoneStash)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Cobblestone)\n  )\n )\n"]}, "boat-go": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: boat-go\n;; Example: {'action': 'boat-go', 'args': ['wh1', 'e10', 'e9', 'e8', 'e7', 'e6', 'e5', 't12']}\n(:action boat-go", "codex_output": ["(:action boat-go\n  :parameters (?w - tile ?e1 - tile ?e2 - tile ?e3 - tile ?e4 - tile ?e5 - tile ?e6 - tile ?t - tile)\n  :precondition (and\n    (agent-at ?w)\n    (tile-left ?e1 ?w)\n    (tile-left ?e2 ?e1)\n    (tile-left ?e3 ?e2)\n    (tile-left ?e4 ?e3)\n    (tile-left ?e5 ?e4)\n    (tile-left ?e6 ?e5)\n    (tile-left ?t ?e6)\n  )\n  :effect (and (agent-at ?t))\n )\n"]}, "mine-coal-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o10', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-coal-ore\n;; Example: {'action': 'mine-coal-ore', 'args': ['i1', 'i3', 'o7', 'o15', 'o17', 't3']}\n(:action mine-coal-ore", "codex_output": ["(:action mine-coal-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x CoalOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Coal)\n  )\n )\n"]}, "mine-coal": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-coal\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o2', 'o5', 'o13', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o0', 'o17', 't11']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't12']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o1', 'o15', 't13']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o27', 'o30', 'o17', 't2']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o12', 'o13', 'o17', 't6']}\n(:action mine-coal", "codex_output": ["(:action mine-coal\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x CoalOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Coal)\n  )\n )\n"]}, "planks-house": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: planks-house\n;; Example: {'action': 'planks-house', 'args': ['i1', 'o8', 'o16', 't12']}\n(:action planks-house", "codex_output": ["(:action planks-house\n  :parameters (?i - inventory ?x - object ?y - object ?t - tile)\n  :precondition (and (agent-at ?t) (inventory-holding ?i ?x) (inventory-holding ?i ?y))\n  :effect (and (inventory-empty ?i) (not (inventory-empty ?i)) (not (inventory-holding ?i ?x)) (not (inventory-holding ?i ?y)))\n )\n"]}, "mine-feather1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-feather1\n;; Example: {'action': 'mine-feather1', 'args': ['i1', 'i3', 'o6', 'o9', 't6']}\n;; Example: {'action': 'mine-feather1', 'args': ['i1', 'i3', 'o8', 'o16', 'o17', 't9']}\n(:action mine-feather1", "codex_output": ["(:action mine-feather1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Axe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Feather)\n  )\n )\n"]}, "mine-iron": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o10', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron\n;; Example: {'action': 'mine-iron', 'args': ['i1', 'i3', 'o13', 'o14', 'o17', 't8']}\n(:action mine-iron", "codex_output": ["(:action mine-iron\n  :parameters (?toolinv - inventory ?tool1inv - inventory ?tool2inv - inventory ?x - object ?tool - object ?tool1 - object ?tool2 - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-holding ?tool1inv ?tool1)\n    (object-of-type ?tool1 Key)\n    (inventory-holding ?tool2inv ?tool2)\n    (object-of-type ?tool2 Key)\n  )\n  :effect (and\n    (not (object-of-type ?x IronOreVein))\n    (object-of-type ?x IronIngot)\n  )\n )\n"]}, "move-right1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right1\n;; Example: {'action': 'move-right1', 'args': ['']}\n;; Example: {'action': 'move-right1', 'args': ['']}\n(:action move-right1", "codex_output": ["(:action move-right1\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n"]}, "move-left1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't10']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left1\n;; Example: {'action': 'move-left1', 'args': ['']}\n(:action move-left1", "codex_output": ["(:action move-left1\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (not (agent-at ?t1)) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n"]}, "mine-potato": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i9', 'o9', 't37']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o4', 'o10', 'o18', 't6']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o6', 'o12', 'o14', 't8']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o17', 't8']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o20', 't19']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o9', 'o17', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o17', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o0', 'o14', 'o19', 'i9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o12', 'o17', 't4']}\n(:action mine-potato", "codex_output": ["(:action mine-potato\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x PotatoPlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Hoe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Potato)\n  )\n )\n"]}, "match-to-feather": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o6', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: match-to-feather\n;; Example: {'action': 'match-to-feather', 'args': ['i18', 'o16', 'o7', 'o15', 'it1', 'it29']}\n(:action match-to-feather", "codex_output": ["(:action match-to-feather\n  :parameters (?ironingot - object ?goldingot - object ?wood - object ?tnt - object ?toolinv - inventory ?targetinv - inventory)\n  :precondition (and\n    (inventory-holding ?toolinv ?ironingot)\n    (object-of-type ?ironingot IronIngot)\n    (inventory-holding ?toolinv ?goldingot)\n    (object-of-type ?goldingot GoldIngot)\n    (inventory-holding ?toolinv ?wood)\n    (object-of-type ?wood Wood)\n    (inventory-holding ?toolinv ?tnt)\n    (object-of-type ?tnt Wood)\n    (inventory-empty ?targetinv)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv Feather)\n    (not (object-of-type Feather Hypothetical))\n  )\n )\n"]}, "mine-beetroot": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 'o15', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-beetroot\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o1', 'o13', 'o17', 't9']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't2']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'mine-beetroot', 'args': ['t14', 'o17']}\n(:action mine-beetroot", "codex_output": ["(:action mine-beetroot\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x BeetrootCrop)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Beetroot)\n  )\n )\n"]}, "mine-wool0": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i9', 'o9', 't37']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o81', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool0\n;; Example: {'action': 'mine-wool0', 'args': ['s8', 's9', 's12', 's15', 's16', 's19', 't16']}\n(:action mine-wool0", "codex_output": ["(:action mine-wool0\n  :parameters (?sheep - object ?sheep2 - object ?sheep3 - object ?sheep5 - object ?sheep6 - object ?sheep7 - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?sheep ?t)\n    (object-of-type ?sheep Sheep)\n    (object-at ?sheep2 ?t)\n    (object-of-type ?sheep2 Sheep)\n    (object-at ?sheep3 ?t)\n    (object-of-type ?sheep3 Sheep)\n    (object-at ?sheep5 ?t)\n    (object-of-type ?sheep5 Sheep)\n    (object-at ?sheep6 ?t)\n    (object-of-type ?sheep6 Sheep)\n    (object-at ?sheep7 ?t)\n    (object-of-type ?sheep7 Sheep)\n  )\n  :effect (and)\n )\n"]}, "plant-tree": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o6', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: plant-tree\n;; Example: {'action': 'plant-tree', 'args': ['i1', 'o1', 'o2', 't1']}\n(:action plant-tree", "codex_output": ["(:action plant-tree\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?y - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Seed)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Axe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Tree)\n\n\n  )\n )\n\n<END>"]}, "mine-cobble": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 'o15', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't17']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i11', 'o14', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-cobble\n;; Example: {'action': 'mine-cobble', 'args': ['i1', 'i3', 'o17', 't6']}\n(:action mine-cobble", "codex_output": ["(:action mine-cobble\n  :parameters (?toolinv - inventory ?targetinv - inventory ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (tile-nonempty ?t cobblestoneStash)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Cobblestone)\n  )\n )\n"]}, "mine-iron1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 'o15', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'b13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't4']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron1\n;; Example: {'action': 'mine-iron1', 'args': ['i1', 'i3', 'o2', 'o11', 'o17', 't5']}\n(:action mine-iron1", "codex_output": ["(:action mine-iron1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n"]}, "mine-iron-ore1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore1\n;; Example: {'action': 'mine-iron-ore1', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore1", "codex_output": ["(:action mine-iron-ore1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n"]}, "mine-beetroot1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o21', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o10', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-beetroot1\n;; Example: {'action': 'mine-beetroot1', 'args': ['i1', 'i2', 'o16', 'o17', 't9']}\n(:action mine-beetroot1", "codex_output": ["(:action mine-beetroot1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Cobblestone)\n  )\n )\n"]}, "drop": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'i3', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: drop\n;; Example: {'action': 'drop', 'args': ['t14', 'o17']}\n(:action drop", "codex_output": ["(:action drop\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?i ?x)\n  )\n  :effect (and\n    (not (inventory-empty ?i))\n    (object-at ?x ?t)\n    (object-of-type ?x Trash)\n  )\n )\n"]}, "mine-sugar-cane1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-sugar-cane1\n;; Example: {'action': 'mine-sugar-cane1', 'args': ['i1', 'i2', 'o1', 'o9', 'o11', 't6']}\n(:action mine-sugar-cane1", "codex_output": ["(:action mine-sugar-cane1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x SugarCanePlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target SugarCane)\n  )\n )\n"]}, "mine": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i6', 'o2', 'o12', 'o13', 'o15', 'o16', 'o17', 't17']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o11', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o0', 'o9', 'o16', 't7']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o10', 'o21', 'o9', 't14']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i2', 'o1', 'o17', 'o20', 't19']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't3']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o0', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine\n;; Example: {'action': 'mine', 'args': ['i1', 'i3', 'o4', 'o11', 'o16', 't9']}\n(:action mine", "codex_output": ["(:action mine\n  :parameters (?targetinv - inventory ?x - object ?toolinv - inventory ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n"]}}