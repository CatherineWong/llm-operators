{"mine-wood": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wood\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', '']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i2', 'o19', 'o23', 'o28', 't1']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o1', 'o12', 'o17', 't13']}\n;; Example: {'action': 'mine-wood', 'args': ['i6', 'i6', 'o14', 'o6', 't12']}\n(:action mine-wood", "codex_output": ["(:action mine-wood\n  :parameters (?toolinv - inventory ?targetinv - inventory ?woodtool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?woodtool)\n    (object-of-type ?woodtool Axe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wood)\n  )\n )\n"]}, "mine-wool1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o23', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['o6', 'o13', 'o15', 'o16', 't0']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool1\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n(:action mine-wool1", "codex_output": ["(:action mine-wool1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Sheep)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n  )\n )\n"]}, "collect-vegetable": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o10', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: collect-vegetable\n;; Example: {'action': 'collect-vegetable', 'args': ['t13']}\n(:action collect-vegetable", "codex_output": ["(:action collect-vegetable\n  :parameters (?t - tile)\n  :precondition (and\n    (agent-at ?t)\n  )\n  :effect (and\n  )\n )\n"]}, "mine-sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-sugar-cane\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7', 'i8', 'i9', 'i10', 'i11', 'i12', 't8']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o5', 'o15', 'o16', 'o17', 't5']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o2', 'o13', 'o17', 't7']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i2', 'o5', 'o17', 't16']}\n(:action mine-sugar-cane", "codex_output": ["(:action mine-sugar-cane\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x SugarCanePlant)\n    (not (inventory-empty ?toolinv))\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-holding ?targetinv ?target)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target SugarCane)\n  )\n )\n"]}, "mine-potato": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['o6', 'o13', 'o15', 'o16', 't0']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato", "codex_output": ["(:action mine-potato\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x PotatoPlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Axe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Potato)\n  )\n )\n"]}, "mine-wool2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool2\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o14', 'o17', 'o18', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o13', 'o19', 'o17', 'o6', 'o8', 'o14', 'o20', 'o10', 't13', 't16']}\n;; Example: {'action': 'mine-wool2', 'args': ['i2', 'i3', 'o1', 'o17', 'o18', 't15']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o2', 'o4', 'o7', 't15']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o3', 'o17', 't3']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i2', 'i5', 'o5', 'o6', 'o15', 't12']}\n(:action mine-wool2", "codex_output": ["(:action mine-wool2\n  :parameters (?targetinv2 - inventory ?toolinv2 - inventory ?targetinv - inventory ?x - object ?target - object ?toolinv - inventory ?tool - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Sheep)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n    (inventory-empty ?targetinv2)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n    (not (inventory-empty ?targetinv2))\n    (inventory-holding ?targetinv2 ?target)\n    (not (object-of-type"]}, "mine-sugar1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-sugar1\n;; Example: {'action': 'mine-sugar1', 'args': ['i1', 'i3', 'o4', 'o16', 't4']}\n(:action mine-sugar1", "codex_output": ["(:action mine-sugar1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x SugarCanePlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?tool)\n    (inventory-holding ?targetinv ?x)\n    (inventory-holding ?targetinv ?x)\n    (inventory-holding ?targetinv ?x)\n    (inventory-holding ?targetinv ?x)\n    (not (object-at ?x ?t))\n    (null (object-of-type ?tool Shears))\n    (null (object-of-type ?x SugarCanePlant))\n  )\n )\n"]}, "mine-gold-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-gold-ore\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'o3', 'o19', 't3']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o6', 'o13', 'o17', 't5']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i0', 'i1', 'i3', 'o3', 'o16', 't7']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i2', 'i3', 'o1', 'o13', 'o19', 't8']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o16', 't5']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i0', 'i1', 'o14', 'o17', 't14']}\n(:action mine-gold-ore", "codex_output": ["(:action mine-gold-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x GoldOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldOre)\n  )\n )\n"]}, "mine-beetroot": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-beetroot\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'i8', 'o10', 'o17', 't1']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o7', 'o12', 'o13', 'o17', 't8']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o3', 'o13', 'o17', 't11']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o10', 'o14', 'o17', 't8']}\n(:action mine-beetroot", "codex_output": ["(:action mine-beetroot\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x BeetrootCrop)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Beetroot)\n  )\n )\n"]}, "mine-feather-pond": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o23', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-feather-pond\n;; Example: {'action': 'mine-feather-pond', 'args': ['i1', 'i3', 'o155', 'o158', 'o162', 'o165', 'o169', 'o174', 't162']}\n(:action mine-feather-pond", "codex_output": ["(:action mine-feather-pond\n  :parameters (?toolinv - inventory ?oreinv - inventory ?chickeninv - inventory ?arrowinv - inventory ?bowinv - inventory ?workstationinv - inventory ?cashinv - inventory ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv Pickaxe)\n    (inventory-empty ?oreinv)\n    (inventory-empty ?chickeninv)\n    (inventory-empty ?arrowinv)\n    (inventory-empty ?bowinv)\n    (inventory-holding ?workstationinv WeaponStation)\n    (inventory-holding ?cashinv Key)\n  )\n  :effect (and\n    (not (inventory-empty ?oreinv))  (inventory-holding ?oreinv IronIngot)  (inventory-holdin"]}, "craft-stick": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: craft-stick\n;; Example: {'action': 'craft-stick', 'args': ['']}\n(:action craft-stick", "codex_output": ["(:action craft-stick\n  :parameters (?toolinv - inventory ?targetinv - inventory ?tool - object ?target - object)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Waxe)\n    (object-of-type ?target ToyCar)\n    (inventory-holding ?toolinv WoodPlank)\n    (inventory-empty ?targetinv)\n  )\n  :effect (and (not (inventory-empty ?targetinv)) (inventory-holding ?targetinv ?target))\n )\n"]}, "mine-coal": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-coal\n;; Example: {'action': 'mine-coal', 'args': ['']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'o19', 'o15', 'o22', 't1']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o4', 'o13', 'o16', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o20', 'o18', 'o16', 'o14', 'o13', 'o12', 'o11', 'o10', 'o9', 'o8', 'o7', 'o6', 'o3', 'o1', 'o0', 't18']}\n;; Example: {'action': 'mine-coal', 'args': ['i2', 'i5', 'o5', 't5']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o0', 'o9', 'o17', 't8']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o8', 'o13', 'o15', 'o17', 't13']}\n;; Example: {'action': 'mine-coal', 'args': ['i3', 'o6', 'o13', '', 't13']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'o2', 'o14', 'o16', 't5']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i4', 'o4', 'o10', 'o18', 't1']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o1', 'o5', 'o15', 't6']}\n(:action mine-coal", "codex_output": ["(:action mine-coal\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool1 - object ?tool2 - object ?tool3 - object ?tool4 - object ?tool5 - object ?tool6 - object ?tool7 - object ?tool8 - object ?tool9 - object ?tool10 - object ?tool11 - object ?tool12 - object ?tool13 - object ?tool14 - object ?tool15 - object ?tool16 - object ?tool17 - object ?tool18 - object ?target - object ?t - tile)\n  :precondition (and \n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x CoalOreVein)\n    (inventory-holding ?toolinv ?tool1)\n    (inventory-holding ?toolinv ?tool2)\n    (inventory-holding ?toolinv ?tool3)\n    (inventory-holding ?toolinv ?tool4)\n    (inventory-holding ?toolinv ?tool5)\n    (inventory-holding ?toolinv ?tool6)\n    (inventory-holding ?toolinv ?tool7)\n    ("]}, "do-nothing": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o10', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o8', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: do-nothing\n;; Example: {'action': 'do-nothing', 'args': ['']}\n;; Example: {'action': 'do-nothing', 'args': ['']}\n(:action do-nothing", "codex_output": ["(:action do-nothing\n  :parameters (?t - tile)\n  :precondition (agent-at ?t)\n  :effect (and)\n )\n"]}, "drop-off": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: drop-off\n;; Example: {'action': 'drop-off', 'args': ['i1', 'o2', 't4']}\n(:action drop-off", "codex_output": ["(:action drop-off\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (object-at Trash ?t) (inventory-holding ?i ?x) (not (inventory-empty ?i)))\n  :effect (and (object-at ?x ?t) (not (inventory-holding ?i ?x)) (inventory-empty ?i))\n )\n"]}, "mine-cobblestone": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o23', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o10', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-cobblestone\n;; Example: {'action': 'mine-cobblestone', 'args': ['i1', 'i3', 'o4', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-cobblestone', 'args': ['i1', 'o10', 'o13', 'o17', 't7']}\n(:action mine-cobblestone", "codex_output": ["(:action mine-cobblestone\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (object-at ?x ?t)\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-holding ?targetinv ?target)\n    (object-of-type ?target Trash)\n    (object-of-type ?x CobblestoneStash)\n  )\n  :effect (and\n    (inventory-holding ?targetinv ?target)\n    (not (inventory-holding ?targetinv ?target))\n    (object-of-type ?target Cobblestone)\n    (object-of-type ?x CobblestoneStash)\n  )\n )\n"]}, "mine-feather": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-feather\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o1', 'o8', 'o15', 't9']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o4', 'o8', 'o17', 't4']}\n;; Example: {'action': 'mine-feather', 'args': ['i2', 'i3', 'o2', 'o3', 'o4', 'o6', 'o8', 'o9', 't12']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't7']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i2', 'o1', 'o2', 't1']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i2', 'o6', 'o8', 't6']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o1', 'o5', 'o6', 't5']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o6', 'o16', 'o17', 't13']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o3', 'o6', 'o17', 't8']}\n;; Example: {'action': 'mine-feather', 'args': ['i3', 'o4', 't4']}\n(:action mine-feather", "codex_output": ["(:action mine-feather\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-of-type ?x Chicken)\n    (object-at ?x ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (object-of-type ?target Feather)\n    (not (object-of-type ?target Hypothetical))\n    (not (object-at ?x ?t))\n  )\n )\n"]}, "place-entity": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: place-entity\n;; Example: {'action': 'place-entity', 'args': ['i1', 'o17', 't8']}\n(:action place-entity", "codex_output": ["(:action place-entity\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (inventory-holding ?i ?x) (agent-at ?t))\n  :effect (and (object-at ?x ?t) (not (inventory-holding ?i ?x)))\n )\n"]}, "drop": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['t11', 'o6', 'o15', 'o17', 'i3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't21']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: drop\n;; Example: {'action': 'drop', 'args': ['i1', 'o17', 't6']}\n(:action drop", "codex_output": ["(:action drop\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (inventory-holding ?i ?x))\n  :effect (and (object-at ?x ?t) (inventory-empty ?i))\n )\n"]}, "move-robots": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-robots\n;; Example: {'action': 'move-robots', 'args': ['']}\n(:action move-robots", "codex_output": ["(:action move-robots\n  :parameters ()\n  :precondition (true)\n  :effect (true)\n )\n"]}, "up": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: up\n;; Example: {'action': 'up', 'args': ['']}\n;; Example: {'action': 'up', 'args': ['']}\n(:action up", "codex_output": ["(:action up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n"]}, "down": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['t11', 'o6', 'o15', 'o17', 'i3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o14', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: down\n;; Example: {'action': 'down', 'args': ['']}\n;; Example: {'action': 'down', 'args': ['']}\n(:action down", "codex_output": ["(:action down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n"]}, "mine-gold": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold\n;; Example: {'action': 'mine-gold', 'args': ['i1', 'i3', 'o3', 'o7', 'o10', 't6']}\n(:action mine-gold", "codex_output": ["(:action mine-gold\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x GoldOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldOre)\n  )\n )\n"]}, "mine-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-cane\n;; Example: {'action': 'mine-cane', 'args': ['i4', 'i6', 'o1', 'o2', 'o10', 't4']}\n(:action mine-cane", "codex_output": ["(:action mine-cane\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x SugarCanePlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target SugarCane)\n  )\n )\n"]}, "mine-iron": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron\n;; Example: {'action': 'mine-iron', 'args': ['i1', 'i3', 'o7', 'o13', 'o16', 't8']}\n;; Example: {'action': 'mine-iron', 'args': ['i1', 'i3', 'o11', 'o18', 'o17', 't9']}\n(:action mine-iron", "codex_output": ["(:action mine-iron\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n"]}, "open-iron-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: open-iron-ore\n;; Example: {'action': 'open-iron-ore', 'args': ['o11']}\n(:action open-iron-ore", "codex_output": ["(:action open-iron-ore\n  :parameters (?x - object)\n  : pre condition (and\n  (inventory-holding i1 ?x)\n  (object-of-type ?x IronOre))\n  :effect (and\n  (inventory-empty i 1)\n  (inventory-holding ?i3 ?x))\n  )"]}, "close": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: close\n;; Example: {'action': 'close', 'args': ['o11']}\n(:action close", "codex_output": ["(:action close\n  :parameters (?x - object)\n  :precondition (and)\n  :effect (and)\n )\n"]}, "harvest-sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['t11', 'o6', 'o15', 'o17', 'i3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: harvest-sugar-cane\n;; Example: {'action': 'harvest-sugar-cane', 'args': ['i1', 'i6', 'o8', 'o9', 'o19', 't7', 't9']}\n(:action harvest-sugar-cane", "codex_output": ["(:action harvest-sugar-cane\n  :parameters (?toolinv - inventory ?targetinv - inventory ?w - object ?tool - object ?target - object ?wt - tile ?tf - tile)\n  :precondition (and\n    (agent-at ?wt)\n    (agent-at ?tf)\n    (object-at ?w ?wt)\n    (object-of-type ?w SugarCanePlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target SugarCane)\n  )\n )\n"]}, "mine-wool": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool\n;; Example: {'action': 'mine-wool', 'args': ['i3', 'i1', 'o15', 'o11', 'o6', 't13']}\n;; Example: {'action': 'mine-wool', 'args': ['i1', 'i3', 'o10', 'o18', 'o19', 't7']}\n(:action mine-wool", "codex_output": ["(:action mine-wool\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Sheep)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n  )\n )\n"]}, "drive": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: drive\n;; Example: {'action': 'drive', 'args': ['i1', 'o15', 't18']}\n(:action drive", "codex_output": ["(:action drive\n  :parameters (?i - inventory ?car - object ?t - tile)\n  :precondition (and (agent-at ?t) (inventory-holding ?i ?car) (object-of-type ?car Boat))\n  :effect (and (agent-at ?t))\n )\n"]}, "leave": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['o6', 'o13', 'o15', 'o16', 't0']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['t11', 'o6', 'o15', 'o17', 'i3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: leave\n;; Example: {'action': 'leave', 'args': ['i1', 'o18', 'o17', 't15']}\n(:action leave", "codex_output": ["(:action leave\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (object-of-type ?x Hypothetical) (agent-at ?t) (inventory-holding ?i ?x))\n  :effect (and (object-at ?x ?t) (not (inventory-holding ?i ?x)) (inventory-empty ?i))\n )\n"]}, "mine-potato1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1", "codex_output": ["(:action mine-potato1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x PotatoPlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (inventory-holding ?targetinv ?target)\n    (not (inventory-empty ?targetinv))\n    (object-of-type ?target Potato)\n    (not (object-of-type ?target Hypothetical))\n  )\n )\n\n---- Initial Plan ----\nmine-iron-ore(i2, i3, o2, o13, Hypothetical, t11)\npick-up(i1, o1, t10)\nmove-right(t18, t19)\nmove-up(t19, t"]}, "harvest-beetroot": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o10', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: harvest-beetroot\n;; Example: {'action': 'harvest-beetroot', 'args': ['i1', 'i3', 'o3', 'o14', 'o17', 't3']}\n(:action harvest-beetroot", "codex_output": ["(:action harvest-beetroot\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x BeetrootCrop)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Beetroot)\n  )\n )\n"]}, "crave-wood": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't21']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: crave-wood\n;; Example: {'action': 'crave-wood', 'args': ['i3', 'i5', 'o4', 't5']}\n(:action crave-wood", "codex_output": ["(:action crave-wood\n  :parameters (?i3 - inventory ?i5 - inventory ?x4 - object ?t5 - tile)\n  :precondition (and\n    (agent-at ?t5)\n    (inventory-holding ?i3 ?x4)\n    (inventory-empty ?i5)\n  )\n  :effect (and\n    (inventory-holding ?i5 ?x4)\n    (not (inventory-empty ?i5))\n  )\n )\n"]}, "mine-potatoes": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potatoes\n;; Example: {'action': 'mine-potatoes', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't13']}\n(:action mine-potatoes", "codex_output": ["(:action mine-potatoes\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x PotatoPlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Hoe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Potato)\n  )\n )\n"]}, "mine-iron-ore2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o23', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore2\n;; Example: {'action': 'mine-iron-ore2', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't5']}\n(:action mine-iron-ore2", "codex_output": ["(:action mine-iron-ore2\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n"]}, "mine-wool4": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool4\n;; Example: {'action': 'mine-wool4', 'args': ['i4', 'i5', 'o5', 'o7', 'o12', 'o13', 'o15', 'o17', 'o8', 't12']}\n(:action mine-wool4", "codex_output": ["(:action mine-wool4\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x1 - object ?x2 - object ?x3 - object ?x4 - object ?x5 - object ?x6 - object ?x - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Sheep)\n    (inventory-holding ?toolinv ?x1)\n    (object-of-type ?x1 Shears)\n    (inventory-holding ?targetinv ?x5)\n    (object-of-type ?x5 Wool)\n    (inventory-holding ?targetinv ?x4)\n    (object-of-type ?x4 Wool)\n    (inventory-holding ?targetinv ?x3)\n    (object-of-type ?x3 Wool)\n    (inventory-holding ?targetinv ?x2)\n    (object-of-type ?x2 Wool)\n    (inventory-holding ?targetinv ?x6)\n    (object-of-type ?x6 Wool)\n  )\n"]}, "mine-right": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o8', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-right\n;; Example: {'action': 'mine-right', 'args': ['a2', 'a0', 'v2']}\n(:action mine-right", "codex_output": ["(:action mine-right\n  TBA\n )\n"]}, "cut-iron": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', '']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: cut-iron\n;; Example: {'action': 'cut-iron', 'args': ['v2', 'v5', 'i0', 'i1', 'i6', 'i7']}\n(:action cut-iron", "codex_output": ["(:action cut-iron\n  :parameters (?victiminv - inventory ?trashinv - inventory ?toolinv - inventory ?destinv - inventory ?tool - object ?target - object)\n  :precondition (and\n    (inventory-holding ?victiminv ?victim)\n    (inventory-holding ?trashinv ?trash)\n    (inventory-holding ?toolinv ?tool)\n    (inventory-empty ?destinv)\n    (object-of-type ?tool Shears)\n    (object-of-type ?trash IronOreVein)\n    (object-of-type ?victim IronOre)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?destinv))\n    (inventory-holding ?destinv ?target)\n    (inventory-holding ?victiminv ?victim)\n    (inventory-holding ?trashinv ?trash)\n    (inventory-holding ?toolinv ?tool)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )"]}, "mine-gold-ore1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold-ore1\n;; Example: {'action': 'mine-gold-ore1', 'args': ['i1', 'i3', 'o2', 'o13', 'o16', 't8']}\n(:action mine-gold-ore1", "codex_output": ["(:action mine-gold-ore1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x GoldOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool YellowPickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldOre)\n  )\n )\n"]}, "mine-feather1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-feather1\n;; Example: {'action': 'mine-feather1', 'args': ['i0', 'i2', 'o4', 'o13', 'o16', 't7']}\n(:action mine-feather1", "codex_output": ["(:action mine-feather1\n  :parameters (?x - object ?targetinv - inventory ?toolinv - inventory)\n  :precondition (and\n    (agent-at t7)\n    (object-at ?x t7)\n    (object-of-type ?x Chicken)\n    (inventory-empty ?targetinv)\n    (inventory-holding ?toolinv Shears)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv Feather)\n    (object-at Feather Chicken)\n   )\n  )\n"]}}