{"GotoLocation": "(:action GotoLocation\n        :parameters (?a - agent ?lEnd - location ?lStart - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )", "PickupObjectInReceptacle": "(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n        )\n    )", "PickupObjectNotInReceptacle": "(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n        )\n    )", "PutObjectInReceptacle": "(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?ot - otype ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )", "CleanObject": "(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )", "SliceObject": "(:action SliceObject\n        :parameters (?ko - object ?a - agent ?co - object ?l - location)\n\n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(objectAtLocation ?co ?l)\n\t\t(sliceable ?co)\n\t\t(holds ?a ?ko)\n\t\t)\n        :effect (and \n\t\t(isSliced ?co)\n\t\t)\n)"}