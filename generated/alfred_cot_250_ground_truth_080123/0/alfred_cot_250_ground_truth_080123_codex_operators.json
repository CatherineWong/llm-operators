{"ToggleObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ToggleObject\n;; Example: {'action': 'ToggleObject', 'args': ['floorlamp']}\n;; Example: {'action': 'ToggleObject', 'args': ['floorlamp']}\n;; Example: {'action': 'ToggleObject', 'args': ['desklamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToggleObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (toggleable ?o) ; Preserve toggleable property\n            (not (isToggled ?o)) ; Toggle the object\n            (holds ?a ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToggleObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (isToggled ?o))\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToggleObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToggleObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action ToggleObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (holds ?a ?o)\n            (isToggled ?o)\n        )\n        :effect (and\n            (not (isToggled ?o))\n        )\n    )\n\n<END>"]}, "SliceObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['statue']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['tomato']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['lettuce']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbagecan']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: SliceObject\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To slice an object, we need the object to be sliced and a tool that can perform slicing (e.g. knife). So both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (holds ?a ?t)\n            (objectType ?o ?t)\n            (sliceable ?o)\n            (not (isSliced ?o))\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To slice an object, we need an agent to perform the action, the location where the object is located, and the object itself.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (sliceable ?o)\n            (holds ?a ?o)\n            (not (isSliced ?o))\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To slice an object, we need the object to slice and a tool (e.g. a knife). So both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (objectType ?o SliceableType)\n            (objectType ?t KnifeType)\n            (atLocation ?a ?l)\n            (holds ?a ?t)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To slice an object, we need the object itself and a slicing tool (e.g. knife). Both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?st - otype)\n        :precondition (and\n            (objectType ?o ?st)\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To slice an object, we need the object to be sliced and a tool capable of slicing the object (e.g. a knife). So both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (sliceable ?o)\n            (atLocation ?a ?l)\n            (heldBy ?o ?a)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>"]}, "CoolObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['blackdrawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeetable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CoolObject\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['lettuce']}\n;; Example: {'action': 'CoolObject', 'args': ['cabbage']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato']}\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato']}\n;; Example: {'action': 'CoolObject', 'args': ['egg']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato']}\n;; Example: {'action': 'CoolObject', 'args': ['plate']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (heatable ?o)\n            (isHot ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"]}, "HeatObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['smallblacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['deskshelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: HeatObject\n;; Example: {'action': 'HeatObject', 'args': ['potato']}\n;; Example: {'action': 'HeatObject', 'args': ['egg']}\n;; Example: {'action': 'HeatObject', 'args': ['egg']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['potato']}\n;; Example: {'action': 'HeatObject', 'args': ['potato']}\n;; Example: {'action': 'HeatObject', 'args': ['mug']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['apple']}\n;; Example: {'action': 'HeatObject', 'args': ['potato']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['fruit']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['mug']}\n;; Example: {'action': 'HeatObject', 'args': ['mug']}\n;; Example: {'action': 'HeatObject', 'args': ['mug']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n            (not (coolable ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To heat an object, we interact with the object to be heated AND the receptacle that will contain the object during heating (e.g. a microwave). So both must be parameters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>\n\n", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To heat an object, we interact with the object to be heated AND the receptacle that will provide the heat (e.g. a stove burner). So both must be parameters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (heatable ?o)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "CutObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['tomato']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CutObject\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (objectType ?t KnifeType)\n            (holds ?a ?o)\n            (holds ?a ?t)\n            (not (isSliced ?o))\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (objectType ?t KnifeType)\n            (holds ?a ?o)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o TomatoType)\n            (objectType ?t KnifeType)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n            (not (holds ?a ?o))\n            (holds ?a ?t)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator. The tool used to cut the object (e.g. knife) is also a parameter.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?t)\n            (sliceable ?o)\n            (holds ?a ?t)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (objectType ?t KnifeType)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>\n\n"]}, "CookObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CookObject\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['pan']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n    :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n    :precondition (and\n        (atLocation ?a ?l)\n        (objectType ?o ?ot)\n        (receptacleType ?r StoveBurnerType)\n        (receptacleAtLocation ?r ?l)\n        (holds ?a ?o)\n        (not (isHot ?o))\n        (not (holdsAnyReceptacleObject ?a))\n    )\n    :effect (and\n        (holds ?a ?o)\n        (holdsAny ?a)\n        (isHot ?o)\n    )\n)\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (heatable ?o)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n            (isHot ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (isClean ?o))\n            (heatable ?o)\n            (not (isHot ?o))\n            (inReceptacle ?o ?r)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cook an object, we interact with the object to be cooked AND the receptacle that will cook the object (e.g. a stove). So both must be parameters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r StoveBurnerType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?r)\n            (isCooked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r StoveBurnerType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "TurnOnObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['stand']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['bed']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOnObject\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['stove']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>"]}, "GoToLocation": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['bedroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['lettuce']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GoToLocation\n;; Example: {'action': 'GoToLocation', 'args': ['countertop']}\n;; Example: {'action': 'GoToLocation', 'args': ['tomato']}\n;; Example: {'action': 'GoToLocation', 'args': ['fridge']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (objectAtLocation ?o ?lEnd)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; Renaming the operator to GoToLocation as per the PDDL convention\n(:action GoToLocation\n        :parameters (?a - agent ?l - location)\n        :precondition (and\n            (atLocation ?a ?l)\n        )\n        :effect (and\n            (atLocation ?a ?l)\n        )\n    )\n\n<END>"]}, "WashObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['pan']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['smallblacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbagecan']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: WashObject\n;; Example: {'action': 'WashObject', 'args': ['spatula']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will hold the water (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will hold the water (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we need the agent, the object, and the receptacle where the object will be washed (e.g. a sink). So these three must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will hold the water for washing (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will hold the water (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"]}}