{"move-up": "(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )", "move-down": "(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )", "move-left": "(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )", "move-right": "(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )", "pick-up": "(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )", "place-down": "(:action place-down\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (inventory-holding ?i ?x))\n  :effect (and (object-at ?x ?t) (not (inventory-holding ?i ?x)) (inventory-empty ?i))\n )", "mine-iron-ore": "(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )", "mine-potato": "(:action mine-potato\n        :parameters (?toolinv - inventory ?x - object ?target - object ?t - tile ?tool - object ?targetinv - inventory)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)"}