operator_name,gt_operator,codex_raw_operator,codex_preprocessed_operator,
ToastObject,,"
(:action ToastObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toastable ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action ToastObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ToastObject,,"
(:action ToastObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toastable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action ToastObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ToastObject,,"
(:action ToastObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle ToasterSlotType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toastable ?o)
            (isToggled ?toolreceptacle)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action ToastObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(isToggled ?toolreceptacle)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ExamineObject,,"
(:action ExamineObject_MagnifyingGlass
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MagnifyingGlassType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            ;; No effect.
        )
    )
",FAILED,
ExamineObject,,"
(:action ExamineObject_Flashlight
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject FlashlightType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            ;; No effect.
        )
    )
",FAILED,
ExamineObject,,"
(:action ExamineObject_NoTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            ;; No effect.
        )
    )
",FAILED,
TurnOnObject,,"
(:action TurnOnObject1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isToggled ?o)
        )
    )
","(:action TurnOnObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject LightSwitchType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
TurnOnObject,,"
(:action TurnOnObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle LampType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (inReceptacle ?toolreceptacle ?l)
        )
        :effect (and
            (isToggled ?o)
        )
    )
","(:action TurnOnObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
TurnOnObject,,"
(:action TurnOnObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
        )
        :effect (and
            (isToggled ?o)
        )
    )
","(:action TurnOnObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
;; Operator, HeatObject
;; HeatObject takes an object to heat and a specific tool of type ToasterType.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be heated, ?toolobject - object to heat with.
;; Preconditions: The toolobject is a ToasterType, the agent is at a location and the object to be heated is at the same location, the object is heatable, and the agent is holding the tool.
;; Postconditions: the ?o object is now hot.
(:action HeatObjectWithToaster
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
;; Operator, HeatObject
;; HeatObject takes an object to heat and a specific tool of type MicrowaveType.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be heated, ?toolreceptacle - receptacle to heat the object in.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the object to be heated is at the same location, and the agent is holding the object to be heated.
;; Postconditions: the ?o object is now hot.
(:action HeatObjectWithMicrowave
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
;; Operator, HeatObject
;; HeatObject takes an object to heat and does not require any specific tool.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be heated.
;; Preconditions: The agent is at a location and the object to be heated is at the same location, and the object is heatable.
;; Postconditions: the ?o object is now hot.
(:action HeatObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
(:action CookObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
        )
        :effect (and
            (isHot ?o)
        )
)
","(:action CookObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
(:action CookObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject StoveType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
        )
)
","(:action CookObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
(:action CookObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
)
","(:action CookObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CutObject,,"
;; Operator, CutObject 1.
;; CutObject 1 takes an object to cut and a specific tool of type KnifeType.
;; KnifeType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of object to be cut; ?o - object to be cut, ?toolobject - object to cut with.
;; Preconditions: The toolobject is a KnifeType, the agent is at a location and the object to be cut is at the same location, the object is sliceable, and the agent is holding the tool.
;; Postconditions: the ?o object is sliced.
(:action CutObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action CutObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject KnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
CutObject,,"
;; Operator, CutObject 2.
;; CutObject 2 takes an object to cut and a specific tool receptacle of type CuttingBoardType.
;; CuttingBoardType is an rtype. Therefore, the tool receptacle is an receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be cut, ?toolreceptacle - receptacle to cut the object on.
;; Preconditions: The toolreceptacle is a CuttingBoardType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be cut.
;; Postconditions: the ?o object is sliced.
(:action CutObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle CuttingBoardType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isSliced ?o)
        )
    )
","(:action CutObject_1
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
CutObject,,"
;; Operator, CutObject 3.
;; CutObject 3 takes an object to cut and no tool object or tool receptacle.
;; Parameters: ?a - agent, ?l - location of object to be cut; ?o - object to be cut.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is sliceable.
;; Postconditions: the ?o object is sliced.
(:action CutObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action CutObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
PlaceObject,,"
(:action PlaceObject
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectAtLocation ?o ?a)
            (holds ?a ?o)
            (openable ?r)
            (not (isFilled ?r))
        )
        :effect (and
            (inReceptacle ?o ?r)
            (not (holds ?a ?o))
        )
    )
","(:action PlaceObject_0
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		(openable ?r)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		(not (holds ?a ?o))
		)
)",
PlaceObject,,"
(:action PlaceAndFillObject
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectAtLocation ?o ?a)
            (holds ?a ?o)
            (fillable ?r)
            (openable ?r)
            (not (isFilled ?r))
        )
        :effect (and
            (inReceptacle ?o ?r)
            (not (holds ?a ?o))
            (isFilled ?r)
        )
    )
","(:action PlaceObject_1
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		(openable ?r)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		(not (holds ?a ?o))
		)
)",
PlaceObject,,"
(:action PlaceAndCloseObject
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectAtLocation ?o ?a)
            (holds ?a ?o)
            (openable ?r)
            (not (isFilled ?r))
            (closeable ?o)
        )
        :effect (and
            (inReceptacle ?o ?r)
            (not (holds ?a ?o))
            (opened ?r)
        )
    )
","(:action PlaceObject_2
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		(openable ?r)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		(not (holds ?a ?o))
		(opened ?r)
		)
)",
TurnOffObject,,"
;; Operator, TurnOffObject using a tool object.
;; TurnOffObject takes an object to turn off and a specific tool of type LightSwitchType.
;; LightSwitchType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be turned off, ?toolobject - object to turn off with.
;; Preconditions: The toolobject is a LightSwitchType, the agent is at a location and the object is at the same location, the object is toggleable, and the agent is holding the tool.
;; Postconditions: The ?o object is now toggled off.
(:action TurnOffObjectUsingToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject LightSwitchType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
TurnOffObject,,"
;; Operator, TurnOffObject using a tool receptacle.
;; TurnOffObject takes an object to turn off and a specific tool of type StoveKnobType.
;; StoveKnobType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be turned off, ?toolreceptacle - receptacle to turn off with.
;; Preconditions: The toolreceptacle is a StoveKnobType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be turned off.
;; Postconditions: The ?o object is now toggled off.
(:action TurnOffObjectUsingToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle StoveKnobType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffObject_1
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
TurnOffObject,,"
;; Operator, TurnOffObject without using any tool object or tool receptacle.
;; TurnOffObject takes an object to turn off directly.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be turned off.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: The ?o object is now toggled off.
(:action TurnOffObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
RinseObject,,"
;; Operator, RinseObject using a tool object
;; RinseObject takes an object to rinse and a specific tool of type ShowerGlassType.
;; ShowerGlassType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be rinsed, ?toolobject - object to rinse with.
;; Preconditions: The toolobject is a ShowerGlassType, the agent is at a location and the object to be rinsed is at the same location, and the agent is holding the tool.
;; Postconditions: the ?o object is now clean.
(:action RinseObject1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ShowerGlassType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action RinseObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ShowerGlassType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isClean ?o)
		)
)",
RinseObject,,"
;; Operator, RinseObject using a tool receptacle
;; RinseObject takes an object to rinse and a specific tool of type SinkBasinType.
;; SinkBasinType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be rinsed, ?toolreceptacle - receptacle to rinse the object in.
;; Preconditions: The toolreceptacle is a SinkBasinType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be rinsed.
;; Postconditions: the ?o object is now clean.
(:action RinseObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action RinseObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle SinkBasinType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
RinseObject,,"
;; Operator, RinseObject without using any tool object or receptacle
;; RinseObject takes an object to rinse without the need for any tool object or receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be rinsed.
;; Preconditions: The agent is at a location and the object to be rinsed is at the same location, and the object is cleanable.
;; Postconditions: the ?o object is now clean.
(:action RinseObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action RinseObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectUsingKnife
    :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
    :precondition (and
        (objectType ?toolobject KnifeType)
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (sliceable ?o)
        (holds ?a ?toolobject)
    )
    :effect (and
        (isSliced ?o)
    )
)
","(:action SliceObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject KnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectUsingButterKnife
    :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
    :precondition (and
        (objectType ?toolobject ButterKnifeType)
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (sliceable ?o)
        (holds ?a ?toolobject)
    )
    :effect (and
        (isSliced ?o)
    )
)
","(:action SliceObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ButterKnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithoutTool
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (sliceable ?o)
    )
    :effect (and
        (isSliced ?o)
    )
)
","(:action SliceObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
DiscardObject,,"
;; Operator, DiscardObject Without Tool
;; DiscardObjectWithoutTool takes an object to discard without any tool required.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be discarded.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is discardable.
;; Postconditions: the ?o object is no longer at the location.
(:action DiscardObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (discardable ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
)
","(:action DiscardObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
DiscardObject,,"
;; Operator, DiscardObjectWithTool
;; DiscardObjectWithTool takes an object to discard and a specific tool object of type DiscardToolType.
;; DiscardToolType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be discarded, ?toolobject - object to discard with.
;; Preconditions: The toolobject is a DiscardToolType, the agent is at a location and the object to be discarded is at the same location, the object is discardable, and the agent is holding the tool.
;; Postconditions: the ?o object is no longer at the location.
(:action DiscardObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject DiscardToolType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (discardable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
)
","(:action DiscardObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
DiscardObject,,"
;; Operator, DiscardObjectInReceptacle
;; DiscardObjectInReceptacle takes an object to discard and a specific tool receptacle of type DiscardBinType.
;; DiscardBinType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be discarded, ?toolreceptacle - receptacle to discard into.
;; Preconditions: The toolreceptacle is a DiscardBinType, the agent is at a location and the object to be discarded is at the same location, the object is discardable, and the agent is holding the object to be discarded.
;; Postconditions: the ?o object is no longer at the location and is now in the toolreceptacle.
(:action DiscardObjectInReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle DiscardBinType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (discardable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
            (inReceptacle ?o ?toolreceptacle)
        )
)
","(:action DiscardObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		(inReceptacle ?o ?toolreceptacle)
		)
)",
ThrowObject,,"
(:action ThrowObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (not (holds ?a ?o))
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
)
","(:action ThrowObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(not (holds ?a ?o))
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowObject,,"
(:action ThrowObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
)
","(:action ThrowObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowObject,,"
(:action ThrowObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (gratable ?o)
            (holds ?a ?o)
            (receptacleAtLocation ?toolreceptacle ?l)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
)
","(:action ThrowObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		(receptacleAtLocation ?toolreceptacle ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowAwayObject,,"
(:action ThrowAwayObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle GarbageCanType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
            (inReceptacle ?o ?toolreceptacle)
        )
    )
","(:action ThrowAwayObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle GarbageCanType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		(inReceptacle ?o ?toolreceptacle)
		)
)",
ThrowAwayObject,,"
(:action ThrowAwayObject2
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowAwayObject,,"
(:action ThrowAwayObject3
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject GarbageBagType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
MicrowaveObject,,"
;; Operator, MicrowaveObject.
;; MicrowaveObject takes an object to microwave and a specific tool of type MicrowaveType.
;; MicrowaveType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be microwaved, ?toolreceptacle - receptacle to microwave the object in.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be microwaved.
;; Postconditions: the ?o object is now hot.
(:action MicrowaveObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action MicrowaveObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
MicrowaveObject,,"
;; Operator, MicrowaveObjectWithTime.
;; MicrowaveObjectWithTime takes an object to microwave, a specific tool of type MicrowaveType, and a time.
;; MicrowaveType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be microwaved, ?toolreceptacle - receptacle to microwave the object in, ?time - time to microwave the object.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be microwaved.
;; Postconditions: the ?o object is now hot.
(:action MicrowaveObjectWithTime
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle ?time - time)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action MicrowaveObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
MicrowaveObject,,"
;; Operator, MicrowaveObjectWithPower.
;; MicrowaveObjectWithPower takes an object to microwave, a specific tool of type MicrowaveType, and a power level.
;; MicrowaveType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be microwaved, ?toolreceptacle - receptacle to microwave the object in, ?power - power level to microwave the object.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be microwaved.
;; Postconditions: the ?o object is now hot.
(:action MicrowaveObjectWithPower
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle ?power - power level)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action MicrowaveObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
GoToObject,,"
(:action GoToObject1
      :parameters (?a - agent ?lStart - location ?lEnd - location ?o - object)
      :precondition (and
          (atLocation ?a ?lStart)
          (objectAtLocation ?o ?lEnd)
      )
      :effect (and
          (atLocation ?a ?lEnd)
          (not (atLocation ?a ?lStart))
      )
  )
","(:action GoToObject_0
        :parameters (?a - agent ?lStart - location ?o - object ?lEnd - location)

        :precondition (and 
		(atLocation ?a ?lStart)
		(objectAtLocation ?o ?lEnd)
		)
        :effect (and 
		(atLocation ?a ?lEnd)
		(not (atLocation ?a ?lStart))
		)
)",
GoToObject,,"
(:action GoToObject2
      :parameters (?a - agent ?lStart - location ?lEnd - location ?o - object ?toolobject - object)
      :precondition (and
          (atLocation ?a ?lStart)
          (objectAtLocation ?o ?lEnd)
	      (holds ?a ?toolobject)
	      (objectType ?toolobject ScrubBrushType)
      )
      :effect (and
          (atLocation ?a ?lEnd)
          (not (atLocation ?a ?lStart))
      )
  )
",FAILED,
GoToObject,,"
(:action GoToObject3
      :parameters (?a - agent ?lStart - location ?lEnd - location ?o - object ?toolreceptacle - receptacle)
      :precondition (and
          (atLocation ?a ?lStart)
          (objectAtLocation ?o ?lEnd)
		  (receptacleType ?toolreceptacle DresserType)
      )
      :effect (and
          (atLocation ?a ?lEnd)
          (not (atLocation ?a ?lStart))
      )
  )
",FAILED,
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
(:action CleanObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action CleanObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
(:action CleanObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ScrubBrushType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action CleanObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ScrubBrushType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isClean ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
(:action CleanObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SoapBottleType)
            (opened ?toolreceptacle)
            (isFilled ?toolreceptacle)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action CleanObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(opened ?toolreceptacle)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
TurnOnLight,,"
;; Operator, TurnOnLight (Option 1)
;; TurnOnLight takes a LightSwitchType object to turn on.
;; LightSwitchType is an otype. Therefore, the object is a tool object.
;; Parameters: ?a - agent, ?l - location of the tool object; ?o - tool object.
;; Preconditions: The agent is at a location, the tool object is at the same location, and the agent is holding the tool object.
;; Postconditions: the ?o tool object is toggled.
(:action TurnOnLightOption1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (objectType ?o LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isToggled ?o)
        )
    )
","(:action TurnOnLight_0
        :parameters (?o - object ?a - agent ?l - location)

        :precondition (and 
		(objectType ?o LightSwitchType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
TurnOnLight,,"
;; Operator, TurnOnLight (Option 2)
;; TurnOnLight takes a LightSwitchType object to turn on and a LightSwitchType receptacle to hold the tool object.
;; LightSwitchType is an otype. Therefore, the object is a tool object and the receptacle is a tool receptacle.
;; Parameters: ?a - agent, ?lTool - location of the tool object; ?oTool - tool object; ?lReceptacle - location of the tool receptacle; ?r - tool receptacle.
;; Preconditions: The agent is at a location, the tool object is at the same location as the tool receptacle, the tool receptacle is an LightSwitchType, and the agent is holding the tool object.
;; Postconditions: the ?o tool object is toggled.
(:action TurnOnLightOption2
        :parameters (?a - agent ?lTool - location ?oTool - object ?lReceptacle - location ?r - receptacle)
        :precondition (and
            (objectType ?oTool LightSwitchType)
            (receptacleType ?r LightSwitchType)
            (atLocation ?a ?lTool)
            (objectAtLocation ?oTool ?lTool)
            (receptacleAtLocation ?r ?lReceptacle)
            (isToggled ?r)
            (holds ?a ?oTool)
        )
        :effect (and
            (isToggled ?oTool)
        )
    )
",FAILED,
TurnOnLight,,"
;; Operator, TurnOnLight (Option 3)
;; TurnOnLight takes a LightSwitchType receptacle to turn on.
;; LightSwitchType is an rtype. Therefore, the tool receptacle is a tool receptacle.
;; Parameters: ?a - agent, ?lReceptacle - location of the tool receptacle; ?r - tool receptacle.
;; Preconditions: The agent is at a location and the tool receptacle is at the same location.
;; Postconditions: the ?r tool receptacle is toggled.
(:action TurnOnLightOption3
        :parameters (?a - agent ?lReceptacle - location ?r - receptacle)
        :precondition (and
            (receptacleType ?r LightSwitchType)
            (atLocation ?a ?lReceptacle)
            (receptacleAtLocation ?r ?lReceptacle)
        )
        :effect (and
           (isToggled ?r)
        )
    )
",FAILED,
TurnOffLight,,"
(:action TurnOffLight1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffLight_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject LightSwitchType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
TurnOffLight,,"
(:action TurnOffLight2
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffLight_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
TurnOffLight,,"
(:action TurnOffLight3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle LightSwitchType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffLight_2
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject.
;; OpenObject takes any object to be opened.
;; This action is applicable to any openable object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is openable.
;; Postconditions: The ?o object is now opened.
(:action OpenObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
        )
        :effect (and
            (opened ?o)
        )
    )
",FAILED,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObjectWithTool.
;; OpenObjectWithTool takes any object to be opened and a specific tool of type ButterknifeType.
;; ButterknifeType is an object type. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened, ?toolobject - ButterknifeType object.
;; Preconditions: The toolobject is a ButterknifeType, the agent is at a location and the object is at the same location, the object is openable, and the agent is holding the tool.
;; Postconditions: The ?o object is now opened.
(:action OpenObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ButterknifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (opened ?o)
        )
    )
",FAILED,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObjectWithReceptacle.
;; OpenObjectWithReceptacle takes any object to be opened and a specific receptacle of type DrawerType.
;; DrawerType is a receptacle type. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened, ?toolreceptacle - DrawerType receptacle.
;; Preconditions: The toolreceptacle is a DrawerType, the agent is at a location and the object is at the same location, the object is openable, and the agent is holding the tool.
;; Postconditions: The ?o object is now opened.
(:action OpenObjectWithReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle DrawerType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
            (holds ?a ?toolreceptacle)
        )
        :effect (and
            (opened ?o)
        )
    )
",FAILED,
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
(:action CloseObject_Key
  :parameters (?a - agent ?l - location ?r - receptacle ?key - object)
  :precondition (and
    (atLocation ?a ?l)
    (receptacleAtLocation ?r ?l)
    (receptacleType ?r SafeType)
    (holds ?a ?key)
  )
  :effect (and
    (opened ?r)
  )
)
","(:action CloseObject_0
        :parameters (?a - agent ?l - location ?r - receptacle ?key - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(receptacleType ?r SafeType)
		(holds ?a ?key)
		)
        :effect (and 
		(opened ?r)
		)
)",
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
(:action CloseObject
  :parameters (?a - agent ?l - location ?r - receptacle)
  :precondition (and
    (atLocation ?a ?l)
    (receptacleAtLocation ?r ?l)
    (openable ?r)
  )
  :effect (and
    (opened ?r)
  )
)
","(:action CloseObject_1
        :parameters (?a - agent ?l - location ?r - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(openable ?r)
		)
        :effect (and 
		(opened ?r)
		)
)",
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
(:action CloseObject_Drawer
  :parameters (?a - agent ?l - location ?r - receptacle ?toolreceptacle - receptacle)
  :precondition (and
    (atLocation ?a ?l)
    (receptacleAtLocation ?r ?l)
    (openable ?r)
    (holds ?a ?toolreceptacle)
    (receptacleType ?toolreceptacle DrawerType)
  )
  :effect (and
    (opened ?r)
  )
)
","(:action CloseObject_2
        :parameters (?a - agent ?l - location ?r - receptacle ?toolreceptacle - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(openable ?r)
		(holds ?a ?toolreceptacle)
		)
        :effect (and 
		(opened ?r)
		)
)",
LookAtObject,,"
;; Operator LookAtObject.
;; LookAtObject takes an object to look at.
;; This action is applicable to any object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be looked at.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: none.
(:action LookAtObject
	:parameters (?a - agent ?l - location ?o - object)
	:precondition (and
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
	)
	:effect (and
	)
)
",FAILED,
LookAtObject,,"
;; Operator LookAtObjectWithLens.
;; LookAtObjectWithLens takes an object to look at and a specific object of type LensType to use as the lens.
;; LensType is an otype. Therefore, the lens is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be looked at, ?lensobject - object to use as the lens.
;; Preconditions: The lensobject is a LensType, the agent is at a location and the object is at the same location, and the agent is holding the lens object.
;; Postconditions: none.
(:action LookAtObjectWithLens
	:parameters (?a - agent ?l - location ?o - object ?lensobject - object)
	:precondition (and
		(objectType ?lensobject LensType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?lensobject)
	)
	:effect (and
	)
)
",FAILED,
LookAtObject,,"
;; Operator LookAtObjectInMirror.
;; LookAtObjectInMirror takes an object to look at and a specific object of type MirrorType to use as the mirror.
;; MirrorType is an otype. Therefore, the mirror is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be looked at, ?mirrorobject - object to use as the mirror.
;; Preconditions: The mirrorobject is a MirrorType, the agent is at a location and the object is at the same location, and the agent is holding the mirror object.
;; Postconditions: none.
(:action LookAtObjectInMirror
	:parameters (?a - agent ?l - location ?o - object ?mirrorobject - object)
	:precondition (and
		(objectType ?mirrorobject MirrorType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?mirrorobject)
	)
	:effect (and
	)
)
",FAILED,
InspectObject,,"
(:action InspectObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (inspected ?a ?o)
        )
    )
",FAILED,
InspectObject,,"
(:action InspectObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (inspected ?a ?o)
        )
    )
",FAILED,
InspectObject,,"
(:action InspectObjectWithReceptacleTool
        :parameters (?a - agent ?l - location ?o - object  ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle DeskType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (inspected ?a ?o)
        )
    )
",FAILED,
LookObject,,"
;; Operator, LookObject.
;; LookObject takes any object to look at.
;; This action is applicable to any object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be looked at.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: The agent has looked at the object.
(:action LookObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (holds ?a ?o)
        )
)
","(:action LookObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(holds ?a ?o)
		)
)",
LookObject,,"
;; Operator, LookObjectWithTool.
;; LookObjectWithTool takes any object to look at, and a specific tool of type MirrorType.
;; MirrorType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be looked at, ?toolobject - object to look at the object with.
;; Preconditions: The toolobject is a MirrorType, the agent is at a location and the object is at the same location, and the agent is holding the tool.
;; Postconditions: The agent has looked at the object using the tool.
(:action LookObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MirrorType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (holds ?a ?o)
        )
)
","(:action LookObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject MirrorType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(holds ?a ?o)
		)
)",
LookObject,,"
;; Operator, LookObjectInReceptacle.
;; LookObjectInReceptacle takes any object to look at, and a specific receptacle of type DrawerType.
;; DrawerType is an rtype. Therefore, the receptacle is a receptacle.
;; Parameters: ?a - agent, ?lReceptacle - location of the receptacle; ?lObject - location of the object; ?o - object to be looked at, ?r - receptacle with the object inside.
;; Preconditions: The receptacle is a DrawerType, the agent is at a location and the receptacle is at the same location, the object is at the same location as the receptacle, and the object is in the receptacle.
;; Postconditions: The agent has looked at the object in the receptacle.
(:action LookObjectInReceptacle
        :parameters (?a - agent ?lReceptacle - location ?lObject - location ?o - object ?r - receptacle)
        :precondition (and
            (receptacleType ?r DrawerType)
            (atLocation ?a ?lReceptacle)
            (atLocation ?o ?lObject)
            (inReceptacle ?o ?r)
        )
        :effect (and
            (holds ?a ?o)
        )
)
",FAILED,
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
;; Operator, CoolObject Option 1.
;; CoolObject Option 1 takes an object to cool and a specific tool receptacle type of type FridgeType.
;; Parameters: ?a - agent, ?l - location of the tool receptacle; ?o - object to be cooled, ?toolreceptacle - receptacle to cool the object in.
;; Preconditions: The toolreceptacle is a FridgeType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be cooled.
;; Postconditions: the ?o object is now cool.
(:action CoolObjectOption1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action CoolObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle FridgeType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
;; Operator, CoolObject Option 2.
;; CoolObject Option 2 takes an object to cool and does not require any tools.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be cooled.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: the ?o object is now cool.
(:action CoolObjectOption2
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action CoolObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isCool ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
;; Operator, CoolObject Option 3.
;; CoolObject Option 3 takes an object to cool and a specific tool object of type IceCubeType.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be cooled, ?toolobject - object to cool the object with.
;; Preconditions: The toolobject is a IceCubeType, the agent is at a location and the object is at the same location, and the agent is holding the tool.
;; Postconditions: the ?o object is now cool.
(:action CoolObjectOption3
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject IceCubeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isCool ?o)
        )
    )
","(:action CoolObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isCool ?o)
		)
)",
WashObject,,"
(:action WashObject
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (cleanable ?o)
    )
    :effect (and
        (isClean ?o)
    )
)
","(:action WashObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
WashObject,,"
(:action WashObjectWithWater
    :parameters (?a - agent ?lWash - location ?o - object ?rWater - receptacle)
    :precondition (and
        (atLocation ?a ?lWash)
        (objectAtLocation ?o ?lWash)
        (cleanable ?o)
        (atLocation ?rWater ?lWash)
        (receptacleType ?rWater SinkBasinType)
        (isFilled ?rWater)
    )
    :effect (and
        (isClean ?o)
    )
)
","(:action WashObject_1
        :parameters (?a - agent ?lWash - location ?o - object ?rWater - agent)

        :precondition (and 
		(atLocation ?a ?lWash)
		(objectAtLocation ?o ?lWash)
		(cleanable ?o)
		(atLocation ?rWater ?lWash)
		)
        :effect (and 
		(isClean ?o)
		)
)",
WashObject,,"
(:action WashObjectWithSoap
    :parameters (?a - agent ?lWash - location ?o - object ?toolSoap - object)
    :precondition (and
        (atLocation ?a ?lWash)
        (objectAtLocation ?o ?lWash)
        (cleanable ?o)
        (holds ?a ?toolSoap)
        (objectType ?toolSoap SoapBarType)
    )
    :effect (and
        (isClean ?o)
    )
)
","(:action WashObject_2
        :parameters (?a - agent ?lWash - location ?o - object ?toolSoap - object)

        :precondition (and 
		(atLocation ?a ?lWash)
		(objectAtLocation ?o ?lWash)
		(cleanable ?o)
		(holds ?a ?toolSoap)
		(objectType ?toolSoap SoapBarType)
		)
        :effect (and 
		(isClean ?o)
		)
)",
WarmObject,,"
;; Operator, WarmObject.
;; WarmObject takes an object to be warmed up.
;; This action is applicable to any coolable object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be warmed up.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is coolable.
;; Postconditions: the ?o object is now warm.
(:action WarmObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
        )
        :effect (and
            (isHot ?o)
            (not (isCool ?o))
        )
)
","(:action WarmObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		)
        :effect (and 
		(isHot ?o)
		(not (isCool ?o))
		)
)",
WarmObject,,"
;; Operator, WarmObjectWithTool.
;; WarmObjectWithTool takes an object to be warmed up and a specific tool of type ToasterType.
;; ToasterType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be warmed up, ?toolobject - object to warm the object with.
;; Preconditions: The toolobject is a ToasterType, the agent is at a location and the object to be warmed up is at the same location, the object is coolable, and the agent is holding the tool.
;; Postconditions: the ?o object is now warm.
(:action WarmObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
            (not (isCool ?o))
        )
)
","(:action WarmObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		(not (isCool ?o))
		)
)",
WarmObject,,"
;; Operator, WarmObjectInReceptacle.
;; WarmObjectInReceptacle takes an object to be warmed up and a specific tool receptacle of type MicrowaveType.
;; MicrowaveType is an rtype. Therefore, the tool receptacle is an receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be warmed up, ?toolreceptacle - receptacle to warm the object in.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, the receptacle is openable and opened, and the agent is holding the object to be warmed up.
;; Postconditions: the ?o object is now warm.
(:action WarmObjectInReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (openable ?toolreceptacle)
            (opened ?toolreceptacle)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
            (not (isCool ?o))
        )
)
","(:action WarmObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(openable ?toolreceptacle)
		(opened ?toolreceptacle)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		(not (isCool ?o))
		)
)",
ChillObject,,"
;; Operator, ChillObject.
;; ChillObject takes an object to chill and a specific tool of type FridgeType.
;; FridgeType is an rtype. Therefore, the tool is an receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be chilled, ?toolreceptacle - receptacle to chill the object in.
;; Preconditions: The toolreceptacle is a FridgeType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be chilled.
;; Postconditions: the ?o object is now cool.
(:action ChillObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle FridgeType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ChillObject,,"
;; Operator, ChillObjectWithoutTool.
;; ChillObjectWithoutTool takes an object to chill without any tool.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be chilled.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: the ?o object is now cool.
(:action ChillObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ChillObject,,"
;; Operator, ChillObjectWithToggledTool.
;; ChillObjectWithToggledTool takes an object to chill and a specific tool of type FridgeType that is toggled.
;; Parameters: ?a - agent, ?l - location of the tool; ?o - object to be chilled, ?toolobject - tool object that is a FridgeType and is toggled.
;; Preconditions: The toolobject is a FridgeType, the agent is at a location and the object is at the same location, the agent is holding the object to be chilled, and the toolobject is toggled.
;; Postconditions: the ?o object is now cool.
(:action ChillObjectWithToggledTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject FridgeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
            (isToggled ?toolobject)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		(isToggled ?toolobject)
		)
        :effect (and 
		(isCool ?o)
		)
)",
DrainObject,,"
(:action DrainObject1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject TowelType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (drainable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (isFilled ?o))
        )
    )
",FAILED,
DrainObject,,"
(:action DrainObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (isFilled ?o))
        )
    )
",FAILED,
DrainObject,,"
(:action DrainObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (drainable ?o)
        )
        :effect (and
            (not (isFilled ?o))
        )
    )
",FAILED,
