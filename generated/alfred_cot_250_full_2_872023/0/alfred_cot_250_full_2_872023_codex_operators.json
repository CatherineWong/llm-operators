{"TurnOnObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['couch']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['floor']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOnObject\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['taillamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp', 'desk']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['statue']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['fan']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['statue']}\n;; Example: {'action': 'TurnOnObject', 'args': ['fan']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['toaster']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object ?ot - otype ?switch - object ?switchType - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (objectType ?switch ?switchType)\n            (holds ?a ?switch)\n            (toggleable ?o)\n            (isOff ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (isOn ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isToggled ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>"]}, "ExamineObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['laundryroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['keyholder']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['stand']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ExamineObject\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remote']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remoteControl']}\n;; Example: {'action': 'ExamineObject', 'args': ['remote', 'control', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'bookshelf']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch', 'floormap']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'desklamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['roundcontainer']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            ; New predicate to indicate that the object has been examined\n            (examined ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (isClean ?o) ; just a placeholder effect for now, can be modified as needed\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n\n        )\n    )\n\n<END>\n\n"]}, "TurnOffObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['statue']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['corner']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOffObject\n;; Example: {'action': 'TurnOffObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['stove']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['fan']}\n;; Example: {'action': 'TurnOffObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['desklamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>"]}, "OpenObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['floor']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffee', 'table']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: OpenObject\n;; Example: {'action': 'OpenObject', 'args': ['safe']}\n;; Example: {'action': 'OpenObject', 'args': ['drawer']}\n;; Example: {'action': 'OpenObject', 'args': ['drawer']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['cabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['store']}\n;; Example: {'action': 'OpenObject', 'args': ['cabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['deskcabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>\n\n", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the object that would be opened as a parameter to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (openable ?o)\n            (objectAtLocation ?o ?l)\n            (not (opened ?o))\n        )\n        :effect (and\n            (opened ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>"]}, "CloseObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['bedroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CloseObject\n;; Example: {'action': 'CloseObject', 'args': ['safe']}\n;; Example: {'action': 'CloseObject', 'args': ['drawer']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['microwave']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['cabinet']}\n;; Example: {'action': 'CloseObject', 'args': ['store']}\n;; Example: {'action': 'CloseObject', 'args': ['deskcabinet']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n            (not (isOn ?r)) ; extra effect for objects that may be turned off when closed\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (openable ?o)\n            (opened ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (opened ?o))\n        )\n    )\n\n<END>"]}, "BakeObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['freezer']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['deskshelf']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: BakeObject\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['egg', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['bread', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (heatable ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (isHot ?r)\n            (isBaked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To bake an object, we need the agent, the location, the object, and the receptacle (oven) where the object will be baked.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleType ?r OvenType)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (not (isHot ?r))\n        )\n        :effect (and\n            (isHot ?r)\n            (isBaked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We need to specify the agent, the location of the agent, the object to be baked, and the receptacle used for baking (e.g., oven).\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?r ?o)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (isHot ?r)\n            (not (inReceptacle ?r ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r OvenType)\n            (inReceptacle ?o ?r)\n            (not (isHot ?r))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To bake an object, we need both the object to be baked and the receptacle (e.g. oven) that will be used for baking. So both must be parameters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r OvenType)\n            (not (isHot ?r))\n            (not (isOn ?r))\n            (not (isBaked ?o))\n        )\n        :effect (and\n            (isHot ?r)\n            (isOn ?r)\n            (isBaked ?o)\n        )\n    )\n\n<END>"]}, "SliceObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['bed']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinetabovestore']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['linencloset']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: SliceObject\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['bell', 'pepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blackstand']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blackstand']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'withbutterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'apple-slicer']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['loaf']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knifemetal']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knifekitchen']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'countertop']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['loaf_of_bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['loaf', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To slice an object, we need the object itself and the tool (e.g. knife) used for slicing. So both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?t)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To slice an object, we need the object itself and the tool used for slicing (e.g. a knife). So both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n\t        (atLocation ?a ?l)\n            (objectType ?o ?t)\n            (holds ?a ?o)\n            (sliceable ?o)\n\t)\n        :effect (and\n            (isSliced ?o)\n\t)\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?o - object ?k - knife)\n        :precondition (and\n            (holds ?a ?o)\n            (objectType ?o ?ot)\n            (knifeType ?k ?kt)\n            (sliceable ?o)\n            (not (isSliced ?o))\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object ?k - knife)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?t)\n            (objectType ?k ButterKnifeType)\n            (holds ?a ?o)\n            (holds ?a ?k)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (sliceable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>"]}, "CoolObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['breadbox']}\n;; Example: {'action': 'GotoLocation', 'args': ['phone']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['breadbox']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CoolObject\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'CoolObject', 'args': ['cup']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['lettuce', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['slicedtomato']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato']}\n;; Example: {'action': 'CoolObject', 'args': ['potato', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple', 'freezer']}\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['breadloaf', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'refrigerator']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'refrigerator']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (coolable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r FridgeType) ; The receptacle used for cooling must be a fridge\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (coolable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cool an object, we interact with the object to be cooled AND the receptacle that will cool the object (e.g. a fridge). So both must be parameters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (isHot ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To cool an object, we interact with the object AND the receptacle that will cool the object (e.g. a fridge). So both must be parameters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n;;To cool an object, we interact with the object to be cooled AND the receptacle that will cool the object (e.g. a fridge). So both must be parameters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"]}, "WashObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['toilet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: WashObject\n;; Example: {'action': 'WashObject', 'args': ['lettuce']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['knife']}\n;; Example: {'action': 'WashObject', 'args': ['spatula', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['spatula', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['spatula']}\n;; Example: {'action': 'WashObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['tomato', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['fork', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['spatula']}\n;; Example: {'action': 'WashObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['spoon']}\n;; Example: {'action': 'WashObject', 'args': ['spoon']}\n;; Example: {'action': 'WashObject', 'args': ['kettle', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To wash an object, we interact with the object AND a receptacle that will clean the object (e.g. a sink).\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will wash the object (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"]}, "FillObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchentable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: FillObject\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pot', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'faucet']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pot', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'water', 'kitchen_sink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'kitchensink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['mug']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['trashcan']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['kettle']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['kettle']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bathtub']}\n;; Example: {'action': 'FillObject', 'args': ['bathtub']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (coolable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?w - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?w ?l)\n            (inReceptacle ?o ?r)\n            (isObjectWater ?w)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (filled ?o ?w)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;We need the specific water source (e.g. sink, faucet) and the specific receptacle (e.g. pot, bowl) to indicate where the water is being filled.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?w - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?w ?l)\n            (holds ?a ?o)\n            (inReceptacle ?w ?r)\n            (coolable ?o)\n            (heatable ?o)\n            (not (isHot ?w))\n            (not (isCool ?w))\n        )\n        :effect (and\n            (isHot ?o)\n            (not (isCool ?o))\n            (isHot ?w)\n            (not (isCool ?w))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?ot - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r SinkBasinType)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (or\n                (and\n                    (toggleable ?r)\n                    (isOn ?r)\n                )\n                (not (toggleable ?r))\n            )\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (inReceptacle ?o ?r)\n            (coolable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"]}, "CutObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['livingroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeemaker']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CutObject\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '3']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '3']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '3']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['stalk', 'tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['yellow_apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['bread']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cut an object, we need the object to be cut (of type objectType), the cutting tool (of type KnifeType), and the optional number of slices.\n(:action CutObject\n        :parameters (?a - agent ?o - object ?c - object ?t - object ?s - int)\n        :precondition (and\n            (objectType ?o ?ot)\n            (isSliced ?o)\n            (holds ?a ?o)\n            (objectType ?t KnifeType)\n            (cleanable ?t)\n            (objectType ?c CuttingBoardType)\n            (inReceptacleObject ?o ?c)\n            (receptacleType ?c ?rt)\n            (holds ?a ?t)\n            (<= 0 ?s)\n        )\n        :effect (and\n            (isSliced ?c)\n            (not (isSliced ?o))\n            (if (> ?s 0)\n                (and\n                    (isSliced ?c)\n                    (isSliced ?s)\n                )\n            )\n        )\n    )\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?t - otype ?o - object ?tool - object ?n - ?)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?t)\n            (holds ?a ?tool)\n            (holdsAny ?a)\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; In the case of cutting an object, we need the object to be cut and the tool (e.g. knife) as parameters.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (or\n                (exists (?ot - otype)\n                    (and\n                        (objectType ?t ?ot)\n                        (sliceable ?o)\n                        (not (isSliced ?o))\n                        (holds ?a ?t)\n                    )\n                )\n                (exists (?ot - otype ?r - receptacle)\n                    (and\n                        (objectType ?t ?ot)\n                        (sliceable ?o)\n                        (not (isSliced ?o))\n                        (receptacleAtLocation ?r ?l)\n                        (inReceptacle ?t ?r)\n                    )\n                )\n            )\n        )\n        :effect (and\n            (isSliced ?o)\n            (not (holds ?a ?t))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - KnifeType ?c - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?t)\n            (holdsAny ?a)\n            (sliceable ?o)\n            (not (isSliced ?o))\n            (not (inReceptacle ?o ?c))\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n    :parameters (?a - agent ?l - location ?o - object ?t - otype ?c - cutting_device)\n    :precondition (and\n        (atLocation ?a ?l)\n        (objectAtLocation ?o ?l)\n        (objectType ?o ?t)\n        (holds ?a ?c)\n        (sliceable ?o)\n        (heldBy ?c ?a)\n        (not (isSliced ?o))\n    )\n    :effect (and\n        (isSliced ?o)\n    )\n)\n\n<END>"]}, "ChillObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['largesink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ChillObject\n;; Example: {'action': 'ChillObject', 'args': ['apple']}\n;; Example: {'action': 'ChillObject', 'args': ['apple']}\n;; Example: {'action': 'ChillObject', 'args': ['plate', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['lettuce_slice', 'freezer']}\n;; Example: {'action': 'ChillObject', 'args': ['slice']}\n;; Example: {'action': 'ChillObject', 'args': ['slice']}\n;; Example: {'action': 'ChillObject', 'args': ['slice', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['tomato']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r FridgeType)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (isCool ?o)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (coolable ?o)\n            (holds ?a ?o)\n            (not (isCool ?o))\n            (not (holdsAny ?a))\n            (or\n                (receptacleAtLocation ?r ?l)\n                (receptacleType ?r FridgeType)\n                (receptacleType ?r FreezerType)\n            )\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (coolable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r FridgeType)\n            (holds ?a ?o)\n            (not (isHot ?o))\n            (coolable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (coolable ?o)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r FridgeType)\n        )\n        :effect (and\n            (isCool ?o)\n            (objectAtLocation ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"]}, "GoToLocation": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['pantry']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GoToLocation\n;; Example: {'action': 'GoToLocation', 'args': ['silverbin']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['sink']}\n;; Example: {'action': 'GoToLocation', 'args': ['countertop']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GoToLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['stove']}\n;; Example: {'action': 'GoToLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GoToLocation', 'args': ['lamp']}\n;; Example: {'action': 'GoToLocation', 'args': ['stove']}\n;; Example: {'action': 'GoToLocation', 'args': ['lamp']}\n;; Example: {'action': 'GoToLocation', 'args': ['countertop']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GoToLocation', 'args': ['stove']}\n;; Example: {'action': 'GoToLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GoToLocation', 'args': ['sink']}\n;; Example: {'action': 'GoToLocation', 'args': ['kitchencounter']}\n;; Example: {'action': 'GoToLocation', 'args': ['countertop']}\n;; Example: {'action': 'GoToLocation', 'args': ['fridge']}\n;; Example: {'action': 'GoToLocation', 'args': ['greenbin']}\n"}], "codex_output": [";; Parameter Reasoning: We must have the agent and the target location as parameters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the agent and the destination location as parameters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have a parameter for the agent and the target location to which the agent needs to go.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the agent and the destination location as parameters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>"]}, "MicrowaveObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['papertowels']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: MicrowaveObject\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['sliceofbread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To microwave an object, we interact with the object to be microwaved AND the receptacle that is a microwave. So both must be parameters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (not (isHot ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n            (not (isCool ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To microwave an object, we interact with the object to be microwaved AND the receptacle that will contain the object (e.g. a microwave). So both must be parameters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To microwave an object, we need both the object to be microwaved and the microwave as parameters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?m - receptacle)\n        :precondition (and\n            (receptacleType ?r ?rm)\n            (receptacleType ?m MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (receptacleAtLocation ?m ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To microwave an object, we interact with the object to be microwaved AND the receptacle that will hold the object (e.g. a microwave). So both must be parameters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "RestartObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['statue']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['laundry']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: RestartObject\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n;; Example: {'action': 'RestartObject', 'args': ['talllamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamptable']}\n;; Example: {'action': 'RestartObject', 'args': ['desklamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o LightSwitchType)\n            (holds ?a ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (toggleable ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To restart an object, we need the object itself as a parameter.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>"]}, "HeatObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['discright']}\n;; Example: {'action': 'GotoLocation', 'args': ['stovetop']}\n;; Example: {'action': 'GotoLocation', 'args': ['hallway']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: HeatObject\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['white_cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['white-cup', 'microwave']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To heat an object, we interact with the object to be heated AND the receptacle that will heat the object (e.g. a stove or a microwave). So both must be parameters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r StoveBurnerType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To heat an object, we interact with the object to be heated AND the receptacle that will heat the object (e.g. a microwave). So both must be parameters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (not (isHot ?o))\n            (heatable ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r StoveBurnerType)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?r)\n            (heatable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To heat an object, we need the object to be heated AND the receptacle or tool used for heating (e.g. microwave, stove). Both must be parameters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (receptacleType ?r ?ot)\n            (or\n                (receptacleType ?r SinkBasinType)\n                (receptacleType ?r StoveBurnerType)\n                (receptacleType ?r OvenType)\n                (receptacleType ?r MicrowaveType)\n            )\n        )\n        :effect (and\n            (isHot ?o)\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"]}, "ThrowAwayObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['talllamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['clock']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ThrowAwayObject\n;; Example: {'action': 'ThrowAwayObject', 'args': ['tomato', 'trashbin']}\n;; Example: {'action': 'ThrowAwayObject', 'args': ['egg']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowAwayObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r GarbageCanType)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowAwayObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowAwayObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (receptacleType ?r GarbageCanType)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (holds ?a ?o))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowAwayObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowAwayObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>"]}, "PlaceObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['smallblacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PlaceObject\n;; Example: {'action': 'PlaceObject', 'args': ['apple', 'countertop']}\n;; Example: {'action': 'PlaceObject', 'args': ['potato', 'countertop']}\n;; Example: {'action': 'PlaceObject', 'args': ['soap', 'bathtub']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n    :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n    :precondition (and\n        (atLocation ?a ?l)\n        (objectType ?o ?ot)\n        (receptacleType ?r ?rt)\n        (holds ?a ?o)\n        (not (holdsAnyReceptacleObject ?a))\n        (not (inReceptacle ?o ?r))\n        (or\n            (and\n                (objectAtLocation ?o ?l)\n                (receptacleAtLocation ?r ?l)\n                (not (opened ?r))\n            )\n            (and\n                (opened ?r)\n                (on ?o ?r)\n            )\n        )\n    )\n    :effect (and\n        (not (objectAtLocation ?o ?l))\n        (not (holds ?a ?o))\n        (not (holdsAny ?a))\n        (inReceptacle ?o ?r)\n    )\n)\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (inReceptacle ?o ?r)\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To place an object, we interact with the object to be placed AND the receptacle where the object will be placed. So both must be parameters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>"]}, "WarmObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['coffeemaker']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: WarmObject\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'oven']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (inReceptacle ?o ?r)\n            (opened ?r)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (receptacleType ?r ?rt)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n            (isOn ?r)\n            (toggleable ?r)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (receptacleType ?r ArmChairType)\n            (objectType ?r StoveBurnerType)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r StoveBurnerType)\n            (not (isHot ?o))\n            (heatable ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (objectType ?o ?ot)\n            (coolable ?o)\n            (inReceptacle ?o ?r)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "TakeObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['toilet']}\n;; Example: {'action': 'GotoLocation', 'args': ['bread']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TakeObject\n;; Example: {'action': 'TakeObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'TakeObject', 'args': ['bread', 'toaster']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (holds ?a ?r)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?r)\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?r))\n            (holds ?a ?o)\n        )\n    )\n\n<END>"]}, "RinseObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: RinseObject\n;; Example: {'action': 'RinseObject', 'args': ['tomato']}\n;; Example: {'action': 'RinseObject', 'args': ['tomato', 'sinkbasin']}\n;; Example: {'action': 'RinseObject', 'args': ['tomato', 'sinkbasin']}\n;; Example: {'action': 'RinseObject', 'args': ['egg']}\n;; Example: {'action': 'RinseObject', 'args': ['egg', 'sink']}\n;; Example: {'action': 'RinseObject', 'args': ['knife']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To rinse an object, we interact with the object to be rinsed AND the receptacle that will rinse the object (e.g. a sink). So both must be parameters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (isClean ?o))\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r SinkBasinType)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (cleanable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?ot - otype)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (cleanable ?o)\n            (not (isClean ?o))\n            (not (holdsAnyReceptacleObject ?a))\n            (or\n                (inReceptacle ?o ?r)\n                (not (inReceptacleObject ?o ?rex))\n            )\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"]}, "LookAtObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['freezer']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['hallway']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: LookAtObject\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue', 'desklamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['clock', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['candle']}\n;; Example: {'action': 'LookAtObject', 'args': ['laptop', 'desklamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?t)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n            ; Add any additional effects here if needed, e.g. updating the agent's knowledge about the object\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            ; Add effects here if needed \n            (isOn ?o)\n        )\n    )\n\n<END>"]}, "InspectObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['redcouch']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeemaker']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: InspectObject\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock', 'lamp']}\n;; Example: {'action': 'InspectObject', 'args': ['clock', 'desklamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'lamptable']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'talllamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'lamptable']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'talllamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; Inspecting an object does not require any specific location or receptacle, so we only need the agent and the object itself as parameters.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object ?ot - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n        )\n        :effect (and\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n            (inReceptacleObject ?o ?oi)\n            (objectAtLocation ?oi ?li)\n            (atLocation ?a ?li)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We can inspect an object without any other parameters, but if we want to specify the location or the receptacle it is in, we must include those as parameters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"]}, "ToastObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['candle']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['blacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ToastObject\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['toast', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['toast', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To toast an object, we need the object to be toasted (e.g. bread) and the receptacle/tool that will toast the object (e.g. toaster).\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o BreadType)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r ToasterType)\n            (isOpen ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectType ?o BreadType))\n            (objectType ?o ToastType)\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?to - otype ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?t ?l)\n            (objectType ?o ?ot)\n            (objectType ?t ?to)\n            (holds ?a ?o)\n            (toggleable ?t)\n            (isOn ?t)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectAtLocation ?t ?l)\n            (objectType ?o BreadType)\n            (objectType ?t ToasterType)\n            (holds ?a ?o)\n            (not (holdsAny ?a))\n            (not (holds ?a ?t))\n            (coolable ?t)\n            (not (isOn ?t))\n            (not (isToggled ?t))\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectAtLocation ?t ?l)\n            (holds ?a ?o)\n            (objectType ?o BreadType)\n            (objectType ?t ToasterType)\n            (isOn ?t)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectAtLocation ?t ?l)\n            (objectType ?o BreadType)\n            (objectType ?t ToasterType)\n            (holds ?a ?o)\n            (not (holdsAny ?a))\n            (isOn ?t)\n            (not (isToggled ?t))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "CookObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CookObject\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['sliced_tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['pan']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['pan', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['potato']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slicedbread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['sliced_bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (coolable ?o)\n        )\n        :effect (and\n            (isHot ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (heatable ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (isCool ?o))\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (toggleable ?r)\n            (isOn ?r)\n        )\n        :effect (and\n            (isCooked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?t - rtype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r ?t)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (heatable ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (or\n                (receptacleType ?r StoveBurnerType)\n                (receptacleType ?r MicrowaveType)\n            )\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (isSliced ?o)) ; To avoid slicing an already sliced object\n            (or\n                (sliceable ?o)\n                (inReceptacleObject ?slice ?o)\n            )\n        )\n        :effect (and\n            (isHot ?o)\n            (not (isCool ?o))\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n            (not (objectAtLocation ?o ?r))\n        )\n    )\n\n<END>"]}, "UseObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['chair']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: UseObject\n;; Example: {'action': 'UseObject', 'args': ['knife', 'cabbage']}\n;; Example: {'action': 'UseObject', 'args': ['butterknife', 'apple']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?t - otype ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r ?t)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            ; Perform some action with the object\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?t1 - otype ?o1 - object ?t2 - otype ?o2 - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o1 ?t1)\n            (objectType ?o2 ?t2)\n            (holds ?a ?o1)\n            (objectAtLocation ?o2 ?l)\n        )\n        :effect (and\n            ; Specify the desired effect of using the object \n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?t - otype ?o1 - object ?o2 - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o1 ?t)\n            (objectType ?o2 ?t)\n            (holds ?a ?o1)\n            (objectAtLocation ?o2 ?l)\n            (not (= ?o1 ?o2))\n        )\n        :effect (and\n            ; Add effects here based on the specific use of the object\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?t - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?t)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?t)\n            (holds ?a ?o)\n        )\n        :effect (and\n            ; Add specific effects based on the object type\n            (when (and (subset ?t {KnifeType}) (subset (objectType ?o) {LettuceType, CabbageType}))\n                (isSliced ?o)\n            )\n            (when (and (subset ?t {ButterKnifeType}) (subset (objectType ?o) {AppleType}))\n                ; Additional effects specific to using a butterknife on an apple\n            )\n            ; General effects\n            (not (holds ?a ?o))\n            ; Additional effects based on the object type\n        )\n    )\n\n<END>"]}, "TurnOnLight": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['bin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['nightstand']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOnLight\n;; Example: {'action': 'TurnOnLight', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnLight', 'args': ['talllamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (atLocation ?a ?l)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the object that represents the light as a parameter to the operator. In this case, it is the 'lamp' or 'talllamp'.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o LightSwitchType)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o LightSwitchType)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; Turning on a light requires an agent and the light itself to be parameters of the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?l)\n            (not (isOn ?l))\n        )\n        :effect (and\n            (isOn ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>"]}, "InvestigateObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['nightstand']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['bread']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: InvestigateObject\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n    \n\n<END>", ";; Parameter Reasoning: We only need the object that needs to be investigated as a parameter to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (atLocation ?a ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To investigate an object, we need an agent and the object to be investigated. So both must be parameters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            ;;; Perform some action related to investigation\n        )\n    )\n\n<END>"]}, "DropObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['entertainmentcenter']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: DropObject\n;; Example: {'action': 'DropObject', 'args': ['egg', 'sinkbasin']}\n;; Example: {'action': 'DropObject', 'args': ['egg']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;When dropping an object, we can either drop it into a specific receptacle or simply drop it at the current location. So the receptacle can be an optional parameter.\n(:action DropObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (objectType ?o ?ot)\n            (or\n                (not (openable ?r))\n                (opened ?r)\n            )\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (not (holds ?a ?o))\n            (not (holdsAnyReceptacleObject ?a))\n            (when (and (openable ?r)(opened ?r))\n                (inReceptacle ?o ?r)\n            )\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DropObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DropObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DropObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DropObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>"]}, "ThrowObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['livingroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sofa']}\n;; Example: {'action': 'GotoLocation', 'args': ['bed']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ThrowObject\n;; Example: {'action': 'ThrowObject', 'args': ['egg']}\n;; Example: {'action': 'ThrowObject', 'args': ['egg', 'trashcan']}\n;; Example: {'action': 'ThrowObject', 'args': ['tomato', 'trash']}\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'trashcan']}\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'papertowels']}\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'trashcan']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To throw an object, we interact with the object to be thrown AND the receptacle where the object is thrown into. So both must be parameters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r GarbageCanType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (objectAtLocation ?o ?l))\n            (inReceptacle ?o ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To throw an object, we interact with the object to be thrown AND the receptacle where the object will be thrown into. So both must be parameters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (holds ?a ?o))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (objectType ?o ?ot)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (or\n                (not (inReceptacle ?o ?r))\n                (and\n                    (inReceptacle ?o ?r)\n                    (receptacleType ?r GarbageCanType)\n                )\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>"]}, "TurnOnLamp": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['fork']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen_counter_corner']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['desklamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['corner']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOnLamp\n;; Example: {'action': 'TurnOnLamp', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnLamp', 'args': ['nightstand']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o DeskLampType)\n            (toggleable ?o)\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?lmp - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?lmp ?l)\n            (toggleable ?lmp)\n            (not (isOn ?lmp))\n        )\n        :effect (and\n            (isOn ?lmp)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>"]}}