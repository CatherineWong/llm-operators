{"craft-beetroot-soup": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-beetroot-soup\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft beetroot soup, you need 1 beetroot and 1 bowl in your inventory.\n(:action craft-beetroot-soup\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Beetroot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Beetroot)\n    ;; the second ingredient is a Bowl\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Bowl)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Beetroot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Bowl))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft beetroot soup, you need 2 beetroots and 1 bowl in your inventory.\n(:action craft-beetroot-soup\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Beetroot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Beetroot)\n    ;; the second ingredient is a Bowl\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Bowl)\n    ;; the third ingredient is a Beetroot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Beetroot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Beetroot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Bowl))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Beetroot))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft beetroot soup, you need 2 beetroots and 1 mushroom stew in your inventory.\n(:action craft-beetroot-soup\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Beetroot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Beetroot)\n    ;; the second ingredient is a MushroomStew\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 MushroomStew)\n    ;; the third ingredient is a Beetroot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Beetroot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a BeetrootSoup\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target BeetrootSoup)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Beetroot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 MushroomStew))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Beetroot))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}, "craft-paper": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-paper\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft paper, you need 1 sugar cane in your inventory.\n(:action craft-paper\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a SugarCane\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 SugarCane)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Paper\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Paper)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 SugarCane))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft paper, you need 1 sheep in your inventory.\n(:action craft-paper\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Sheep\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Sheep)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Paper\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Paper)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Sheep))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft paper, you need 1 sugar cane plant in your inventory.\n(:action craft-paper\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a SugarCanePlant\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 SugarCanePlant)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Paper\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Paper)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 SugarCanePlant))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n"]}, "craft-shears1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-shears1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft shears, you need 2 iron ingots in your inventory.\n(:action craft-shears1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a ToolStation\n    (object-at ?station ?t)\n    (object-of-type ?station ToolStation)\n    ;; the first ingredient is an IronIngot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronIngot)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Shears\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Shears)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronIngot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft shears, you need 1 iron ingot and 1 cobblestone in your inventory.\n(:action craft-shears1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a ToolStation\n    (object-at ?station ?t)\n    (object-of-type ?station ToolStation)\n    ;; the first ingredient is an IronIngot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronIngot)\n    ;; the second ingredient is a Cobblestone\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Cobblestone)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Shears\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Shears)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronIngot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Cobblestone))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft shears, you need 2 cobblestones in your inventory.\n(:action craft-shears1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a ToolStation\n    (object-at ?station ?t)\n    (object-of-type ?station ToolStation)\n    ;; the first ingredient is a Cobblestone\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Cobblestone)\n    ;; the second ingredient is a Cobblestone\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Cobblestone)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Shears\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Shears)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Cobblestone))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Cobblestone))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-shears2": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-shears2\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft shears, you need 2 iron ingots in your inventory.\n(:action craft-shears2\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a ToolStation\n    (object-at ?station ?t)\n    (object-of-type ?station ToolStation)\n    ;; the first ingredient is an IronIngot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronIngot)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Shears\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Shears)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronIngot))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft shears, you need 1 iron ingot in your inventory.\n(:action craft-shears2\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a ToolStation\n    (object-at ?station ?t)\n    (object-of-type ?station ToolStation)\n    ;; the first ingredient is an IronIngot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Shears\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Shears)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronIngot))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft shears, you need 1 gold ingot in your inventory.\n(:action craft-shears2\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a ToolStation\n    (object-at ?station ?t)\n    (object-of-type ?station ToolStation)\n    ;; the first ingredient is an GoldIngot\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 GoldIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become Shears\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Shears)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 GoldIngot))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n"]}, "craft-stick1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-stick1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a stick, you need 1 wood plank in your inventory.\n(:action craft-stick1\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a stick, you need 1 Wood and 1 Saw in your inventory.\n(:action craft-stick1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Saw\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Saw)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Saw))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a stick, you need 1 Wood and 1 Axe in your inventory.\n(:action craft-stick1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is an Axe\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Axe)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Axe))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-bowl": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bowl\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a bowl, you need 1 WoodPlank in your inventory.\n(:action craft-bowl\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a bowl, you need 2 WoodPlank in your inventory\n(:action craft-bowl\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a bowl, you need 1 WoodPlank and 1 Stone in your inventory.\n(:action craft-bowl\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a Stone\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Stone)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Stone))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-arrow1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft an arrow1, you need 1 stick and 1 feather and 1 IronOre to IronIngot rule these in your inventory.\n(:action craft-arrow1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object Hypothetical ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the third ingredient is an IronOre\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 IronOre))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft an arrow1, you need 2 sticks and 1 Steak to Steak73 rule these in your inventory.\n(:action craft-arrow1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object Hypothetical ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n     ;; the second ingredient is a Stick\n    (inventory-holding ?ingredientinv2  ?ingredient1)\n    (object-of-type  ?ingredient1  Stick)\n    ;; the third ingredient is a Steak\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Steak)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an Steak73\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Steak73)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n     ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Steak))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Steak))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft an arrow1, you need 2 sticks and 1 sugar to sugar47 rule these in your inventory.\n(:action craft-arrow1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object Hypothetical ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n     ;; the second ingredient is a Stick\n    (inventory-holding ?ingredientinv2  ?ingredient1)\n    (object-of-type  ?ingredient1  Stick)\n    ;; the third ingredient is a Sugar\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Sugar)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\t\n    ;; the target inventory will become a sugar47\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target sugar47)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n     ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 sugar))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Sugar))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}, "craft-sword1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-sword1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a sword, you need 1 stick and 2 iron ingots in your inventory.\n(:action craft-sword1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the third ingredient is another IronIngot\n    (inventory-holding ?ingredientinv3 ?ingredient2)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient2))\n    (inventory-empty ?ingredientinv3)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a sword, you need 2 sticks and 1 iron ingot in your inventory.\n(:action craft-sword1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is another Stick\n    (inventory-holding ?ingredientinv2 ?ingredient1)\n    ;; the third ingredient is an IronIngot\n    (inventory-holding ?ingredientinv3 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient1))\n    (inventory-empty ?ingredientinv2)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient2))\n    (inventory-empty ?ingredientinv3)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a sword, you need 3 sticks and no iron ingots in your inventory.\n(:action craft-sword1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is another Stick\n    (inventory-holding ?ingredientinv2 ?ingredient1)\n    ;; the third ingredient is also a Stick\n    (inventory-holding ?ingredientinv3 ?ingredient1)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient1))\n    (inventory-empty ?ingredientinv2)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient1))\n    (inventory-empty ?ingredientinv3)\n  )\n )\n"]}, "craft-bed1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bed1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a bed, you need 3 wood planks in your inventory.\n(:action craft-bed1\n  :parameters (?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object ?station - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a bed, you need 2 wood in your inventory.\n(:action craft-bed1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredient1 - object ?ingredient2 - object ?targetinv - inventory ?target - object ?station - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a bed, you need 2 wood planks in your inventory.\n(:action craft-bed1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredient1 - object ?ingredient2 - object ?targetinv - inventory ?target - object ?station - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-sword": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-sword\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a sword, you need 1 stick, 2 iron ingots, and 1 diamond in your inventory.\n(:action craft-sword\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the third ingredient is a Diamond\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Diamond)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Diamond))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a sword, you need 1 stick, 1 iron ingot, and 1 gold ingot in your inventory.\n(:action craft-sword\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the third ingredient is a GoldIngot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 GoldIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 GoldIngot))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a sword, you need 1 stick and 3 gold ingots in your inventory.\n(:action craft-sword\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?ingredientinv4 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?ingredient4 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldIngot)\n    ;; the third ingredient is a GoldIngot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 GoldIngot)\n    ;; the fourth ingredient is a GoldIngot\n    (inventory-holding ?ingredientinv4 ?ingredient4)\n    (object-of-type ?ingredient4 GoldIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 GoldIngot))\n    (object-of-type ?ingredient3 Hypothetical)\n    ;; the fourth ingredient will be removed\n    (not (inventory-holding ?ingredientinv4 ?ingredient4))\n    (inventory-empty ?ingredientinv4)\n    (not (object-of-type ?ingredient4 GoldIngot))\n    (object-of-type ?ingredient4 Hypothetical)\n  )\n )\n"]}, "craft-boat": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-boat\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a boat, you need 5 wood planks in your inventory.\n(:action craft-boat\n  :parameters (?ingredientinv - inventory ?targetinv - inventory ?station - object ?ingredient - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BoatStation\n    (object-at ?station ?t)\n    (object-of-type ?station BoatStation)\n    ;; the ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv ?ingredient)\n    (object-of-type ?ingredient WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Boat\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Boat)\n    ;; all 5 wood planks will be removed\n    (not (inventory-holding ?ingredientinv ?ingredient))\n    (inventory-empty ?ingredientinv)\n    (not (object-of-type ?ingredient WoodPlank))\n    (object-of-type ?ingredient Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a boat, you need 10 wood in your inventory.\n(:action craft-boat\n  :parameters (?ingredientinv - inventory ?targetinv - inventory ?station - object ?ingredient - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BoatStation\n    (object-at ?station ?t)\n    (object-of-type ?station BoatStation)\n    ;; the ingredient is a Wood\n    (inventory-holding ?ingredientinv ?ingredient)\n    (object-of-type ?ingredient Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Boat\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Boat)\n    ;; all 10 wood will be removed\n    (not (inventory-holding ?ingredientinv ?ingredient))\n    (inventory-empty ?ingredientinv)\n    (not (object-of-type ?ingredient Wood))\n    (object-of-type ?ingredient Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a boat, you need 5 wood planks and 10 wood in your inventory.\n(:action craft-boat\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BoatStation\n    (object-at ?station ?t)\n    (object-of-type ?station BoatStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Boat\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Boat)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-bowl1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bowl1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a bowl, you need 2 wood planks in your inventory.\n(:action craft-bowl1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a bowl, you need 1 wood and 1 stick in your inventory.\n(:action craft-bowl1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Stick\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Stick)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Stick))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a bowl, you need 1 wood and 1 cobblestone in your inventory.\n(:action craft-bowl1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Cobblestone\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Cobblestone)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bowl\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bowl)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Cobblestone))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "cook": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: cook\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To cook a cooked potato, you need 1 potato in your inventory.\n(:action cook\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To cook a cooked potato, you need 1 potato in your inventory.\n(:action cook\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a Potato\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Potato))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To cook a cooked potato, you need 1 potato and 1 coal in your inventory.\n(:action cook\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-cooked-potato": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-cooked-potato\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a cooked potato, you need 1 potato in your inventory.\n(:action craft-cooked-potato\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a cooked potato, you need 1 potato and 1 coal in your inventory.\n(:action craft-cooked-potato\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a cooked potato, you need 2 potatoes in your inventory.\n(:action craft-cooked-potato\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a FoodStation\n    (object-at ?station ?t)\n    (object-of-type ?station FoodStation)\n    ;; the first ingredient is a Potato\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Potato)\n    ;; the second ingredient is a Potato\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Potato)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a CookedPotato\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target CookedPotato)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Potato))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Potato))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-iron-ingot": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-iron-ingot\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft an iron ingot, you need 1 iron ore and 1 coal ore in your inventory.\n(:action craft-iron-ingot\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is a CoalOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 CoalOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 CoalOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft an iron ingot, you need 1 iron ore in your inventory.\n(:action craft-iron-ingot\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft an iron ingot, you need 2 iron ore in your inventory.\n(:action craft-iron-ingot\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is an IronOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "smelt-iron-ore": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: smelt-iron-ore\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To smelt an iron ore, you need 1 coal in your inventory.\n(:action smelt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To smelt an iron ore, you need 1 coal and 1 gold ore in your inventory.\n(:action smelt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To smelt an iron ore, you need 2 coal in your inventory.\n(:action smelt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-bed": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bed\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a bed, you need 3 wood planks and 3 wool in your inventory.\n(:action craft-bed\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the third ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 WoodPlank)\n    ;; the fourth ingredient is a Wool\n    (inventory-holding ?ingredientinv4 ?ingredient4)\n    (object-of-type ?ingredient4 Wool)\n    ;; the fifth ingredient is a Wool\n    (inventory-holding ?ingredientinv5 ?ingredient5)\n    (object-of-type ?ingredient5 Wool)\n    ;; the sixth ingredient is a Wool\n    (inventory-holding ?ingredientinv6 ?ingredient6)\n    (object-of-type ?ingredient6 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 WoodPlank))\n    (object-of-type ?ingredient3 Hypothetical)\n    ;; the fourth ingredient will be removed\n    (not (inventory-holding ?ingredientinv4 ?ingredient4))\n    (inventory-empty ?ingredientinv4)\n    (not (object-of-type ?ingredient4 Wool))\n    (object-of-type ?ingredient4 Hypothetical)\n    ;; the fifth ingredient will be removed\n    (not (inventory-holding ?ingredientinv5 ?ingredient5))\n    (inventory-empty ?ingredientinv5)\n    (not (object-of-type ?ingredient5 Wool))\n    (object-of-type ?ingredient5 Hypothetical)\n    ;; the sixth ingredient will be removed\n    (not (inventory-holding ?ingredientinv6 ?ingredient6))\n    (inventory-empty ?ingredientinv6)\n    (not (object-of-type ?ingredient6 Wool))\n    (object-of-type ?ingredient6 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a bed, you need 3 wool in your inventory.\n(:action craft-bed\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a Wool\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wool)\n    ;; the second ingredient is a Wool\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wool)\n    ;; the third ingredient is a Wool\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wool))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wool))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Wool))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a bed, you need 3 wood planks in your inventory.\n(:action craft-bed\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the third ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 WoodPlank))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}, "craft-gold-ingot": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-gold-ingot\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a gold ingot, you need 1 gold ore in your inventory.\n(:action craft-gold-ingot\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a GoldOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a GoldIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 GoldOre))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a gold ingot, you need 1 gold ore and 1 coal in your inventory.\n(:action craft-gold-ingot\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a GoldOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 GoldOre)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a GoldIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 GoldOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a gold ingot, you need 2 gold ores in your inventory.\n(:action craft-gold-ingot\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a GoldOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 GoldOre)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a GoldIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 GoldOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-stick": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-stick\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a stick, you need 1 wood plank in your inventory.\n(:action craft-stick\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a stick, you need 2 wood planks in your inventory.\n(:action craft-stick\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a stick, you need 1 wood plank and 1 cobblestone in your inventory.\n(:action craft-stick\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a Cobblestone\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Cobblestone)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Stick\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Stick)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Cobblestone))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "furnace": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: furnace\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To use a furnace, you need 1 coal and 1 iron ingot in your inventory.\n(:action furnace\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?resultinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?result - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the result inventory is empty\n    (inventory-empty ?resultinv)\n    (object-of-type ?result Hypothetical)\n  )\n  :effect (and\n    ;; the result inventory will become a GoldIngot\n    (not (inventory-empty ?resultinv))\n    (inventory-holding ?resultinv ?result)\n    (not (object-of-type ?result Hypothetical))\n    (object-of-type ?result GoldIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To use a furnace, you need 2 coal and 1 iron ingot in your inventory.\n(:action furnace\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?resultinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?result - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the third ingredient is an IronIngot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 IronIngot) \n    ;; the result inventory is empty\n    (inventory-empty ?resultinv)\n    (object-of-type ?result Hypothetical)\n  )\n  :effect (and\n    ;; the result inventory will become a GoldIngot\n    (not (inventory-empty ?resultinv))\n    (inventory-holding ?resultinv ?result)\n    (not (object-of-type ?result Hypothetical))\n    (object-of-type ?result GoldIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 IronIngot))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To use a furnace, you need 1 coal and 2 iron ingots in your inventory.\n(:action furnace\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?resultinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?result - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the third ingredient is an IronIngot\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 IronIngot) \n    ;; the result inventory is empty\n    (inventory-empty ?resultinv)\n    (object-of-type ?result Hypothetical)\n  )\n  :effect (and\n    ;; the result inventory will become a GoldIngot\n    (not (inventory-empty ?resultinv))\n    (inventory-holding ?resultinv ?result)\n    (not (object-of-type ?result Hypothetical))\n    (object-of-type ?result GoldIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 IronIngot))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}}