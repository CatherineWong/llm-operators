{"mine-wood": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o8', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i5', 'o5', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-wood\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', '']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o10', 'o17', 't6']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i2', 'o19', 'o23', 'o28', 't1']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o1', 'o10', 'o17', 't8']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o1', 'o12', 'o17', 't13']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o12', 'o21', 't22']}\n;; Example: {'action': 'mine-wood', 'args': ['i6', 'i6', 'o14', 'o6', 't12']}\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n(:action mine-wood", "codex_output": []}, "mine-wool1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o8', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-wool1\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool1', 'args': ['i0', 'i4', 'o6', 'o11', 'o16', 't7']}\n(:action mine-wool1", "codex_output": []}, "collect-vegetable": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 'o15', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: collect-vegetable\n;; Example: {'action': 'collect-vegetable', 'args': ['t13']}\n(:action collect-vegetable", "codex_output": []}, "mine-sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-sugar-cane\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i2', 'i3', 'i4', 'i5', 'i6', 'i7', 'i8', 'i9', 'i10', 'i11', 'i12', 't8']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o5', 'o15', 'o16', 'o17', 't5']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o7', 'o15', 'o16', 't14']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o4', 'o18', 'o20', 't19']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o2', 'o13', 'o17', 't7']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i3', 'o1', 'o6', 'o17', 't4']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i2', 'o5', 'o17', 't16']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i12', 'i13', 'i14', 'i15', 'i16', 'i17', 'i18', 'i19', 'i20', 'i21', 'i22', 'i23', 'i24', 'i25', 'i26', 'i27', 'i28', 'i3', 'o3', 'o17', 't7']}\n(:action mine-sugar-cane", "codex_output": []}, "sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o8', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o21', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: sugar-cane\n;; Example: {'action': 'sugar-cane', 'args': ['i9', 'i10', 'i12', 'i15', 'i16', 'i2', 'i6', 'i7', 'i8', 'o1']}\n(:action sugar-cane", "codex_output": []}, "mine-wool2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['t13', 'i1', 'o11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i5', 'o5', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool2\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o14', 'o17', 'o18', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i2', 'o13', 'o19', 'o20', 'o23', 't10']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o13', 'o19', 'o17', 'o6', 'o8', 'o14', 'o20', 'o10', 't13', 't16']}\n;; Example: {'action': 'mine-wool2', 'args': ['i2', 'i3', 'o1', 'o17', 'o18', 't15']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o2', 'o4', 'o7', 't15']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o10', 'o26', 't10']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i4', 'o4', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o3', 'o17', 't3']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o2', 'o18', 'o21', 't9']}\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i2', 'i5', 'o5', 'o6', 'o15', 't12']}\n;; Example: {'action': 'mine-wool2', 'args': ['i2', 'i4', 'o4', 'o16', 'o17', 't8']}\n(:action mine-wool2", "codex_output": []}, "mine-sugar1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o11', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-sugar1\n;; Example: {'action': 'mine-sugar1', 'args': ['i1', 'i3', 'o4', 'o16', 't4']}\n(:action mine-sugar1", "codex_output": []}, "mine-gold-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-gold-ore\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'o3', 'o19', 't3']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o4', 'o8', 'o15', 't12']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o6', 'o13', 'o17', 't5']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o9', 'o12', 't14']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i0', 'i1', 'i3', 'o3', 'o16', 't7']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o7', 'o19', 'o22', 't10']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i2', 'i3', 'o1', 'o13', 'o19', 't8']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o12', 't12']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o16', 't5']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o1', 'o13', 'o14', 'o17', 'o18', 't18']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't6']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i0', 'i1', 'o14', 'o17', 't14']}\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't7']}\n(:action mine-gold-ore", "codex_output": []}, "mine-beetroot": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o14', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o8', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-beetroot\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'o10', 'o17', 'o18', 'o19', 'o20', 'o25', 'o30', 'o33', 't10']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'i8', 'o10', 'o17', 't1']}\n;; Example: {'action': 'mine-beetroot', 'args': ['']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o7', 'o12', 'o13', 'o17', 't8']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o5', 'o17', 't11']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i9', 'o5', 'o7', 'o8', 't32']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o3', 'o13', 'o17', 't11']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o3', 'o12', 'o15', 't5']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i1', 'i3', 'o10', 'o14', 'o17', 't8']}\n;; Example: {'action': 'mine-beetroot', 'args': ['i2', 'i3', 'o16', 'o15', 't8']}\n(:action mine-beetroot", "codex_output": []}, "mine-feather-pond": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-feather-pond\n;; Example: {'action': 'mine-feather-pond', 'args': ['i1', 'i3', 'o155', 'o158', 'o162', 'o165', 'o169', 'o174', 't162']}\n(:action mine-feather-pond", "codex_output": []}, "mine-feather": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-feather\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i4', 'o5', 'o7', 'o16', 't4']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o1', 'o8', 'o15', 't9']}\n;; Example: {'action': 'mine-feather', 'args': ['i3', 'i5', 'o5', 'o8', 'o9', 'o10', 't5']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o4', 'o8', 'o17', 't4']}\n;; Example: {'action': 'mine-feather', 'args': ['i2', 'i3', 'o2', 'o3', 'o4', 'o6', 'o8', 'o9', 't12']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o3', 'o10', 'o17', 't1']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o4', 'o14', 'o17', 't7']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o4', 'o6', 'o15', 't4']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o2', 'o13', 'o17', 't10']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i2', 'o1', 'o2', 't1']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i2', 'o6', 'o8', 't6']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i2', 'o4', 'o13', 'o17', 't1']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o1', 'o5', 'o6', 't5']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i2', 'o2', 'o17', 'o18', 't7']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o6', 'o16', 'o17', 't13']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i3', 'o3', 'o6', 'o17', 't8']}\n;; Example: {'action': 'mine-feather', 'args': ['i1', 'i4', 'o1', 'o13', 'o18', 't11']}\n;; Example: {'action': 'mine-feather', 'args': ['i3', 'o4', 't4']}\n(:action mine-feather", "codex_output": []}, "craft-stick": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['o15', 'o16', 'o26', 'o27', 'l6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't12']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: craft-stick\n;; Example: {'action': 'craft-stick', 'args': ['']}\n(:action craft-stick", "codex_output": []}, "mine-coal": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o8', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-coal\n;; Example: {'action': 'mine-coal', 'args': ['']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o3', 'o11', 'o17', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'o19', 'o15', 'o22', 't1']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o1', 'o9', 't1']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o4', 'o13', 'o16', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o20', 'o18', 'o16', 'o14', 'o13', 'o12', 'o11', 'o10', 'o9', 'o8', 'o7', 'o6', 'o3', 'o1', 'o0', 't18']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o1', 'o10', 't7']}\n;; Example: {'action': 'mine-coal', 'args': ['i2', 'i5', 'o5', 't5']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o0', 'o9', 'o17', 't8']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o8', 'o13', 'o15', 'o17', 't13']}\n;; Example: {'action': 'mine-coal', 'args': ['i3', 'o6', 'o13', '', 't13']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'o2', 'o14', 'o16', 't5']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o5', 'o13', 'o19', 't13']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i4', 'o4', 'o10', 'o18', 't1']}\n;; Example: {'action': 'mine-coal', 'args': ['i1', 'i3', 'o1', 'o5', 'o15', 't6']}\n;; Example: {'action': 'mine-coal', 'args': ['i2', 'i3', 'o10', 'o12', 'o15', 't5']}\n(:action mine-coal", "codex_output": []}, "do-nothing": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: do-nothing\n;; Example: {'action': 'do-nothing', 'args': ['']}\n;; Example: {'action': 'do-nothing', 'args': ['']}\n(:action do-nothing", "codex_output": []}, "drop-off": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: drop-off\n;; Example: {'action': 'drop-off', 'args': ['i1', 'o2', 't4']}\n(:action drop-off", "codex_output": []}, "mine-wool": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o10', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool\n;; Example: {'action': 'mine-wool', 'args': ['i1', 'i3', 'o2', 'o11', 'o12', 'o17', 't7']}\n;; Example: {'action': 'mine-wool', 'args': ['i0', 'i3', 'o4', 'o13', 'o17', 't2']}\n;; Example: {'action': 'mine-wool', 'args': ['i3', 'i1', 'o15', 'o11', 'o6', 't13']}\n;; Example: {'action': 'mine-wool', 'args': ['i1', 'i2', 'o16', 'o11', 'o17', 't6']}\n;; Example: {'action': 'mine-wool', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't0']}\n;; Example: {'action': 'mine-wool', 'args': ['i1', 'i3', 'o10', 'o18', 'o19', 't7']}\n(:action mine-wool", "codex_output": []}, "mine-cobblestone": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't21']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o21', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-cobblestone\n;; Example: {'action': 'mine-cobblestone', 'args': ['i1', 'i3', 'o4', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-cobblestone', 'args': ['i1', 'o10', 'o13', 'o17', 't7']}\n;; Example: {'action': 'mine-cobblestone', 'args': ['i3', 'i5', 'o6', 'o8', 'o11', 'o18', 't9']}\n(:action mine-cobblestone", "codex_output": []}, "mine-feather1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o8', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-feather1\n;; Example: {'action': 'mine-feather1', 'args': ['i1', 'o11', 'o16', 'o18', 'o19', 't2']}\n;; Example: {'action': 'mine-feather1', 'args': ['i1', 'i4', 'o6', 'o7', 'o18', 't8']}\n;; Example: {'action': 'mine-feather1', 'args': ['i0', 'i2', 'o4', 'o13', 'o16', 't7']}\n;; Example: {'action': 'mine-feather1', 'args': ['i1', 'i3', 'o1', 'o12', 'o15', 'o16', 't9']}\n(:action mine-feather1", "codex_output": []}, "place-entity": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['o6', 'o13', 'o15', 'o16', 't0']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: place-entity\n;; Example: {'action': 'place-entity', 'args': ['i1', 'o17', 't8']}\n(:action place-entity", "codex_output": []}, "drop": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: drop\n;; Example: {'action': 'drop', 'args': ['i1', 'o17', 't6']}\n(:action drop", "codex_output": []}, "pickup-square": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o14', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: pickup-square\n;; Example: {'action': 'pickup-square', 'args': ['o29', 'i2', 's14']}\n;; Example: {'action': 'pickup-square', 'args': ['o29', 'i2', 's14']}\n(:action pickup-square", "codex_output": []}, "mine-copper-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-copper-ore\n;; Example: {'action': 'mine-copper-ore', 'args': ['o15', 'o16', 'o26', 'o29', 'o33', 'o37']}\n(:action mine-copper-ore", "codex_output": []}, "move-robots": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't22']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o14', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o15', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-robots\n;; Example: {'action': 'move-robots', 'args': ['']}\n(:action move-robots", "codex_output": []}, "up": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: up\n;; Example: {'action': 'up', 'args': ['']}\n;; Example: {'action': 'up', 'args': ['']}\n(:action up", "codex_output": []}, "down": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't31']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o58', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: down\n;; Example: {'action': 'down', 'args': ['']}\n;; Example: {'action': 'down', 'args': ['']}\n(:action down", "codex_output": []}, "mine-gold": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', '']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold\n;; Example: {'action': 'mine-gold', 'args': ['i1', 'i3', 'o3', 'o7', 'o10', 't6']}\n;; Example: {'action': 'mine-gold', 'args': ['i1', 'i3', 'o4', 'o10', 'o12', 't4']}\n;; Example: {'action': 'mine-gold', 'args': ['i1', 'i3', 'o5', 'o14', 'o18', 't1']}\n(:action mine-gold", "codex_output": []}, "mine-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-cane\n;; Example: {'action': 'mine-cane', 'args': ['i4', 'i6', 'o1', 'o2', 'o10', 't4']}\n(:action mine-cane", "codex_output": []}, "mine-coal_1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o14', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o8', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-coal_1\n;; Example: {'action': 'mine-coal_1', 'args': ['i1', 'i3', 'o17', 'o20', 't19']}\n(:action mine-coal_1", "codex_output": []}, "mine-iron": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o58', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o12', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron\n;; Example: {'action': 'mine-iron', 'args': ['i1', 'i3', 'o7', 'o13', 'o16', 't8']}\n;; Example: {'action': 'mine-iron', 'args': ['i1', 'i2', 'o2', 'o12', 'o16', 't6']}\n;; Example: {'action': 'mine-iron', 'args': ['i1', 'i3', 'o11', 'o18', 'o17', 't9']}\n(:action mine-iron", "codex_output": []}, "mine-gold1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['o15', 'o16', 'o26', 'o27', 'l6']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o4', 't4']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold1\n;; Example: {'action': 'mine-gold1', 'args': ['i1', 'i4', 'o4', 'o11', 'o14', 't9']}\n(:action mine-gold1", "codex_output": []}, "open-iron-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i5', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: open-iron-ore\n;; Example: {'action': 'open-iron-ore', 'args': ['o11']}\n(:action open-iron-ore", "codex_output": []}, "close": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o11', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: close\n;; Example: {'action': 'close', 'args': ['o11']}\n(:action close", "codex_output": []}, "harvest-sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i5', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 'o15', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: harvest-sugar-cane\n;; Example: {'action': 'harvest-sugar-cane', 'args': ['i1', 'i6', 'o8', 'o9', 'o19', 't7', 't9']}\n(:action harvest-sugar-cane", "codex_output": []}, "drive": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o23', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't12']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: drive\n;; Example: {'action': 'drive', 'args': ['i1', 'o15', 't18']}\n(:action drive", "codex_output": []}, "leave": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: leave\n;; Example: {'action': 'leave', 'args': ['i1', 'o18', 'o17', 't15']}\n(:action leave", "codex_output": []}, "mine-beetroot1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o23', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-beetroot1\n;; Example: {'action': 'mine-beetroot1', 'args': ['i1', 'i3', 'o9', 'o13', 'o27', 't6']}\n(:action mine-beetroot1", "codex_output": []}, "turn-face": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: turn-face\n;; Example: {'action': 'turn-face', 'args': ['o9', 'o14', 't6']}\n(:action turn-face", "codex_output": []}, "axe": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't31']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o7', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: axe\n;; Example: {'action': 'axe', 'args': ['i1', 'o6', 'o11', 'o12', 'o13', 'o14', 'o17', 't6', 't8']}\n(:action axe", "codex_output": []}, "mine-wool0": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['o15', 'o16', 'o26', 'o27', 'l6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-wool0\n;; Example: {'action': 'mine-wool0', 'args': ['i1', 'i3', 'o4', 'o14', 't0']}\n(:action mine-wool0", "codex_output": []}, "harvest-beetroot": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't31']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o8', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: harvest-beetroot\n;; Example: {'action': 'harvest-beetroot', 'args': ['i1', 'i3', 'o3', 'o14', 'o17', 't3']}\n(:action harvest-beetroot", "codex_output": []}, "mine-coal1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o11', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't21']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't18']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-coal1\n;; Example: {'action': 'mine-coal1', 'args': ['i1', 'i3', 'o22', 'o58', 'o59', 't2']}\n;; Example: {'action': 'mine-coal1', 'args': ['i1', 'i3', 'o1', 'o11', 'o15', 't11']}\n(:action mine-coal1", "codex_output": []}, "mine-iron-ore1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['o6', 'o13', 'o15', 'o16', 't0']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore1\n;; Example: {'action': 'mine-iron-ore1', 'args': ['i1', 'i3', 'o7', 'o15', 'o17', 't9']}\n;; Example: {'action': 'mine-iron-ore1', 'args': ['i1', 'i3', 'o24', 'o11', 'o13', 't6']}\n(:action mine-iron-ore1", "codex_output": []}, "mine-potato2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't18']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o15', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o7', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't9']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato2\n;; Example: {'action': 'mine-potato2', 'args': ['i1', 'i3', 'o3', 'o11', 'o17', 't0']}\n(:action mine-potato2", "codex_output": []}, "crave-wood": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i2', 'o2', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: crave-wood\n;; Example: {'action': 'crave-wood', 'args': ['i3', 'i5', 'o4', 't5']}\n(:action crave-wood", "codex_output": []}, "mine-potatoes": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i3', '']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't19']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't5']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potatoes\n;; Example: {'action': 'mine-potatoes', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't13']}\n(:action mine-potatoes", "codex_output": []}, "mine-iron-ore2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i3', 'o4', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o1', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-iron-ore2\n;; Example: {'action': 'mine-iron-ore2', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't5']}\n(:action mine-iron-ore2", "codex_output": []}, "mine-wool4": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o20', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o10', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool4\n;; Example: {'action': 'mine-wool4', 'args': ['i4', 'i5', 'o5', 'o7', 'o12', 'o13', 'o15', 'o17', 'o8', 't12']}\n(:action mine-wool4", "codex_output": []}, "mine-right": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't11']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o10', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't1']}\n;; Example: {'action': 'pick-up', 'args': ['o6', 'o13', 'o15', 'o16', 't0']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't14']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-right\n;; Example: {'action': 'mine-right', 'args': ['a2', 'a0', 'v2']}\n(:action mine-right", "codex_output": []}, "cut-iron": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o20', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't15']}\n;; Example: {'action': 'pick-up', 'args': ['i6', 'o14', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't6']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o19', 't4']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't7']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: cut-iron\n;; Example: {'action': 'cut-iron', 'args': ['v2', 'v5', 'i0', 'i1', 'i6', 'i7']}\n(:action cut-iron", "codex_output": []}, "mine-gold-ore1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 'o13', 't9', 'o7', 'o18', 'o24', 'o26', 'o21', 'o30', 'o29', 'o48']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o21', 'o8', 'o9', 'o11', 'o12', 'o14', 'o18', 'o19', 'o5', 'o8', 'o9', 't3']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o3', 'o3', 't4']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i5', 'o5', 'o8', 'o11', 't11']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 'o15', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o5', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't9']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o15', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o17', 't16']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold-ore1\n;; Example: {'action': 'mine-gold-ore1', 'args': ['i1', 'i3', 'o2', 'o13', 'o16', 't8']}\n(:action mine-gold-ore1", "codex_output": []}, "move": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o13', 'o4', 'o9', 't12']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-up\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n;; Example: {'action': 'move-up', 'args': ['']}\n(:action move-up\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o2', 'o3', 'o8', 'o12', 'o15', 'o17', 'o18', 'o19', 'o20', 'o21', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i4', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i0', 'o13', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't5']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o18', 't21']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o9', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-down\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n;; Example: {'action': 'move-down', 'args': ['']}\n(:action move-down\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-down ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o8', 'o17', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o8', 'o12', 'o14', 'o16', 'o4', 'o9', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i2', 'i3', 'o1', 'o7', 'o17', 't12']}\n;; Example: {'action': 'mine-potato', 'args': ['i4', 'i3', 'o2', 'o12', 'o16', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i4', 'o14', 'o17', 't10']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o6', 'o12', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o5', 't8', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o4', 'o12', 'o16', 't9']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o15', 'o17', 't1']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o3', 'o10', 'o6', 't5']}\n(:action mine-potato\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Axe)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(not (inventory-empty ?targetinv))\n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t(object-of-type ?target Potato)\n\t\t)\n)\n\n<END>\n\n;; Operator: mine-potato1\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o3', 'o10', 'o16', 't10']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'i3', 'o14', 'o17', 'o20', 't8']}\n;; Example: {'action': 'mine-potato1', 'args': ['i2', 'i3', 'o2', 'o13', 'o18', 't1']}\n;; Example: {'action': 'mine-potato1', 'args': ['i1', 'o2', 'o9', 't7']}\n(:action mine-potato1\n        :parameters (?t - tile ?target - object ?tool - object ?targetinv - inventory ?toolinv - inventory ?x - object)\n\n        :precondition (and \n\t\t(agent-at ?t)\n\t\t(object-at ?x ?t)\n\t\t(object-of-type ?x PotatoPlant)\n\t\t(inventory-holding ?toolinv ?tool)\n\t\t(object-of-type ?tool Shears)\n\t\t(inventory-empty ?targetinv)\n\t\t(object-of-type ?target Hypothetical)\n\t\t)\n        :effect (and \n\t\t(inventory-holding ?targetinv ?target)\n\t\t(not (inventory-empty ?targetinv))\n\t\t(object-of-type ?target Potato)\n\t\t(not (object-of-type ?target Hypothetical))\n\t\t)\n)\n\n<END>\n\n;; Operator: move\n;; Example: {'action': 'move', 'args': ['i1', '']}\n;; Example: {'action': 'move', 'args': ['i2', '']}\n(:action move", "codex_output": []}}