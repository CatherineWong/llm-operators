operator_name,gt_operator,codex_raw_operator,codex_preprocessed_operator,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(openable ?r)
		)
        :effect (and 
		(opened ?r)
		)
)",
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)

        :precondition (and 
		(atLocation ?a ?al)
		(receptacleAtLocation ?r ?al)
		(openable ?r)
		(opened ?r)
		)
        :effect (and 
		(not (opened ?r))
		)
)",
PutObjectInReceptacleObject,"(:action PutObjectInReceptacleObject
        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?outerO - object ?outerR - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?outerO ?l)
            (isReceptacleObject ?outerO)
            (not (isReceptacleObject ?o))
            (objectType ?o ?ot)
            (holds ?a ?o)
            (not (holdsAnyReceptacleObject ?a))
            (inReceptacle ?outerO ?outerR)
        )
        :effect (and
            (inReceptacleObject ?o ?outerO)
            (inReceptacle ?o ?outerR)
            (not (holds ?a ?o))
            (not (holdsAny ?a))
            (objectAtLocation ?o ?l)
        )
    )","(:action PutObjectInReceptacleObject
        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?outerO - object ?outerR - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?outerO ?l)
            (isReceptacleObject ?outerO)
            (not (isReceptacleObject ?o))
            (objectType ?o ?ot)
            (holds ?a ?o)
            (not (holdsAnyReceptacleObject ?a))
            (inReceptacle ?outerO ?outerR)
        )
        :effect (and
            (inReceptacleObject ?o ?outerO)
            (inReceptacle ?o ?outerR)
            (not (holds ?a ?o))
            (not (holdsAny ?a))
            (objectAtLocation ?o ?l)
        )
    )",FAILED,
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","(:action HeatObject
        :parameters (?r - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?r MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","(:action CoolObject
        :parameters (?r - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?r FridgeType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ToggleObject,"(:action ToggleObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
        )
        :effect (and
            (isToggled ?o)
        )
    )","(:action ToggleObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
        )
        :effect (and
            (isToggled ?o)
        )
    )","(:action ToggleObject
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (or
                (objectType ?ko KnifeType)
                (objectType ?ko ButterKnifeType)
            )
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (or
                (objectType ?ko KnifeType)
                (objectType ?ko ButterKnifeType)
            )
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?co ?l)
		(sliceable ?co)
		(holds ?a ?ko)
		)
        :effect (and 
		(isSliced ?co)
		)
)",
