{"craft-sword": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-sword\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a sword, you need 1 stick and 2 iron ingots in your inventory.\n(:action craft-sword\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is an IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a sword, you need 1 stick and 1 diamond in your inventory.\n(:action craft-sword\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Diamond\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Diamond)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Diamond))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a sword, you need 2 sticks and 1 diamond in your inventory.\n(:action craft-sword\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WeaponStation\n    (object-at ?station ?t)\n    (object-of-type ?station WeaponStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Stick\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Stick)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Sword\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Sword)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Stick))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "craft-bed1": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bed1\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a bed, you need 3 wood planks and 3 wools in your inventory.\n(:action craft-bed1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?ingredientinv4 - inventory ?ingredientinv5 - inventory ?ingredientinv6 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the third ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 WoodPlank)\n    ;; the fourth ingredient is a Wool\n    (inventory-holding ?ingredientinv4 ?ingredient4)\n    (object-of-type ?ingredient4 Wool)\n    ;; the fifth ingredient is a Wool\n    (inventory-holding ?ingredientinv5 ?ingredient5)\n    (object-of-type ?ingredient5 Wool)\n    ;; the sixth ingredient is a Wool\n    (inventory-holding ?ingredientinv6 ?ingredient6)\n    (object-of-type ?ingredient6 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 WoodPlank))\n    (object-of-type ?ingredient3 Hypothetical)\n    ;; the fourth ingredient will be removed\n    (not (inventory-holding ?ingredientinv4 ?ingredient4))\n    (inventory-empty ?ingredientinv4)\n    (not (object-of-type ?ingredient4 Wool))\n    (object-of-type ?ingredient4 Hypothetical)\n    ;; the fifth ingredient will be removed\n    (not (inventory-holding ?ingredientinv5 ?ingredient5))\n    (inventory-empty ?ingredientinv5)\n    (not (object-of-type ?ingredient5 Wool))\n    (object-of-type ?ingredient5 Hypothetical)\n    ;; the sixth ingredient will be removed\n    (not (inventory-holding ?ingredientinv6 ?ingredient6))\n    (inventory-empty ?ingredientinv6)\n    (not (object-of-type ?ingredient6 Wool))\n    (object-of-type ?ingredient6 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a bed, you need 2 wood planks and 2 wools in your inventory.\n(:action craft-bed1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?ingredientinv4 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the third ingredient is a Wool\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 Wool)\n    ;; the fourth ingredient is a Wool\n    (inventory-holding ?ingredientinv4 ?ingredient4)\n    (object-of-type ?ingredient4 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 Wool))\n    (object-of-type ?ingredient3 Hypothetical)\n    ;; the fourth ingredient will be removed\n    (not (inventory-holding ?ingredientinv4 ?ingredient4))\n    (inventory-empty ?ingredientinv4)\n    (not (object-of-type ?ingredient4 Wool))\n    (object-of-type ?ingredient4 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a bed, you need 3 wood planks and 2 wools in your inventory.\n(:action craft-bed1\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?ingredientinv4 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 WoodPlank)\n    ;; the third ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 WoodPlank)\n    ;; the fourth ingredient is a Wool\n    (inventory-holding ?ingredientinv4 ?ingredient4)\n    (object-of-type ?ingredient4 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 WoodPlank))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 WoodPlank))\n    (object-of-type ?ingredient3 Hypothetical)\n    ;; the fourth ingredient will be removed\n    (not (inventory-holding ?ingredientinv4 ?ingredient4))\n    (inventory-empty ?ingredientinv4)\n    (not (object-of-type ?ingredient4 Wool))\n    (object-of-type ?ingredient4 Hypothetical)\n  )\n )\n"]}, "craft-bed": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-bed\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft a bed, you need 3 wood planks and 3 wool.\n(:action craft-bed\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a Wool\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wool))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft a bed, you need 4 wood planks and 2 wool.\n(:action craft-bed\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a Wool\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wool))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft a bed, you need 5 wood planks and 1 wool.\n(:action craft-bed\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a BedStation\n    (object-at ?station ?t)\n    (object-of-type ?station BedStation)\n    ;; the first ingredient is a WoodPlank\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 WoodPlank)\n    ;; the second ingredient is a Wool\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wool)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Bed\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Bed)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 WoodPlank))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wool))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "smelt-iron-ore": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: smelt-iron-ore\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To smelt iron ore, you need 1 iron ore in your inventory and be near a furnace.\n(:action smelt-iron-ore\n  :parameters (?ingredientinv - inventory ?targetinv - inventory ?station - object ?ingredient - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the ingredient is IronOre\n    (inventory-holding ?ingredientinv ?ingredient)\n    (object-of-type ?ingredient IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the ingredient will be removed\n    (not (inventory-holding ?ingredientinv ?ingredient))\n    (inventory-empty ?ingredientinv)\n    (not (object-of-type ?ingredient IronOre))\n    (object-of-type ?ingredient Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To smelt iron ore, you need 1 iron ore and 1 coal in your inventory and be near a furnace.\n(:action smelt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n)\n", "\n;; Guess number 3\n;; To smelt iron ore, you need 1 iron ore and 1 gold ore in your inventory and be near a furnace.\n(:action smelt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n)\n"]}, "craft-iron-ingot": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-iron-ingot\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To craft an iron ingot, you need 1 iron ore in your inventory.\n(:action craft-iron-ingot\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To craft an iron ingot, you need 1 gold ore in your inventory.\n(:action craft-iron-ingot\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a GoldOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 GoldOre))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To craft an iron ingot, you need 1 iron ore and 1 coal in your inventory.\n(:action craft-iron-ingot\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "smelt-iron": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: smelt-iron\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To smelt iron, you need 1 iron ore in your inventory.\n(:action smelt-iron\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To smelt iron, you need 2 iron ores in your inventory.\n(:action smelt-iron\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is an IronOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To smelt iron, you need 1 iron ore and 1 coal in your inventory.\n(:action smelt-iron\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is an IronOre\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 IronOre)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 IronOre))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n"]}, "melt-iron-ore": {"codex_prompt": [{"role": "system", "content": ";; You are a software engineer who will be writing planning operators in the PDDL planning language.\n"}, {"role": "user", "content": ";; These operators are based on the following PDDL domain definition.\n (:requirements :strips)\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n;;;; Only use predicates and functions available in the PDDL domain. each mining rule requires 0 or 1 tools that the agent should be currently holding (in its inventory). Each crafting rule requires max 2 ingredients that should be in the agent's inventory. You can guess different tools to be used or different ingredients to be used for the same operator. For example:\n\n;; Operator: craft-wood-plank\n\n<START>\n;; Guess number 1\n;; To craft a wood plank, you need 1 wood in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft a wood plank, you need 2 wood in your inventory\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Wood\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Wood)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Wood))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft a wood plank, you need 1 wood and 1 coal in your inventory.\n(:action craft-wood-plank\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Wood\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Wood)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a WoodPlank\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target WoodPlank)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Wood))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: craft-arrow\n\n<START>\n;; Guess number 1\n;; To craft an arrow, you need 1 stick and 1 feather in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a Feather\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Feather)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Feather))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 2\n;; To craft an arrow, you need 1 stick and 1 GoldOre in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a GoldOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 GoldOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 GoldOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n<START>\n;; Guess number 3\n;; To craft an arrow, you need 1 stick and 1 iron ingot in your inventory.\n(:action craft-arrow\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a WorkStation\n    (object-at ?station ?t)\n    (object-of-type ?station WorkStation)\n    ;; the first ingredient is a Stick\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Stick)\n    ;; the second ingredient is a IronIngot\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronIngot)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become a Arrow\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Arrow)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Stick))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronIngot))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n<END>\n\n;; Operator: melt-iron-ore\n;; Make three guesses. Note that each crafting rule can have only 1 or 2 ingredients. And if you think you need\n;; multiple copies of the same ingredient, you only need to specify that ingredient once in the definition.\n\n"}], "codex_output": ["\n;; Guess number 1\n;; To melt iron ore, you need 1 coal and 1 iron ore in your inventory.\n(:action melt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is an IronOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronOre))\n    (object-of-type ?ingredient2 Hypothetical)\n  )\n )\n", "\n;; Guess number 2\n;; To melt iron ore, you need 2 coal and 1 iron ore in your inventory.\n(:action melt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is a Coal\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 Coal)\n    ;; the third ingredient is an IronOre\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 Coal))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 IronOre))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n", "\n;; Guess number 3\n;; To melt iron ore, you need 1 coal and 2 iron ore in your inventory.\n(:action melt-iron-ore\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    ;; you are currently at a Furnace\n    (object-at ?station ?t)\n    (object-of-type ?station Furnace)\n    ;; the first ingredient is a Coal\n    (inventory-holding ?ingredientinv1 ?ingredient1)\n    (object-of-type ?ingredient1 Coal)\n    ;; the second ingredient is an IronOre\n    (inventory-holding ?ingredientinv2 ?ingredient2)\n    (object-of-type ?ingredient2 IronOre)\n    ;; the third ingredient is an IronOre\n    (inventory-holding ?ingredientinv3 ?ingredient3)\n    (object-of-type ?ingredient3 IronOre)\n    ;; the target inventory is empty\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    ;; the target inventory will become an IronIngot\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronIngot)\n    ;; the first ingredient will be removed\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\n    (inventory-empty ?ingredientinv1)\n    (not (object-of-type ?ingredient1 Coal))\n    (object-of-type ?ingredient1 Hypothetical)\n    ;; the second ingredient will be removed\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\n    (inventory-empty ?ingredientinv2)\n    (not (object-of-type ?ingredient2 IronOre))\n    (object-of-type ?ingredient2 Hypothetical)\n    ;; the third ingredient will be removed\n    (not (inventory-holding ?ingredientinv3 ?ingredient3))\n    (inventory-empty ?ingredientinv3)\n    (not (object-of-type ?ingredient3 IronOre))\n    (object-of-type ?ingredient3 Hypothetical)\n  )\n )\n"]}}