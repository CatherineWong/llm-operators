{"CutObject": "(:action CutObject\n        :parameters (?a - agent ?l - location ?oToSlice - object ?oToolUsed - object)\n        \n        :precondition (and \n\t\t(objectAtLocation ?oToSlice ?l)\n\t\t(atLocation ?a ?l)\n\t\t(holds ?a ?oToolUsed)\n\t\t(sliceable ?oToSlice)\n\t\t)\n        :effect (and \n\t\t(isSliced ?oToSlice)\n\t\t)\n)", "TurnOn": "(:action TurnOn\n        :parameters (?a - agent ?r - location ?r - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?r)\n\t\t(toggleable ?r)\n\t\t(isToggled ?r)\n\t\t)\n        :effect (and \n\t\t(isOn ?r)\n\t\t(not (isToggled ?r))\n\t\t)\n)", "GotoObject": "(:action GotoObject\n        :parameters (?a - agent ?a - location ?innerObject - location ?innerObject - object)\n        \n        :precondition (and \n\t\t(objectAtLocation ?innerObject ?a)\n\t\t)\n        :effect (and \n\t\t(atLocation ?a ?innerObject)\n\t\t(not (objectAtLocation ?innerObject ?a))\n\t\t)\n)", "GetObject": "(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(objectAtLocation ?o ?l)\n\t\t)\n        :effect (and \n\t\t(holds ?a ?o)\n\t\t(not (objectAtLocation ?o ?l))\n\t\t)\n)", "UseAppliance": "(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(objectAtLocation ?o ?l)\n\t\t)\n        :effect (and \n\t\t(holds ?a ?o)\n\t\t(not (objectAtLocation ?o ?l))\n\t\t)\n)", "get-ingredient": "(:action get-ingredient\n        :parameters (?a - agent ?l - location ?l - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t)\n        :effect (and \n\t\t(holds ?a ?l)\n\t\t(not (atLocation ?a ?l))\n\t\t)\n)", "TakeObject": "(:action TakeObject\n        :parameters (?a - agent ?a - location ?o - object)\n        \n        :precondition (and \n\t\t(objectAtLocation ?o ?a)\n\t\t)\n        :effect (and \n\t\t(not (objectAtLocation ?o ?a))\n\t\t(holds ?a ?o)\n\t\t)\n)", "MicrowaveObject": "(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(objectAtLocation ?o ?l)\n\t\t(holds ?a ?o)\n\t\t(cleanable ?o)\n\t\t(coolable ?o)\n\t\t(toggleable ?o)\n\t\t)\n        :effect (and \n\t\t(isHot ?o)\n\t\t(not (isClean ?o))\n\t\t(isOn ?o)\n\t\t(not (isCool ?o))\n\t\t(isToggled ?o)\n\t\t)\n)", "WashObject": "(:action WashObject\n        :parameters (?a - agent ?o - object ?r - receptacle)\n        \n        :precondition (and \n\t\t(holds ?a ?o)\n\t\t(openable ?r)\n\t\t(opened ?r)\n\t\t(cleanable ?o)\n\t\t(not (isClean ?o))\n\t\t)\n        :effect (and \n\t\t(isClean ?o)\n\t\t)\n)", "put-apple-piece": "(:action put-apple-piece\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(holdsAny ?a)\n\t\t(atLocation ?a ?l)\n\t\t(objectAtLocation ?o ?l)\n\t\t)\n        :effect (and \n\t\t(isToggled ?o)\n\t\t(not (isHot ?o))\n\t\t(not (isCool ?o))\n\t\t(atLocation ?a ?l)\n\t\t(not (objectAtLocation ?o ?l))\n\t\t)\n)", "TakeTool": "(:action TakeTool\n        :parameters (?a - agent ?ot - location ?ot - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?ot)\n\t\t(isReceptacleObject ?ot)\n\t\t)\n        :effect (and \n\t\t(holds ?a ?ot)\n\t\t(not (atLocation ?a ?ot))\n\t\t)\n)", "PutTool": "(:action PutTool\n        :parameters (?a - agent ?l - location ?o - object ?t - otype)\n        \n        :precondition (and \n\t\t(holds ?a ?o)\n\t\t(objectType ?o ?t)\n\t\t(not (isReceptacleObject ?o))\n\t\t)\n        :effect (and \n\t\t(atLocation ?a ?l)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "Go2Location": "(:action Go2Location\n        :parameters (?a - agent ?l1 - location ?location - location)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l1)\n\t\t)\n        :effect (and \n\t\t(atLocation ?a ?location)\n\t\t(not (atLocation ?a ?l1))\n\t\t)\n)", "Place1Object": "(:action Place1Object\n        :parameters (?a - agent ?lEnd - location ?lEnd - rtype ?lStart - location ?o - object ?t - receptacle)\n        \n        :precondition (and \n\t\t(receptacleType ?t ?lEnd)\n\t\t(inReceptacle ?o ?t)\n\t\t(atLocation ?a ?lStart)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?t))\n\t\t(objectAtLocation ?o ?lEnd)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "eject": "(:action Place1Object\n        :parameters (?a - agent ?lEnd - location ?lEnd - rtype ?lStart - location ?o - object ?t - receptacle)\n        \n        :precondition (and \n\t\t(receptacleType ?t ?lEnd)\n\t\t(inReceptacle ?o ?t)\n\t\t(atLocation ?a ?lStart)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?t))\n\t\t(objectAtLocation ?o ?lEnd)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "TurnOnObject": "(:action Place1Object\n        :parameters (?a - agent ?lEnd - location ?lEnd - rtype ?lStart - location ?o - object ?t - receptacle)\n        \n        :precondition (and \n\t\t(receptacleType ?t ?lEnd)\n\t\t(inReceptacle ?o ?t)\n\t\t(atLocation ?a ?lStart)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?t))\n\t\t(objectAtLocation ?o ?lEnd)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "LookAtObject": "(:action Place1Object\n        :parameters (?a - agent ?lEnd - location ?lEnd - rtype ?lStart - location ?o - object ?t - receptacle)\n        \n        :precondition (and \n\t\t(receptacleType ?t ?lEnd)\n\t\t(inReceptacle ?o ?t)\n\t\t(atLocation ?a ?lStart)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?t))\n\t\t(objectAtLocation ?o ?lEnd)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "Puts": "(:action Puts\n        :parameters (?a - agent ?a - location ?o - object ?r - receptacle)\n        \n        :precondition (and \n\t\t(holds ?a ?o)\n\t\t(receptacleAtLocation ?r ?a)\n\t\t(opened ?r)\n\t\t)\n        :effect (and \n\t\t(inReceptacle ?o ?r)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "Removes": "(:action Removes\n        :parameters (?a - agent ?gEnd - object ?gEnd - receptacle ?gStart - object ?l - location)\n        \n        :precondition (and \n\t\t(inReceptacle ?gStart ?gEnd)\n\t\t(objectAtLocation ?gEnd ?l)\n\t\t(atLocation ?a ?l)\n\t\t(holds ?a ?gEnd)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?gStart ?gEnd))\n\t\t)\n)", "OpenObject": "(:action OpenObject\n        :parameters (?a - agent ?l - location ?rEnd - receptacle)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t)\n        :effect (and \n\t\t(openable ?rEnd)\n\t\t(not (opened ?rEnd))\n\t\t)\n)", "CloseObject": "(:action CloseObject\n        :parameters (?r - receptacle ?rType - rtype)\n        \n        :precondition (and \n\t\t(openable ?r)\n\t\t(opened ?r)\n\t\t(receptacleType ?r ?rType)\n\t\t)\n        :effect (and \n\t\t(not (opened ?r))\n\t\t)\n)", "Get": "(:action Get\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(objectAtLocation ?o ?l)\n\t\t)\n        :effect (and \n\t\t(not (objectAtLocation ?o ?l))\n\t\t(holds ?a ?o)\n\t\t)\n)", "FindObject": "(:action FindObject\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t)\n        :effect (and \n\t\t(atLocation ?a ?l)\n\t\t(holds ?a ?o)\n\t\t(not (holds ?a ?o))\n\t\t)\n)", "PUT": "(:action PUT\n        :parameters (?agent - agent ?lStart - location ?o - object ?ot - otype ?r - receptacle ?rl - receptacle ?rt - rtype ?rtl - rtype)\n        \n        :precondition (and \n\t\t(holds ?agent ?o)\n\t\t(receptacleAtLocation ?r ?lStart)\n\t\t(objectType ?o ?ot)\n\t\t(receptacleType ?r ?rt)\n\t\t(inReceptacle ?o ?rl)\n\t\t(wasInReceptacle ?o ?rl)\n\t\t(receptacleAtLocation ?rl ?lStart)\n\t\t(receptacleType ?rl ?rtl)\n\t\t(openable ?rl)\n\t\t(wasInReceptacle ?o ?rl)\n\t\t)\n        :effect (and \n\t\t(inReceptacle ?o ?r)\n\t\t(openable ?r)\n\t\t(not (inReceptacle ?o ?rl))\n\t\t(not (holds ?agent ?o))\n\t\t)\n)", "TAKE": "(:action TAKE\n        :parameters (?a - agent ?loc - location ?o - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?loc)\n\t\t(objectAtLocation ?o ?loc)\n\t\t(not (holdsAny ?a))\n\t\t)\n        :effect (and \n\t\t(holds ?a ?o)\n\t\t(not (objectAtLocation ?o ?loc))\n\t\t)\n)", "place": "(:action place\n        :parameters (?a - agent ?dst - receptacle ?l - location ?o - object ?src - receptacle)\n        \n        :precondition (and \n\t\t(receptacleAtLocation ?src ?l)\n\t\t(atLocation ?a ?l)\n\t\t(openable ?dst)\n\t\t(opened ?dst)\n\t\t(receptacleAtLocation ?dst ?l)\n\t\t(inReceptacle ?o ?src)\n\t\t(not (inReceptacle ?o ?dst))\n\t\t(not (holds ?a ?o))\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?src))\n\t\t(inReceptacle ?o ?dst)\n\t\t)\n)", "UncapObject": "(:action place\n        :parameters (?a - agent ?dst - receptacle ?l - location ?o - object ?src - receptacle)\n        \n        :precondition (and \n\t\t(receptacleAtLocation ?src ?l)\n\t\t(atLocation ?a ?l)\n\t\t(openable ?dst)\n\t\t(opened ?dst)\n\t\t(receptacleAtLocation ?dst ?l)\n\t\t(inReceptacle ?o ?src)\n\t\t(not (inReceptacle ?o ?dst))\n\t\t(not (holds ?a ?o))\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?src))\n\t\t(inReceptacle ?o ?dst)\n\t\t)\n)", "CapObject": "(:action CapObject\n        :parameters (?o - object ?r - receptacle)\n        \n        :precondition (and \n\t\t(inReceptacle ?o ?r)\n\t\t)\n        :effect (and \n\t\t(not (inReceptacle ?o ?r))\n\t\t)\n)", "PutdownObject": "(:action PutdownObject\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t(holds ?a ?o)\n\t\t)\n        :effect (and \n\t\t(not (holds ?a ?o))\n\t\t(objectAtLocation ?o ?l)\n\t\t)\n)", "MoveObject": "(:action MoveObject\n        :parameters (?o - object ?rEnd - receptacle ?rStart - receptacle)\n        \n        :precondition (and \n\t\t(inReceptacle ?o ?rStart)\n\t\t)\n        :effect (and \n\t\t(wasInReceptacle ?o ?rStart)\n\t\t(not (inReceptacle ?o ?rStart))\n\t\t(inReceptacle ?o ?rEnd)\n\t\t)\n)", "CleanObject": "(:action CleanObject\n        :parameters (?a - agent ?l - location ?o - object)\n        \n        :precondition (and \n\t\t(atLocation ?a ?l)\n\t\t)\n        :effect (and \n\t\t(isClean ?o)\n\t\t)\n)"}