{
    "LookAtObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['freezer']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: LookAtObject\n;; Example: {'action': 'LookAtObject', 'args': ['statue', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['candle']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            ;;; Add any desired effects here\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (or\n                (inReceptacle ?o ?r)\n                (holds ?a ?o)\n            )\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "ExamineObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: ExamineObject\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['roundcontainer']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['container', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remote', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We only need the object parameter to execute the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAnyReceptacleObject ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To examine an object, we only need the object itself as a parameter.\n(:action ExamineObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (objectType ?o ?ot)\n        )\n        :effect (and\n            (isExamined ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (holds ?a ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            ; In this case, we can define the effect of examining an object in a way that suits your problem domain and requirements.\n            ; For example, you can add predicates like (examineStatus ?o Examined) or (isExamined ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"
        ]
    },
    "LookObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinetundersink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: LookObject\n;; Example: {'action': 'LookObject', 'args': ['statue', 'lamp']}\n;; Example: {'action': 'LookObject', 'args': ['cloth']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (isClean ?o))\n            (not (isHot ?o))\n            (not (isCool ?o))\n            (not (isOn ?o))\n            (not (isToggled ?o))\n            (not (isSliced ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n            (holds ?a ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (isClean ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookObject\n        :parameters (?a - agent ?l - location ?o1 - object ?o2 - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o1 ?l)\n            (objectAtLocation ?o2 ?l)\n        )\n        :effect (and\n            (not (isClean ?o1))\n            (not (isClean ?o2))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n            (objectType ?o ObjectType)\n        )\n        :effect (and\n            (not (isClean ?o))\n        )\n    )\n\n<END>"
        ]
    },
    "FillObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['wallet']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: FillObject\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sink', 'pot']}\n;; Example: {'action': 'FillObject', 'args': ['largesink']}\n;; Example: {'action': 'FillObject', 'args': ['largesink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['kettle']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pot', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['pot', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pot', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pan']}\n;; Example: {'action': 'FillObject', 'args': ['pan']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pan']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n            (not (isClean ?o))\n            (not (isSliced ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (objectType ?o PotType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (isClean ?o)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?ot - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r ?ot)\n            (cleanable ?o)\n            (isClean ?o)\n            (lastActionClean ?o)\n        )\n        :effect (and\n            (not (isClean ?o))\n            (not (lastActionClean ?o))\n            (wasInReceptacle ?o ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (ot PotatoType)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?ot - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (heatable ?o)\n            (receptacleType ?r SinkBasinType)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "CutObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CutObject\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['yellowapple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'stalk']}\n;; Example: {'action': 'CutObject', 'args': ['tomatoStalk']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cut an object, we interact with the object to be cut AND the tool used to cut the object (e.g. a knife). So both must be parameters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - tool ?rt - rtype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?rt)\n            (isSliced ?o)\n            (holds ?a ?o)\n            (toolType ?t KnifeType)\n        )\n        :effect (and\n            (sliceable ?o)\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype ?c - cuttingboard ?k - knife)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (objectType ?o ?t)\n            (objectType ?c CuttingBoardType)\n            (objectType ?k KnifeType)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (objectType ?t KnifeType)\n            (holds ?a ?o)\n            (sliceable ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isSliced ?o)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype ?knife - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?t)\n            (objectType ?knife KnifeType)\n            (holds ?a ?o)\n            (sliceable ?o)\n            (holds ?a ?knife)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?k - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (objectType ?o ?ot)\n            (objectType ?k KnifeType)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "UseObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: UseObject\n;; Example: {'action': 'UseObject', 'args': ['apple', 'counter']}\n;; Example: {'action': 'UseObject', 'args': ['soap', 'sink']}\n;; Example: {'action': 'UseObject', 'args': ['light', 'desklamp']}\n;; Example: {'action': 'UseObject', 'args': ['microwave']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To use an object, we may interact with the object itself or a receptacle/device that the object is associated with. Thus, both the object and the optional receptacle/device must be parameters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (or\n                (objectAtLocation ?o ?l) ; interact with object directly\n                (inReceptacle ?o ?r) ; interact with object in a receptacle/device\n            )\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleType ?r ?ot)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleType ?r ?t)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (holds ?a ?o)\n            (isOn ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To use an object, we interact with the object and, optionally, the receptacle or tool associated with it. So both must be parameters to the operator.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (or\n                (receptacleType ?r ?ot)\n                (objectType ?r ?ot)\n            )\n            (or\n                (inReceptacle ?o ?r)\n                (isReceptacleObject ?o)\n                (isReceptacleObject ?r)\n            )\n        )\n        :effect (and\n            (holds ?a ?o)\n            (holdsAny ?a)\n            (not (objectAtLocation ?o ?l))\n            (when (isToggled ?o)\n                (not (isToggled ?o))\n                (isOn ?o)\n            )\n            (when (isOn ?o)\n                (not (isOn ?o))\n                (isToggled ?o)\n            )\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator. In the case of using an object, we need to specify both the object and the receptacle (if applicable) where the object will be used.\n(:action UseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (or\n                (receptacleType ?r ?ot)\n                (not (isReceptacleObject ?o))\n            )\n        )\n        :effect (and\n            (isUsed ?o)\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"
        ]
    },
    "BakeObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['longtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: BakeObject\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (not (isCool ?o))\n            (not (isHot ?o))\n            (isOn ?r)\n            (isToggled ?r)\n            (isHot ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; In this case, the object will be baked in a specific receptacle, such as an oven.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleType ?r OvenType)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n            (isHot ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (isCooked ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r OvenType)\n            (not (isHot ?r))\n        )\n        :effect (and\n            (isHot ?r)\n            (not (isCool ?o))\n            (wasInReceptacle ?o ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAnyReceptacleObject ?a))\n            (heatable ?r)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "TurnOnObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['remotecontrol']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: TurnOnObject\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['stove']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['stove']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desk', 'lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['stovetop']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['watch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamponwindowtable']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dressertlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp_nightstand']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['toaster']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp', 'cabinet']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp', 'cabinet']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "RestartObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['smallblacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: RestartObject\n;; Example: {'action': 'RestartObject', 'args': ['desklamp']}\n;; Example: {'action': 'RestartObject', 'args': ['talllamp']}\n;; Example: {'action': 'RestartObject', 'args': ['desklamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n;; Example: {'action': 'RestartObject', 'args': ['desklamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n;; Example: {'action': 'RestartObject', 'args': ['desklamp']}\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have the object that needs to be restarted as a parameter to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o LampType)\n            (holds ?a ?o)\n            (isToggleable ?o)\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "TurnOffObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['bed']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['greenbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: TurnOffObject\n;; Example: {'action': 'TurnOffObject', 'args': ['stove']}\n;; Example: {'action': 'TurnOffObject', 'args': ['stove']}\n;; Example: {'action': 'TurnOffObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (isOn ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (isOn ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>"
        ]
    },
    "CoolObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['wine']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['talllamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['blackdrawerunit']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CoolObject\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['lettuce', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['lettuce']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato']}\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['pan', 'stove']}\n;; Example: {'action': 'CoolObject', 'args': ['egg']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'refrigerator']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (isCool ?o))\n            (coolable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType) ; the receptacle used for cooling is a fridge\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (isHot ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "OpenObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: OpenObject\n;; Example: {'action': 'OpenObject', 'args': ['drawer']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n;; Example: {'action': 'OpenObject', 'args': ['deskcabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['deskcabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n;; Example: {'action': 'OpenObject', 'args': ['drawer']}\n;; Example: {'action': 'OpenObject', 'args': ['drawer']}\n;; Example: {'action': 'OpenObject', 'args': ['safe']}\n;; Example: {'action': 'OpenObject', 'args': ['cabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['refrigerator']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (openable ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (openable ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (openable ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>"
        ]
    },
    "CloseObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['greenbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CloseObject\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['microwave']}\n;; Example: {'action': 'CloseObject', 'args': ['deskcabinet']}\n;; Example: {'action': 'CloseObject', 'args': ['microwave']}\n;; Example: {'action': 'CloseObject', 'args': ['drawer']}\n;; Example: {'action': 'CloseObject', 'args': ['drawer']}\n;; Example: {'action': 'CloseObject', 'args': ['safe']}\n;; Example: {'action': 'CloseObject', 'args': ['refrigerator']}\n;; Example: {'action': 'CloseObject', 'args': ['microwave']}\n;; Example: {'action': 'CloseObject', 'args': ['microwave']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (openable ?r)\n            (opened ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (opened ?r))\n            (isToggled ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (openable ?r)\n            (opened ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (isToggled ?o)\n        )\n        :effect (and\n            (not (isToggled ?o))\n            (opened ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "CookObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['entryway']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CookObject\n;; Example: {'action': 'CookObject', 'args': ['pan', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato']}\n;; Example: {'action': 'CookObject', 'args': ['potato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['microwave', 'tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'slice', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['sliced_bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slicedbread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread']}\n;; Example: {'action': 'CookObject', 'args': ['slicedbread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'pan']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle?)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (or\n                (receptacleType ?r StoveBurnerType)\n                (receptacleType ?r StoveTopType)\n                (receptacleType ?r MicrowaveType)\n            )\n            (or\n                (inReceptacle ?o ?r)\n                (not (isReceptacleObject ?o))\n            )\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cook an object, we interact with the object to be cooked AND the receptacle where the cooking process takes place (e.g. stove, microwave). So both must be parameters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r ?rt)\n            (inReceptacle ?o ?r)\n            (holds ?a ?o)\n            (or\n                (and (objectType ?o TomatoType) (or (receptacleType ?r StoveBurnerType) (receptacleType ?r MicrowaveType)))\n                (and (objectType ?o PotatoType) (receptacleType ?r StoveBurnerType))\n                (and (objectType ?o EggType) (receptacleType ?r StoveBurnerType))\n                (and (objectType ?o AppleType) (receptacleType ?r StoveBurnerType))\n                (and (objectType ?o SliceType) (receptacleType ?r StoveBurnerType))\n                (and (objectType ?o BreadType) (receptacleType ?r StoveBurnerType))\n            )\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; For cooking an object, we need an agent, the object to be cooked, and the receptacle or tool used for cooking (e.g. stove, microwave).\n(:action CookObject\n        :parameters (?a - agent ?o - object ?r - receptacle)\n        :precondition (and\n            (holds ?a ?o)\n            (isReceptacleObject ?o)\n            (objectType ?o ?ot)\n            (receptacleType ?r ?rot)\n            (or\n                (and (rtype ?r StoveBurnerType) (or (fixed ?ot) (heatable ?ot)))\n                (and (rtype ?r MicrowaveType) (microwavable ?ot))\n            )\n        )\n        :effect (and\n            (isCooked ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cook an object, we interact with the object to be cooked AND the receptacle that will cook the object (e.g. stove, microwave, etc.). So both must be parameters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r ?rt)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (or\n                (and\n                    (objectType ?o TomatoType)\n                    (or (receptacleType ?r StoveBurnerType) (receptacleType ?r MicrowaveType))\n                )\n                (and\n                    (objectType ?o PotatoType)\n                    (receptacleType ?r StoveBurnerType)\n                )\n                (and\n                    (objectType ?o EggType)\n                    (receptacleType ?r StoveBurnerType)\n                )\n                (and\n                    (objectType ?o AppleType)\n                    (receptacleType ?r StoveBurnerType)\n                )\n                (and\n                    (objectType ?o ?ot)\n                    (receptacleType ?r MicrowaveType)\n                )\n            )\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; We assume that cooking an object requires a specific receptacle or tool, such as a stove or microwave, so those should be parameters as well.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (objectType ?o ?ot)\n            (heatable ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (isCooked ?o))\n            (isCooked ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "EmptyObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['safe']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: EmptyObject\n;; Example: {'action': 'EmptyObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'EmptyObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'EmptyObject', 'args': ['glass', 'stove']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action EmptyObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action EmptyObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r SinkBasinType)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n            (not (holdsAnyReceptacleObject ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action EmptyObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action EmptyObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r ?rt)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action EmptyObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>"
        ]
    },
    "MicrowaveObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['couch']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['livingroom']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: MicrowaveObject\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['sliceofbread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (isHot ?r)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isHot ?o)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (held ?a ?o)\n            (receptacleType ?r MicrowaveType)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r MicrowaveType)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (objectType ?r MicrowaveType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To microwave an object, we interact with the object to be microwaved AND the microwave receptacle. So both must be parameters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "HeatObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['stand']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['paper', 'towels']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: HeatObject\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['white_cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['apple']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'pan']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r StoveBurnerType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?r SinkBasinType)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n            (not (isToggled ?r))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (heatable ?o)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (inReceptacle ?r SinkBasinType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (heatable ?o)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (isCool ?r)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To heat an object, we interact with the object to be heated AND the receptacle that will heat the object (e.g. a stove or microwave). So both must be parameters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r StoveBurnerType) ; Heat object on stove\n            (or\n                (receptacleType ?r MicrowaveType) ; Heat object in microwave\n                (receptacleType ?r StoveType)\n            )\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "SliceObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: SliceObject\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'Knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper', 'countertop']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'appleknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread']}\n;; Example: {'action': 'SliceObject', 'args': ['loaf']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife', 'top']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butter_knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butter_knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'countertop']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable', 'sinkbasin']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?k - knife)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o TomatoType)\n            (or (sliceable ?o) (isSliced ?o))\n            (objectType ?k KnifeType)\n            (holds ?a ?o)\n            (holds ?a ?k)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?tool - object)\n        :precondition (and\n            (objectType ?o ?ot)\n            (objectType ?tool KnifeType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?tool)\n            (holds ?a ?o)\n            (not (isSliced ?o))\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To slice an object, we need the object to be sliced and a tool to perform the slicing (e.g. a knife). So both must be parameters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (objectType ?o ?ot)\n            (objectType ?t KnifeType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?t)\n            (not (isSliced ?o))\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?knife - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (objectType ?knife KnifeType)\n            (sliceable ?o)\n            (holds ?a ?o)\n            (holds ?a ?knife)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?o - object ?t - otype ?r - receptacle)\n        :precondition (and\n            (objectType ?o ?t)\n            (holds ?a ?o)\n            (receptacleType ?r CuttingBoardType)\n            (holds ?a ?r)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "WashObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeemachine']}\n;; Example: {'action': 'GotoLocation', 'args': ['entertainmentcenter']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: WashObject\n;; Example: {'action': 'WashObject', 'args': ['spoon', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['pan']}\n;; Example: {'action': 'WashObject', 'args': ['knife']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['plate']}\n;; Example: {'action': 'WashObject', 'args': ['spatula']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['apple']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce']}\n;; Example: {'action': 'WashObject', 'args': ['fork']}\n;; Example: {'action': 'WashObject', 'args': ['fork', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['tomato', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['knife', 'sink']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r SinkBasinType)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o TomatoType) ;; Assumption: TomatoType can be washed\n            (or\n                (inReceptacle ?o ?r)\n                (holds ?a ?o)\n            )\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location  ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r SinkBasinType)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will wash the object (e.g. a sink). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "PlaceObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PlaceObject\n;; Example: {'action': 'PlaceObject', 'args': ['bread', 'countertop']}\n;; Example: {'action': 'PlaceObject', 'args': ['plate', 'shelf']}\n;; Example: {'action': 'PlaceObject', 'args': ['bowl', 'lamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?a)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r ?rt)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holds ?a ?o))\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (inReceptacle ?o ?r)\n            (holds ?a ?o)\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n            (not (inReceptacle ?o ?r))\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"
        ]
    },
    "GoToLocation": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['longtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['blackdrawerunit']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelves']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GoToLocation\n;; Example: {'action': 'GoToLocation', 'args': ['fridge']}\n;; Example: {'action': 'GoToLocation', 'args': ['electriccooker']}\n;; Example: {'action': 'GoToLocation', 'args': ['shelf']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GoToLocation', 'args': ['closet']}\n;; Example: {'action': 'GoToLocation', 'args': ['talllamp']}\n;; Example: {'action': 'GoToLocation', 'args': ['laundryroom']}\n;; Example: {'action': 'GoToLocation', 'args': ['bedroom']}\n;; Example: {'action': 'GoToLocation', 'args': ['countertops']}\n;; Example: {'action': 'GoToLocation', 'args': ['right']}\n;; Example: {'action': 'GoToLocation', 'args': ['countertop']}\n;; Example: {'action': 'GoToLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GoToLocation', 'args': ['toaster']}\n;; Example: {'action': 'GoToLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GoToLocation', 'args': ['lamp']}\n;; Example: {'action': 'GoToLocation', 'args': ['fridge']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['blackstand']}\n;; Example: {'action': 'GoToLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GoToLocation', 'args': ['garbage']}\n;; Example: {'action': 'GoToLocation', 'args': ['garbage']}\n;; Example: {'action': 'GoToLocation', 'args': ['fridge']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['stove']}\n;; Example: {'action': 'GoToLocation', 'args': ['sidetable']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have the location where the agent is currently located and the location where the agent needs to go as parameters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have the target location as a parameter to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To go to a location, we need the agent and the desired location as parameters.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (not (= ?lStart ?lEnd))\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>"
        ]
    },
    "WarmObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['cupboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: WarmObject\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we need to specify both the object and the receptacle that will be used to warm the object (e.g. a microwave).\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we interact with the object to be warmed AND the receptacle that will warm the object (e.g. a microwave). So both must be parameters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we interact with the object to be warmed AND the receptacle that will warm the object (e.g. a microwave). So both must be parameters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we interact with the object to be warmed AND the receptacle that will warm the object (e.g. a microwave). So both must be parameters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we interact with the object to be warmed AND the receptacle that will warm the object (e.g. a microwave). So both must be parameters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "GoToObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GoToObject\n;; Example: {'action': 'GoToObject', 'args': ['lamp']}\n;; Example: {'action': 'GoToObject', 'args': ['tomato']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToObject\n        :parameters (?a - agent ?lStart - location ?o - object ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (objectAtLocation ?o ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToObject\n        :parameters (?a - agent ?lStart - location ?o - object ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (objectAtLocation ?o ?lStart)\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action GoToObject\n        :parameters (?a - agent ?lStart - location ?lEnd - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (objectAtLocation ?o ?lEnd)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToObject\n        :parameters (?a - agent ?lStart - location ?lEnd - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (objectAtLocation ?o ?lEnd)\n            (objectType ?o ?ot)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToObject\n        :parameters (?a - agent ?lStart - location ?lEnd - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (objectAtLocation ?o ?lEnd)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>"
        ]
    },
    "ChillObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['smallblacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['blacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['pantry']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: ChillObject\n;; Example: {'action': 'ChillObject', 'args': ['tomato']}\n;; Example: {'action': 'ChillObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['pot']}\n;; Example: {'action': 'ChillObject', 'args': ['pot']}\n;; Example: {'action': 'ChillObject', 'args': ['lettuce']}\n;; Example: {'action': 'ChillObject', 'args': ['slicedlettuce', 'sinkbasin']}\n;; Example: {'action': 'ChillObject', 'args': ['lettuce', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['slice']}\n;; Example: {'action': 'ChillObject', 'args': ['slice', 'refrigerator']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r FridgeType)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To chill an object, we interact with the object to be chilled AND the receptacle that will chill the object (e.g. a fridge). So both must be parameters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To chill an object, we interact with the object to be chilled AND the receptacle that will chill the object (e.g. a fridge). So both must be parameters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r FridgeType)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To chill an object, we interact with the object to be chilled AND the receptacle where the object will be chilled (e.g. a fridge). So both must be parameters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "GetObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['entertainmentcenter']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['floor']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['smallbrowntable']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GetObject\n;; Example: {'action': 'GetObject', 'args': ['tomato']}\n;; Example: {'action': 'GetObject', 'args': ['ice']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GetObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>"
        ]
    },
    "RinseObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['biglamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['candle']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: RinseObject\n;; Example: {'action': 'RinseObject', 'args': ['knife', 'sink']}\n;; Example: {'action': 'RinseObject', 'args': ['tomato', 'sinkbasin']}\n;; Example: {'action': 'RinseObject', 'args': ['tomato', 'sinkbasin']}\n;; Example: {'action': 'RinseObject', 'args': ['tomato']}\n;; Example: {'action': 'RinseObject', 'args': ['egg', 'sink']}\n;; Example: {'action': 'RinseObject', 'args': ['egg']}\n;; Example: {'action': 'RinseObject', 'args': ['egg']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r SinkBasinType)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?r SinkBasinType)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (isClean ?o))\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n            (cleanable ?o)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?o - object ?r - receptacle)\n        :precondition (and\n            (objectType ?o TomatoType)\n            (receptacleType ?r SinkBasinType)\n            (isDirty ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holdable ?o)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (isDirty ?o))\n        )\n    )\n\n<END>"
        ]
    },
    "ToastObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['desklamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: ToastObject\n;; Example: {'action': 'ToastObject', 'args': ['bread-slice', 'breadtoaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['toast', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['toast', 'toaster']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?toaster - toasterType)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (objectType ?o BreadType)\n            (objectType ?toaster ToasterType)\n            (inReceptacle ?o ?toaster)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r ToasterType)\n            (not (isOn ?r))\n        )\n        :effect (and\n            (isOn ?r)\n            (isHot ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (inReceptacle ?o ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?t - toaster)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o BreadType)\n            (objectType ?t ToasterType)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (isOn ?t)\n            (isHot ?t)\n            (not (isToggled ?t))\n        )\n        :effect (and\n            (isHot ?o)\n            (isSliced ?o)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o BreadType)\n            (holds ?a ?o)\n            (receptacleType ?r ToasterType)\n            (not (holdsAnyReceptacleObject ?a))\n            (not (isHot ?r))\n        )\n        :effect (and\n            (isHot ?r)\n            (isSliced ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r ToasterType)\n            (not (isOn ?r))\n        )\n        :effect (and\n            (isOn ?r)\n            (not (isCool ?o))\n            (isHot ?o)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>"
        ]
    },
    "InspectObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['smallbrowntable']}\n;; Example: {'action': 'GotoLocation', 'args': ['largesink']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: InspectObject\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock', 'desklamp']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock', 'lamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'talllamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'taillamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'lamptable']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'talllamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?m - object ?o - object)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (objectAtLocation ?m ?l)\n            (holds ?a ?m)\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (holds ?a ?o)\n            (not (holds ?a ?m))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object ?ot - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"
        ]
    },
    "TurnOnLamp": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: TurnOnLamp\n;; Example: {'action': 'TurnOnLamp', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnLamp', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnLamp', 'args': []}\n;; Example: {'action': 'TurnOnLamp', 'args': ['lamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator. In this case, we only need the object (lamp) as a parameter.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o LampType)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We only need to specify the agent and the lamp object to be turned on as parameters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (objectType ?o LightSwitchType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLamp\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o LampType)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>\n\n"
        ]
    },
    "CarryObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CarryObject\n;; Example: {'action': 'CarryObject', 'args': ['remote']}\n;; Example: {'action': 'CarryObject', 'args': ['remote']}\n;; Example: {'action': 'CarryObject', 'args': ['remote']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"
        ]
    },
    "ThrowObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cupboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: ThrowObject\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'papertowels']}\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'trashcan']}\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'trashcan']}\n;; Example: {'action': 'ThrowObject', 'args': ['egg', 'trashcan']}\n;; Example: {'action': 'ThrowObject', 'args': ['egg', 'trashcan']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (not (inReceptacle ?o ?r))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (objectAtLocation ?o ?l))\n            (inReceptacle ?o ?r)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>"
        ]
    },
    "TakeObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['bedroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['pillow']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['pan']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: TakeObject\n;; Example: {'action': 'TakeObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'TakeObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'TakeObject', 'args': ['apple', 'knife']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?t)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?t))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (objectType ?o ?ot)\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>"
        ]
    },
    "InvestigateObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['middle']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: InvestigateObject\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (isInvestigated ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To investigate an object, we interact with the object itself. So the object must be a parameter to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have the object that we want to investigate as a parameter to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (objectType ?o CandleType)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n            (isHot ?o)\n            (isCool ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (print (concat \"Investigating object: \" (objectType ?o)))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have the object that we want to investigate as a parameter to the operator.\n(:action InvestigateObject\n    :parameters (?a - agent ?o - object)\n    :precondition (and\n        (objectType ?o CandleType)\n        (holds ?a ?o)\n    )\n    :effect (and\n        (not (holds ?a ?o))\n    )\n)\n\n<END>"
        ]
    },
    "TurnOnLight": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['wallet']}\n;; Example: {'action': 'GotoLocation', 'args': ['stand']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['desklamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['blackstand']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: TurnOnLight\n;; Example: {'action': 'TurnOnLight', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnLight', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnLight', 'args': ['floorlamp']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>"
        ]
    },
    "PutdownObject": {
        "codex_prompt": [
            {
                "role": "user",
                "content": ";;;; Define PDDL planning operators.\n\n"
            },
            {
                "role": "user",
                "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectNotInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['livingroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['spatula']}\n;; Example: {'action': 'CleanObject', 'args': ['plate', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sink']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple', 'sinkbasin']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PickupObjectInReceptacle\n"
            },
            {
                "role": "assistant",
                "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"
            },
            {
                "role": "user",
                "content": ";; Operator: PutdownObject\n;; Example: {'action': 'PutdownObject', 'args': ['pot', 'shelf']}\n;; Example: {'action': 'PutdownObject', 'args': ['mug', 'coffeemaker']}\n"
            }
        ],
        "codex_output": [
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutdownObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutdownObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutdownObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?r ?rt)\n            (inReceptacle ?o ?r)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutdownObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (holdsAnyReceptacleObject ?a)\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>",
            ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutdownObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"
        ]
    }
}