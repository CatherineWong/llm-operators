;; You will be a software engineer who will be writing a plan for a robot acting in a household environment. Your plan will be written as a sequence of imperative functions, each which defines a single action in this environment to achieve a natural language goal. These functions should be written in Python, with respect to the following code API.

;; Possible objects and receptacles types. 
OBJECT_TYPES = ['grater', 'candle', 'showerglass', 'cd', 'tomato', 'mirror', 'scrubbrush', 'mug', 'toaster', 'painting', 'cellphone', 'ladle', 'bread', 'pot', 'book', 'tennisracket', 'butterknife', 'showerdoor', 'keychain', 'baseballbat', 'egg', 'pen', 'fork', 'whisk', 'vase', 'cloth', 'window', 'pencil', 'statue', 'lightswitch', 'watch', 'spatula', 'papertowelroll', 'floorlamp', 'kettle', 'soapbottle', 'boots', 'towel', 'pillow', 'alarmclock', 'potato', 'chair', 'plunger', 'spraybottle', 'handtowel', 'bathtub', 'remotecontrol', 'peppershaker', 'plate', 'basketball', 'desklamp', 'footstool', 'glassbottle', 'papertowel', 'creditcard', 'pan', 'toiletpaper', 'saltshaker', 'poster', 'toiletpaperroll', 'lettuce', 'winebottle', 'knife', 'laundryhamperlid', 'spoon', 'tissuebox', 'bowl', 'box', 'soapbar', 'houseplant', 'newspaper', 'cup', 'dishsponge', 'laptop', 'television', 'stoveknob', 'curtains', 'blinds', 'teddybear', 'apple', 'wateringcan', 'sink']

RECEPTACLE_TYPES = ['armchair', 'bed', 'bathtubbasin', 'dresser', 'safe', 'diningtable', 'sofa', 'handtowelholder', 'stoveburner', 'cart', 'desk', 'coffeemachine', 'microwave', 'toilet', 'countertop', 'garbagecan', 'coffeetable', 'cabinet', 'sinkbasin', 'ottoman', 'toiletpaperhanger', 'towelholder', 'fridge', 'drawer', 'sidetable', 'shelf', 'laundryhamper']

;; Predicates for querying the environment state.
env_state.holds(object_id)
env_state.inReceptacle(object_id, receptacle_id)
env_state.isHot(object_id)
env_state.heatable(object_id)
env_state.isClean(object_id)
env_state.cleanable(object_id)
env_state.isCool(object_id)
env_state.coolable(object_id)
env_state.toggleable(object_id)
env_state.isToggled(object_id)
env_state.sliceable(object_id)
env_state.isSliced(object_id)
env_state.gratable(object_id)
env_state.isGrated(object_id)

;; Actions that can be taken in the object state.
OpenObject = alfred_action_factory(
    name="OpenObject", action_type=AlfredActionType.OpenObject, parameters=["object_id"]
)

CloseObject = alfred_action_factory(
    name="CloseObject",
    action_type=AlfredActionType.CloseObject,
    parameters=["object_id"],
)

PickupObject = alfred_action_factory(
    name="PickupObject",
    action_type=AlfredActionType.PickupObject,
    parameters=["object_id"],
)

PutObject = alfred_action_factory(
    name="PutObject",
    action_type=AlfredActionType.PutObject,
    parameters=["object_id", "receptacle_object_id"],
)

ToggleObjectOn = alfred_action_factory(
    name="ToggleObjectOn",
    action_type=AlfredActionType.ToggleObjectOn,
    parameters=["object_id"],
)

ToggleObjectOff = alfred_action_factory(
    name="ToggleObjectOff",
    action_type=AlfredActionType.ToggleObjectOff,
    parameters=["object_id"],
)

SliceObject = alfred_action_factory(
    name="SliceObject",
    action_type=AlfredActionType.SliceObject,
    parameters=["object_id"],
)

GrateObject = alfred_action_factory(
    name="GrateObject",
    action_type=AlfredActionType.GrateObject,
    parameters=["object_id"],
)

;; Example translations from natural language to a code policy in Python.
;; Notice that code MUST only use predicates, object types, and receptacle types exactly as they appear in the domain above. People may also have been unclear about which objects and actions they were talking about, so consider multiple possible guesses for goal if there is uncertainty over what they meant.
;; Human written natural language goal.
put grated cheese on the countertop.
;; Plan as code policies for "put grated cheese on the countertop."
<START>
[
{
    "action": "PickupObject",
    "argument_names" : ('env_state', 'env', 'object_id'),
    "ground_arguments" : ("env_state", "env", "grater"),
    "body" : 
"""
    # Preconditions: None.

    # Low-level actions: pick up the object.
    try:
        action = PickupObject(args={'object_id':object_id})
        success = act(env=env, action=action)
        print("Successfully picked up an object!")
    except:
        print("Execution failure...")
        return False

    # Postconditions: holding the object.
    final_env_state = perceive(env)
    return (final_env_state.holds(object_id)), final_env_state
"""
},
{
"action": "GrateObject",
"argument_names" : ('env_state', 'env', 'object_id', 'tool_object_id'),
"ground_arguments" : ("env_state", "env", "cheese", "grater"),
"body" : """
    # Preconditions: holding the tool object.
    if (not env_state.holds(tool_object_id)):
        print("Failure, not holding tool.")
        return False, env_state
    # Precondition: object is sliceable.
    if (not env_state.sliceable(object_id)):
        print("Failure, object is not sliceable.")
        return False, env_state

    # Low-level actions: grate the object if you're holding the tool.
    try:
        action = GrateObject(args={'object_id':object_id})
        success = act(env=env, action=action)
        print("Successfully sliced up an object!")
    except:
        print("Execution failure...")
        return False

    # Postconditions: the object is grated.
    final_env_state = perceive(env)
    return (final_env_state.isGrated(object_id)), final_env_state
"""
        }
{
    "action": "PutObjectInReceptacle",
    "argument_names" : ('env_state', 'env', 'object_id', 'receptacle_object_id'),
    "ground_arguments" : ("env_state", "env", "grater", "sidetable"),
    "body" : 
"""
    # Preconditions: we should be holding the object.
    if (not env_state.holds(object_id)):
        print("Failure, not holding object.")
        return False, env_state

    # Low-level actions: put the object in the receptacle.
    try:
        print("Trying to put in receptacle.")
        action = PutObject(args={'object_id':object_id, 'receptacle_object_id':receptacle_object_id})
        success = act(env=env, action=action)
        print("Result of PutObject is: {success}")
    except:
        print("Failure, could not place in receptacle.")
        return False, env_state

    # Postconditions: not holding the object and the object is in the receptacle.
    final_env_state = perceive(env)
    if (not final_env_state.holds(object_id)) and (final_env_state.inReceptacle(object_id, receptacle_object_id)):
        return True, final_env_state
"""
},
{
    "action": "PickupObject",
    "argument_names" : ('env_state', 'env', 'object_id'),
    "ground_arguments" : ("env_state", "env", "cheese"),
    "body" : 
"""
    # Preconditions: None.

    # Low-level actions: pick up the object.
    try:
        action = PickupObject(args={'object_id':object_id})
        success = act(env=env, action=action)
        print("Successfully picked up an object!")
    except:
        print("Execution failure...")
        return False

    # Postconditions: holding the object.
    final_env_state = perceive(env)
    return (final_env_state.holds(object_id)), final_env_state
"""
},
{
    "action": "PutObjectInReceptacle",
    "argument_names" : ('env_state', 'env', 'object_id', 'receptacle_object_id'),
    "ground_arguments" : ("env_state", "env", "cheese", "countertop"),
    "body" : 
"""
    # Preconditions: we should be holding the object.
    if (not env_state.holds(object_id)):
        print("Failure, not holding object.")
        return False, env_state

    # Low-level actions: put the object in the receptacle.
    try:
        print("Trying to put in receptacle.")
        action = PutObject(args={'object_id':object_id, 'receptacle_object_id':receptacle_object_id})
        success = act(env=env, action=action)
        print("Result of PutObject is: {success}")
    except:
        print("Failure, could not place in receptacle.")
        return False, env_state

    # Postconditions: not holding the object and the object is in the receptacle.
    final_env_state = perceive(env)
    if (not final_env_state.holds(object_id)) and (final_env_state.inReceptacle(object_id, receptacle_object_id)):
        return True, final_env_state
"""
}
]
<END>

;; Human written natural language goal.
place a baked, grated apple on top of the dining table.
;; Plan as code policies for "place a baked, grated apple on top of the dining table."
<START>
[
{
    "action": "PickupObject",
    "argument_names" : ('env_state', 'env', 'object_id'),
    "ground_arguments" : ("env_state", "env", "grater"),
    "body" : 
"""
    # Preconditions: None.

    # Low-level actions: pick up the object.
    try:
        action = PickupObject(args={'object_id':object_id})
        success = act(env=env, action=action)
        print("Successfully picked up an object!")
    except:
        print("Execution failure...")
        return False

    # Postconditions: holding the object.
    final_env_state = perceive(env)
    return (final_env_state.holds(object_id)), final_env_state
"""
},
{
"action": "GrateObject",
"argument_names" : ('env_state', 'env', 'object_id', 'tool_object_id'),
"ground_arguments" : ("env_state", "env", "apple", "grater"),
"body" : """
    # Preconditions: holding the tool object.
    if (not env_state.holds(tool_object_id)):
        print("Failure, not holding tool.")
        return False, env_state
    # Precondition: object is sliceable.
    if (not env_state.sliceable(object_id)):
        print("Failure, object is not sliceable.")
        return False, env_state

    # Low-level actions: grate the object if you're holding the tool.
    try:
        action = GrateObject(args={'object_id':object_id})
        success = act(env=env, action=action)
        print("Successfully sliced up an object!")
    except:
        print("Execution failure...")
        return False

    # Postconditions: the object is grated.
    final_env_state = perceive(env)
    return (final_env_state.isGrated(object_id)), final_env_state
"""
        }
{
    "action": "PutObjectInReceptacle",
    "argument_names" : ('env_state', 'env', 'object_id', 'receptacle_object_id'),
    "ground_arguments" : ("env_state", "env", "grater", "diningtable"),
    "body" : 
"""
    # Preconditions: we should be holding the object.
    if (not env_state.holds(object_id)):
        print("Failure, not holding object.")
        return False, env_state

    # Low-level actions: put the object in the receptacle.
    try:
        print("Trying to put in receptacle.")
        action = PutObject(args={'object_id':object_id, 'receptacle_object_id':receptacle_object_id})
        success = act(env=env, action=action)
        print("Result of PutObject is: {success}")
    except:
        print("Failure, could not place in receptacle.")
        return False, env_state

    # Postconditions: not holding the object and the object is in the receptacle.
    final_env_state = perceive(env)
    if (not final_env_state.holds(object_id)) and (final_env_state.inReceptacle(object_id, receptacle_object_id)):
        return True, final_env_state
"""
},
{
    "action": "PickupObject",
    "argument_names" : ('env_state', 'env', 'object_id'),
    "ground_arguments" : ("env_state", "env", "apple"),
    "body" : 
"""
    # Preconditions: None.

    # Low-level actions: pick up the object.
    try:
        action = PickupObject(args={'object_id':object_id})
        success = act(env=env, action=action)
        print("Successfully picked up an object!")
    except:
        print("Execution failure...")
        return False

    # Postconditions: holding the object.
    final_env_state = perceive(env)
    return (final_env_state.holds(object_id)), final_env_state
"""
},
{
"action": "BakeObject",
"argument_names" : ('env_state', 'env', 'object_id', 'receptacle_object_id'),
"ground_arguments" : ("env_state", "env", "apple", "oven"),
"body" : """
    # Preconditions: we should be holding the object.
    if (not env_state.holds(object_id)):
        print("Failure, not holding object.")
        return False, env_state

    # Low-level actions: open the receptacle
    if (not env_state.opened(receptacle_object_id)):
        try:
            action = OpenObject(args={'object_id':receptacle_object_id})
            success = act(env=env, action=action)
            print("Successfully opened up an object!")
        except:
            print("Execution failure...")
            return False

    # Low-level actions: put the object in the receptacle.
    try:
        print("Trying to put in receptacle.")
        action = PutObject(args={'object_id':object_id, 'receptacle_object_id':receptacle_object_id})
        success = act(env=env, action=action)
        print(f"Result of PutObject is: {success}")
    except:
        print("Failure, could not place in receptacle.")
        return False, env_state

    # Low-level actions: close the receptacle
    try:
        action = CloseObject(args={'object_id':receptacle_object_id})
        success = act(env=env, action=action)
        print(f"Result of CloseObject is: {success}")
    except:
        print("Execution failure...")
        return False

    # Low-level actions: open the receptacle again
    if (not env_state.opened(receptacle_object_id)):
        try:
            action = OpenObject(args={'object_id':receptacle_object_id})
            success = act(env=env, action=action)
            print(f"Result of OpenObject is: {success}")
        except:
            print("Execution failure...")
            return False


    # Postconditions: object is hot.
    final_env_state = perceive(env)
    return (final_env_state.isHot(object_id)), final_env_state
"""
},
{
    "action": "PutObjectInReceptacle",
    "argument_names" : ('env_state', 'env', 'object_id', 'receptacle_object_id'),
    "ground_arguments" : ("env_state", "env", "apple", "diningtable"),
    "body" : 
"""
    # Preconditions: we should be holding the object.
    if (not env_state.holds(object_id)):
        print("Failure, not holding object.")
        return False, env_state

    # Low-level actions: put the object in the receptacle.
    try:
        print("Trying to put in receptacle.")
        action = PutObject(args={'object_id':object_id, 'receptacle_object_id':receptacle_object_id})
        success = act(env=env, action=action)
        print("Result of PutObject is: {success}")
    except:
        print("Failure, could not place in receptacle.")
        return False, env_state

    # Postconditions: not holding the object and the object is in the receptacle.
    final_env_state = perceive(env)
    if (not final_env_state.holds(object_id)) and (final_env_state.inReceptacle(object_id, receptacle_object_id)):
        return True, final_env_state
"""
}
]
<END>