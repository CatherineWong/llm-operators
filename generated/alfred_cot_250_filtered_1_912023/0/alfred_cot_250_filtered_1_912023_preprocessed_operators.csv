operator_name,gt_operator,codex_raw_operator,codex_preprocessed_operator,
ToastObject,,"
;; Operator, ToastObject - Option 1
;; ToastObject takes an object to toast and a specific tool of type ToasterType.
;; ToasterType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object to be toasted; ?o - object to be toasted, ?toolobject - object to toast with.
;; Preconditions: The toolobject is a ToasterType, the agent is at a location and the object to be toasted is at the same location, the object is toastable, and the agent is holding the tool.
;; Postconditions: the ?o object is now toasted.
(:action ToastObject1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toastable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isToasted ?o)
        )
    )
",FAILED,
ToastObject,,"
;; Operator, ToastObject - Option 2
;; ToastObject takes an object to toast and the agent uses heat to toast it.
;; Parameters: ?a - agent, ?l - location of the object to be toasted; ?o - object to be toasted.
;; Preconditions: The agent is at a location and the object to be toasted is at the same location, the object is toastable, and the agent knows how to use heat to toast the object.
;; Postconditions: the ?o object is now toasted.
(:action ToastObject2
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toastable ?o)
            (knowsHowToToast ?a)
        )
        :effect (and
            (isToasted ?o)
        )
    )
",FAILED,
ToastObject,,"
;; Operator, ToastObject - Option 3
;; ToastObject takes an object to toast and a specific tool receptacle of type ToasterType.
;; ToasterType is an rtype. Therefore, the tool receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the tool receptacle; ?o - object to be toasted, ?toolreceptacle - tool receptacle to toast with.
;; Preconditions: The toolreceptacle is a ToasterType, the agent is at a location and the tool receptacle is at the same location, the object to be toasted is at a different location, the object is toastable, and the agent knows how to use the tool receptacle to toast the object.
;; Postconditions: the ?o object is now toasted.
(:action ToastObject3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle ToasterType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (objectAtLocation ?o ?l)
            (toastable ?o)
            (knowsHowToUseToasterReceptacle ?a)
        )
        :effect (and
            (isToasted ?o)
        )
    )
",FAILED,
ExamineObject,,"
(:action ExamineObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and)
)
",FAILED,
ExamineObject,,"
(:action ExamineObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MagnifyingGlassType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and)
)
",FAILED,
ExamineObject,,"
(:action ExamineObjectInReceptacle
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (receptacleAtLocation ?r ?l)        
        )
        :effect (and)
)
",FAILED,
TurnOnObject,,"
(:action TurnOnObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject SwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnObject_0
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnObject,,"
(:action TurnOnObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle GasBurnerType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnObject_1
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnObject,,"
(:action TurnOnObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(isOn ?o)
		)
)",
ExamObject,,"
;; Operator, ExamObject - Option 1
;; ExamObject takes an object to examine and a specific tool of type MagnifyingGlassType.
;; MagnifyingGlassType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be examined, ?toolobject - object to examine with.
;; Preconditions: The toolobject is a MagnifyingGlassType, the agent is at a location and the object to be examined is at the same location, the agent is holding the tool.
;; Postconditions: the ?o object is now examined.
(:action ExamObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MagnifyingGlassType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isExamined ?o)
        )
    )
",FAILED,
ExamObject,,"
;; Operator, ExamObject - Option 2
;; ExamObject takes an object to examine and a specific tool of type FlashlightType.
;; FlashlightType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be examined, ?toolobject - object to examine with.
;; Preconditions: The toolobject is a FlashlightType, the agent is at a location and the object to be examined is at the same location, the agent is holding the tool.
;; Postconditions: the ?o object is now examined.
(:action ExamObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject FlashlightType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isExamined ?o)
        )
    )
",FAILED,
ExamObject,,"
;; Operator, ExamObject - Option 3
;; ExamObject takes any object to examine.
;; This action is applicable to any object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be examined.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: the ?o object is now examined.
(:action ExamObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (isExamined ?o)
        )
    )
",FAILED,
CookObject,,"
;; Operator, CookObject 1.
;; CookObject takes an object to cook and a specific tool of type StoveBurnerType.
;; StoveBurnerType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be cooked, ?toolreceptacle - receptacle to cook the object on.
;; Preconditions: The toolreceptacle is a StoveBurnerType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be cooked.
;; Postconditions: the ?o object is now hot and cooked.
(:action CookObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle StoveBurnerType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
           (isCooked ?o)
        )
    )
","(:action CookObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle StoveBurnerType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
;; Operator, CookObject 2.
;; CookObject takes an object to cook and a specific tool of type MicrowaveType.
;; MicrowaveType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be cooked, ?toolreceptacle - receptacle to cook the object in.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be cooked.
;; Postconditions: the ?o object is now hot and cooked.
(:action CookObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
           (isCooked ?o)
        )
    )
","(:action CookObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
;; Operator, CookObject 3.
;; CookObject takes an object to cook and a particular tool object of type PanType.
;; PanType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be cooked, ?toolobject - object to cook the object in.
;; Preconditions: The toolobject is a PanType, the agent is at a location and the object is at the same location, and the agent is holding the object to be cooked.
;; Postconditions: the ?o object is now hot and cooked.
(:action CookObject3
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject PanType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
           (isCooked ?o)
        )
    )
","(:action CookObject_2
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject PanType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CutObject,,"
(:action CutObjectWithObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action CutObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject KnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
CutObject,,"
(:action CutObjectWithReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle CuttingBoardType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action CutObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
CutObject,,"
(:action CutObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action CutObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
TurnOnLamp,,"
;; Operator, TurnOnLamp.
;; TurnOnLamp takes a specific lamp object to turn on.
;; Parameters: ?a - agent, ?l - location of the lamp; ?o - lamp object to be turned on.
;; Preconditions: The agent is at a location and the lamp is at the same location, and the lamp is toggleable and is not already turned on.
;; Postconditions: the ?o lamp object is now turned on.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (not (isOn ?o))
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnLamp_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnLamp,,"
;; Operator, TurnOnLampWithSwitch.
;; TurnOnLampWithSwitch takes a specific lamp object to turn on and a specific switch object.
;; Parameters: ?a - agent, ?l - location of the lamp; ?o - lamp object to be turned on, ?switchobject - switch object to turn on the lamp with.
;; Preconditions: The agent is at a location, the lamp is at the same location, the lamp is toggleable and is not already turned on, and the agent is holding the switch object.
;; Postconditions: the ?o lamp object is now turned on.
(:action TurnOnLampWithSwitch
        :parameters (?a - agent ?l - location ?o - object ?switchobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (not (isOn ?o))
            (holds ?a ?switchobject)
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnLamp_1
        :parameters (?a - agent ?l - location ?o - object ?switchobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(not (isOn ?o))
		(holds ?a ?switchobject)
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnLamp,,"
;; Operator, TurnOnLampWithBulb.
;; TurnOnLampWithBulb takes a specific lamp object to turn on and a specific bulb object.
;; The bulb object needs to be inserted into the lamp receptacle in order to turn the lamp on.
;; Parameters: ?a - agent, ?l - location of the lamp; ?o - lamp object to be turned on, ?bulbobject - bulb object to turn on the lamp with.
;; Preconditions: The agent is at a location, the lamp is at the same location, the lamp is toggleable and is not already turned on, and the agent is holding the bulb object.
;; Postconditions: the ?o lamp object is now turned on.
(:action TurnOnLampWithBulb
        :parameters (?a - agent ?l - location ?o - object ?bulbobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (not (isOn ?o))
            (holds ?a ?bulbobject)
            (inReceptacle ?bulbobject ?o)
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnLamp_2
        :parameters (?a - agent ?l - location ?o - object ?bulbobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(not (isOn ?o))
		(holds ?a ?bulbobject)
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnLight,,"
;; Operator, TurnOnLight.
;; TurnOnLight takes a specific light object.
;; Parameters: ?a - agent, ?l - location of the light; ?o - light object.
;; Preconditions: The agent is at a location and the light object is at the same location, the light object is toggleable, and the agent is holding the light object if it is a handheld light.
;; Postconditions: the ?o light object is now on.
(:action TurnOnLight
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (not (isOn ?o))
            (or
                (not (handheld ?o))
                (and
                    (handheld ?o)
                    (holds ?a ?o)
                )
            )
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnLight_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnLight,,"
;; Operator, TurnOnLamp.
;; TurnOnLamp takes a specific lamp object.
;; Parameters: ?a - agent, ?l - location of the lamp; ?o - lamp object.
;; Preconditions: The agent is at a location and the lamp object is at the same location, the lamp object is toggleable, and the agent is holding the lamp object if it is handheld.
;; Postconditions: the ?o lamp object is now on.
(:action TurnOnLamp
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o LampType)
            (toggleable ?o)
            (not (isOn ?o))
            (or
                (not (handheld ?o))
                (and
                    (handheld ?o)
                    (holds ?a ?o)
                )
            )
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnLight_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		)
)",
TurnOnLight,,"
;; Operator, TurnOnFloorLamp.
;; TurnOnFloorLamp takes a specific floor lamp object.
;; Parameters: ?a - agent, ?l - location of the floor lamp; ?o - floor lamp object.
;; Preconditions: The agent is at a location and the floor lamp object is at the same location, the floor lamp object is toggleable, and the agent is holding the floor lamp object if it is handheld.
;; Postconditions: the ?o floor lamp object is now on.
(:action TurnOnFloorLamp
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o FloorLampType)
            (toggleable ?o)
            (not (isOn ?o))
            (or
                (not (handheld ?o))
                (and
                    (handheld ?o)
                    (holds ?a ?o)
                )
            )
        )
        :effect (and
            (isOn ?o)
        )
    )
","(:action TurnOnLight_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(objectType ?o FloorLampType)
		(toggleable ?o)
		(not (isOn ?o))
		)
        :effect (and 
		(isOn ?o)
		)
)",
RinseObject,,"
;; Operator, RinseObject 1.
;; RinseObject 1 takes any object to rinse, and uses a tool receptacle of type SinkBasinType.
;; Parameters: ?a - agent, ?l - location of the tool receptacle (sink); ?o - object to be rinsed, ?toolreceptacle - tool receptacle to rinse the object with (sink basin).
;; Preconditions: The toolreceptacle is a SinkBasinType, the agent is at a location and the tool receptacle is at the same location, and the agent is holding the object to be rinsed.
;; Postconditions: the ?o object is now clean.
(:action RinseObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isClean ?o)
        )
    )
","(:action RinseObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle SinkBasinType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
RinseObject,,"
;; Operator, RinseObject 2.
;; RinseObject 2 takes any object to rinse, and uses a tool object of type WateringCanType.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be rinsed, ?toolobject - tool object to rinse the object with (watering can).
;; Preconditions: The toolobject is a WateringCanType, the agent is at a location and the object is at the same location, and the agent is holding the tool object to rinse the object.
;; Postconditions: the ?o object is now clean.
(:action RinseObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject WateringCanType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action RinseObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject WateringCanType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isClean ?o)
		)
)",
RinseObject,,"
;; Operator, RinseObject 3.
;; RinseObject 3 takes any object to rinse.
;; This action does not require any tool object or tool receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be rinsed.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: the ?o object is now clean.
(:action RinseObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action RinseObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isClean ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithKnife
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action SliceObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject KnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithUtensil
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject UtensilType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action SliceObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action SliceObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
ThrowObject,,"
(:action ThrowObject
      :parameters (?a - agent ?lStart - location ?o - object ?lEnd - location)
      :precondition (and
          (atLocation ?a ?lStart)
          (objectAtLocation ?o ?lStart)
      )
      :effect (and
          (atLocation ?o ?lEnd)
          (not (atLocation ?o ?lStart))
      )
)
",FAILED,
ThrowObject,,"
(:action ThrowObjectWithTool
      :parameters (?a - agent ?lStart - location ?o - object ?toolobject - object ?lEnd - location)
      :precondition (and
          (objectType ?toolobject ThrowableType)
          (atLocation ?a ?lStart)
          (objectAtLocation ?o ?lStart)
          (holds ?a ?toolobject)
          (holds ?a ?o)
      )
      :effect (and
          (atLocation ?o ?lEnd)
          (not (atLocation ?o ?lStart))
          (not (holds ?a ?o))
          (not (holds ?a ?toolobject))
      )
)
",FAILED,
ThrowObject,,"
(:action ThrowObjectIntoReceptacle
      :parameters (?a - agent ?lStart - location ?o - object ?r - receptacle ?lEnd - location)
      :precondition (and
          (atLocation ?a ?lStart)
          (objectAtLocation ?o ?lStart)
          (receptacleAtLocation ?r ?lEnd)
          (holds ?a ?o)
      )
      :effect (and
          (inReceptacle ?o ?r)
          (not (atLocation ?o ?lStart))
          (not (holds ?a ?o))
      )
)
",FAILED,
ThrowAwayObject,,"
(:action ThrowAwayObject1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (disposable ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowAwayObject,,"
(:action ThrowAwayObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle GarbageCanType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle GarbageCanType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowAwayObject,,"
(:action ThrowAwayObject3
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject TrashBagType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
MicrowaveObject,,"
;; Operator, MicrowaveObject.
;; MicrowaveObject takes an object to microwave and a specific receptacle of type MicrowaveType.
;;  Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be microwaved, ?toolreceptacle - microwave to microwave the object in.
;;  Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be microwaved.
;;  Postconditions: the ?o object is now heated up.
(:action MicrowaveObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHeated ?o)
        )
)
",FAILED,
MicrowaveObject,,"
;; Operator, ReheatObject.
;; ReheatObject takes an object to reheat and a specific receptacle of type MicrowaveType.
;;  Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be reheated, ?toolreceptacle - microwave to reheat the object in.
;;  Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be reheated.
;;  Postconditions: the ?o object is now heated up.
(:action ReheatObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHeated ?o)
        )
)
",FAILED,
MicrowaveObject,,"
;; Operator, WarmUpObject.
;; WarmUpObject takes an object to warm up and a specific receptacle of type MicrowaveType.
;;  Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be warmed up, ?toolreceptacle - microwave to warm up the object in.
;;  Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be warmed up.
;;  Postconditions: the ?o object is now heated up.
(:action WarmUpObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHeated ?o)
        )
)
",FAILED,
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
(:action CoolObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
        )
        :effect (and
            (isCool ?o)
        )
)
","(:action CoolObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
(:action CoolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject IcePackType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isCool ?o)
        )
    )
","(:action CoolObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isCool ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
(:action CoolObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle FridgeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (coolable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )
","(:action CoolObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle FridgeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(coolable ?o)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
(:action HeatObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle StoveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action HeatObject_0
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
(:action HeatObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action HeatObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
(:action HeatObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
(:action CleanObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject SpongeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action CleanObject_0
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isClean ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?toolreceptacle - object)
        :precondition (and
            (objectType ?toolreceptacle DishSpongeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (cleanable ?r)
            (holds ?a ?toolreceptacle)
        )
        :effect (and
            (isClean ?r)
        )
    )
",FAILED,
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
(:action CleanObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action CleanObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject1.
;; OpenObject1 takes a specific object that can be opened.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened.
;; Preconditions: The agent is at a location and the object to be opened is at the same location, and the object is openable.
;; Postconditions: the ?o object is now opened.
(:action OpenObject1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
        )
        :effect (and
            (opened ?o)
        )
 )
",FAILED,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject2.
;; OpenObject2 takes a specific object that can be opened and a specific tool object that can be used to open the object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened; ?toolobject - object used to open the object.
;; Preconditions: The agent is at a location and the object to be opened is at the same location, the object is openable, and the agent is holding the tool object.
;; Postconditions: the ?o object is now opened.
(:action OpenObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (opened ?o)
        )
 )
",FAILED,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject3.
;; OpenObject3 takes a specific object that can be opened and a specific tool receptacle that can be used to open the object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened; ?toolreceptacle - receptacle used to open the object.
;; Preconditions: The agent is at a location and the object to be opened is at the same location, the object is openable, and the agent is holding the tool receptacle.
;; Postconditions: the ?o object is now opened.
(:action OpenObject3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
            (holds ?a ?toolreceptacle)
        )
        :effect (and
            (opened ?o)
        )
 )
",FAILED,
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
(:action CloseObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ScrewdriverType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (closeable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClosed ?o)
        )
    )
",FAILED,
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
(:action CloseObjectWithReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle LidType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (objectAtLocation ?o ?l)
            (closeable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isClosed ?o)
        )
    )
",FAILED,
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
(:action CloseObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (closeable ?o)
        )
        :effect (and
            (isClosed ?o)
        )
    )
",FAILED,
LookAtObject,,"
;; Operator, LookAtObject1.
;; LookAtObject1 takes an object to look at.
;; This action is applicable to all objects.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: The agent is holding the object and the object is now looked at.
(:action LookAtObject1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (holds ?a ?o)
            (isLookedAt ?o)
        )
)
","(:action LookAtObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(holds ?a ?o)
		)
)",
LookAtObject,,"
;; Operator, LookAtObject2.
;; LookAtObject2 takes an object to look at and a specific tool of type MagnifyingGlassType.
;; MagnifyingGlassType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object, ?toolobject - MagnifyingGlassType.
;; Preconditions: The toolobject is a MagnifyingGlassType, the agent is at a location and the object is at the same location, and the agent is holding the tool.
;; Postconditions: The object is now magnified.
(:action LookAtObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MagnifyingGlassType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isMagnified ?o)
        )
)
",FAILED,
LookAtObject,,"
;; Operator, LookAtObject3.
;; LookAtObject3 takes an object to look at and a specific tool receptacle of type TelescopeType.
;; TelescopeType is an rtype. Therefore, the tool receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object, ?toolreceptacle - TelescopeType.
;; Preconditions: The toolreceptacle is a TelescopeType, the agent is at a location and the object is at the same location, and the agent is holding the tool receptacle.
;; Postconditions: The object is now observed using the telescope.
(:action LookAtObject3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle TelescopeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolreceptacle)
        )
        :effect (and
            (isObserved ?o)
        )
)
",FAILED,
LookObject,,"
(:action LookObject1
        :parameters (?a - agent ?l - location ?o - object )
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (not (holdsAny ?a))
            (not (holdsAnyReceptacleObject ?a))
        )
        :effect (and
        )
)
",FAILED,
LookObject,,"
(:action LookObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MagnifyingGlassType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
        )
)
",FAILED,
LookObject,,"
(:action LookObject3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle )
        :precondition (and
            (receptacleType ?toolreceptacle TelescopeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
        )
)
",FAILED,
PlaceObject,,"
(:action PlaceObject
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (receptacleAtLocation ?r ?l)
            (not (atLocation ?r ?l))
        )
        :effect (and
            (inReceptacle ?o ?r)
        )
)
","(:action PlaceObject_0
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(receptacleAtLocation ?r ?l)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		)
)",
PlaceObject,,"
(:action PlaceObject
        :parameters (?a - agent ?l1 - location ?l2 - location ?o - object ?toolobject - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l1)
            (objectAtLocation ?o ?l1)
            (objectAtLocation ?toolobject ?l2)
            (receptacleAtLocation ?r ?l2)
            (not (atLocation ?r ?l2))
            (holds ?a ?toolobject)
        )
        :effect (and
            (inReceptacle ?o ?r)
            (not (holds ?a ?toolobject))
        )
)
",FAILED,
PlaceObject,,"
(:action PlaceObject
        :parameters (?a - agent ?l1 - location ?l2 - location ?o - object ?r - receptacle ?toolreceptacle - receptacle)
        :precondition (and
            (atLocation ?a ?l1)
            (objectAtLocation ?o ?l1)
            (receptacleAtLocation ?toolreceptacle ?l2)
            (receptacleAtLocation ?r ?l2)
            (not (atLocation ?r ?l2))
        )
        :effect (and
            (inReceptacle ?o ?r)
            (not (receptacleAtLocation ?toolreceptacle ?l2))
        )
)
",FAILED,
WashObject,,"
;; Operator, WashObject 1.
;; WashObject takes an object to wash, a specific tool of type WashingMachineType, and a specific receptacle of type WaterSinkBasinType to fill with water.
;; WashingMachineType is an rtype, therefore, the tool is a receptacle. WaterSinkBasinType is also an rtype, therefore, the receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object to be washed; ?o - object to be washed, ?washingmachinereceptacle - receptacle to wash the object in, ?watersinkbasinreceptacle - receptacle to fill with water.
;; Preconditions: The toolreceptacle is a WashingMachineType, the watersinkbasinreceptacle is a WaterSinkBasinType, the agent is at a location and the receptacles are at the same location, the object is washable and the agent is holding the object to be washed.
;; Postconditions: the ?o object is now clean.
(:action WashObject1
        :parameters (?a - agent ?l - location ?o - object ?washingmachinereceptacle - receptacle ?watersinkbasinreceptacle - receptacle)
        :precondition (and
            (receptacleType ?washingmachinereceptacle WashingMachineType)
            (receptacleType ?watersinkbasinreceptacle WaterSinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?washingmachinereceptacle ?l)
            (receptacleAtLocation ?watersinkbasinreceptacle ?l)
            (washable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
",FAILED,
WashObject,,"
;; Operator, WashObject 2.
;; WashObject takes an object to wash and a specific tool of type DishSpongeType.
;; DishSpongeType is an otype, therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object to be washed; ?o - object to be washed, ?toolsponge - object to wash the object with.
;; Preconditions: The toolsponge is a DishSpongeType, the agent is at a location and the object is at the same location, the object is washable and the agent is holding the object to be washed and the agent is holding the toolsponge.
;; Postconditions: the ?o object is now clean.
(:action WashObject2
        :parameters (?a - agent ?l - location ?o - object ?toolsponge - object)
        :precondition (and
            (objectType ?toolsponge DishSpongeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (washable ?o)
            (holds ?a ?o)
            (holds ?a ?toolsponge)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action WashObject_1
        :parameters (?toolsponge - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolsponge DishSpongeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		(holds ?a ?toolsponge)
		)
        :effect (and 
		(isClean ?o)
		)
)",
WashObject,,"
;; Operator, WashObject 3.
;; WashObject takes an object to wash and does not require any tool objects or tool receptacles.
;; Parameters: ?a - agent, ?l - location of the object to be washed; ?o - object to be washed.
;; Preconditions: The agent is at a location and the object is at the same location, the object is washable and the agent is holding the object to be washed.
;; Postconditions: the ?o object is now clean.
(:action WashObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (washable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action WashObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
EmptyObject,,"
;; Operator, EmptyObject.
;; EmptyObject takes any receptacle to empty.
;; This action is applicable to any emptyable receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?r - receptacle to be emptied.
;; Preconditions: The agent is at a location and the receptacle is at the same location, and the receptacle is emptyable.
;; Postconditions: the ?r receptacle is now empty.
(:action EmptyObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (emptyable ?r)
        )
        :effect (and
            (isEmpty ?r)
        )
    )
",FAILED,
EmptyObject,,"
;; Operator, EmptyToolReceptacle.
;; EmptyToolReceptacle takes a tool receptacle to empty.
;; This action is applicable to any emptyable tool receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?r - tool receptacle to be emptied.
;; Preconditions: The agent is at a location and the tool receptacle is at the same location, and the tool receptacle is emptyable.
;; Postconditions: the ?r tool receptacle is now empty.
(:action EmptyToolReceptacle
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (emptyable ?r)
        )
        :effect (and
            (isEmpty ?r)
        )
    )
",FAILED,
EmptyObject,,"
;; Operator, EmptyToolObject.
;; EmptyToolObject takes a tool object to empty.
;; This action is applicable to any emptyable tool object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - tool object to be emptied.
;; Preconditions: The agent is at a location and the tool object is at the same location, and the tool object is emptyable.
;; Postconditions: the ?o tool object is now empty.
(:action EmptyToolObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (emptyable ?o)
        )
        :effect (and
            (isEmpty ?o)
        )
    )
",FAILED,
WarmObject,,"
;; Operator, WarmObject.
;; WarmObject takes any object to warm up.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be warmed up.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is heatable.
;; Postconditions: the ?o object is now hot.
(:action WarmObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action WarmObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
WarmObject,,"
;; Operator, WarmObjectWithTool.
;; WarmObjectWithTool takes any object to warm up and a specific tool of type MicrowaveType.
;; MicrowaveType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the tool receptacle; ?o - object to be warmed up; ?toolreceptacle - receptacle to warm the object in.
;; Preconditions: The toolreceptacle is a MicrowaveType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be warmed up.
;; Postconditions: the ?o object is now hot.
(:action WarmObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action WarmObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
WarmObject,,"
;; Operator, WarmObjectWithToolObject.
;; WarmObjectWithToolObject takes any object to warm up and a specific tool object of type ToasterType.
;; ToasterType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the tool object; ?o - object to be warmed up; ?toolobject - tool to warm the object with.
;; Preconditions: The toolobject is a ToasterType, the agent is at a location and the object to be warmed up is at the same location, the object is heatable, and the agent is holding the tool.
;; Postconditions: the ?o object is now hot.
(:action WarmObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action WarmObject_2
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ChillObject,,"
;; Operator, ChillObject - Option 1
;; ChillObject takes an object to chill and a specific tool of type FridgeType.
;; FridgeType is a receptable type. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be chilled, ?toolreceptacle - receptacle to chill the object in.
;; Preconditions: The toolreceptacle is a FridgeType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be chilled.
;; Postconditions: The ?o object is now cool.
(:action ChillObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle FridgeType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ChillObject,,"
;; Operator, ChillObject - Option 2
;; ChillObject takes an object to chill and a specific object of type IceCubeType.
;; IceCubeType is an object type. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be chilled, ?toolobject - object to chill the object with.
;; Preconditions: The toolobject is an IceCubeType, the agent is at a location and the object to be chilled is at the same location.
;; Postconditions: The ?o object is now cool.
(:action ChillObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject IceCubeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ChillObject,,"
;; Operator, ChillObject - Option 3
;; ChillObject takes an object to chill.
;; This action does not require any tool objects or tool receptacles.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be chilled.
;; Preconditions: The agent is at a location and the object to be chilled is at the same location.
;; Postconditions: The ?o object is now cool.
(:action ChillObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isCool ?o)
		)
)",
DropObject,,"
;; Operator, DropObject - Option 1.
;; DropObject takes any object to drop into any empty receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to drop, ?r - empty receptacle.
;; Preconditions: The agent is at a location and the receptacle is at the same location, the agent is holding the object to drop, and the receptacle is empty.
;; Postconditions: The ?o object is now in the ?r receptacle.
(:action DropObjectOption1
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
            (empty ?r)
        )
        :effect (and
            (inReceptacle ?o ?r)
        )
    )
","(:action DropObject_0
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		)
)",
DropObject,,"
;; Operator, DropObject - Option 2.
;; DropObject takes any object to drop into any openable and empty receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to drop, ?r - openable and empty receptacle.
;; Preconditions: The agent is at a location and the receptacle is at the same location, the agent is holding the object to drop, the receptacle is openable, and the receptacle is empty.
;; Postconditions: The ?o object is now in the ?r receptacle.
(:action DropObjectOption2
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
            (openable ?r)
            (empty ?r)
        )
        :effect (and
            (inReceptacle ?o ?r)
        )
    )
","(:action DropObject_1
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		(openable ?r)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		)
)",
DropObject,,"
;; Operator, DropObject - Option 3.
;; DropObject takes any object to drop into any empty and cleanable receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to drop, ?r - empty and cleanable receptacle.
;; Preconditions: The agent is at a location and the receptacle is at the same location, the agent is holding the object to drop, the receptacle is cleanable, and the receptacle is empty.
;; Postconditions: The ?o object is now in the ?r receptacle.
(:action DropObjectOption3
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
            (cleanable ?r)
            (empty ?r)
        )
        :effect (and
            (inReceptacle ?o ?r)
        )
    )
","(:action DropObject_2
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(inReceptacle ?o ?r)
		)
)",
TurnOffObject,,"
(:action TurnOffObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (isOn ?o)
        )
        :effect (and
            (not (isOn ?o))
            (not (isToggled ?o))
        )
)
","(:action TurnOffObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(isOn ?o)
		)
        :effect (and 
		(not (isOn ?o))
		(not (isToggled ?o))
		)
)",
TurnOffObject,,"
(:action TurnOffObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject SwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (isOn ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (isOn ?o))
            (not (isToggled ?o))
        )
)
","(:action TurnOffObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(isOn ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (isOn ?o))
		(not (isToggled ?o))
		)
)",
TurnOffObject,,"
(:action TurnOffReceptacle
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (toggleable ?r)
            (isOn ?r)
        )
        :effect (and
            (not (isOn ?r))
            (not (isToggled ?r))
        )
)
",FAILED,
InspectObject,,"
(:action InspectForDamage
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
    )
    :effect (and
        (isDamaged ?o)
    )
)
",FAILED,
InspectObject,,"
(:action InspectContents
    :parameters (?a - agent ?l - location ?r - receptacle)
    :precondition (and
        (atLocation ?a ?l)
        (receptacleAtLocation ?r ?l)
        (openable ?r)
        (opened ?r)
    )
    :effect (and
        (hasContents ?r)
    )
)
",FAILED,
InspectObject,,"
(:action InspectCleanliness
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (cleanable ?o)
        (isClean ?o)
    )
    :effect (and
        (isClean ?o)
    )
)
","(:action InspectObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(isClean ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
GoToObject,,"
(:action GoToObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ScrubBrushType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (holds ?a ?o)
            (isClean ?o)
        )
    )
","(:action GoToObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ScrubBrushType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(holds ?a ?o)
		(isClean ?o)
		)
)",
GoToObject,,"
(:action GoToObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle CoffeeMachineType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action GoToObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle CoffeeMachineType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
GoToObject,,"
(:action GoToObject_3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (holds ?a ?o)
        )
    )
","(:action GoToObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(holds ?a ?o)
		)
)",
