{"('craft-bowl1_0', '(:action craft-bowl1_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-bowl1_1', '(:action craft-bowl1_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-bowl1_2', '(:action craft-bowl1_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-stick1_0', '(:action craft-stick1_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Stick)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Stick)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Stick))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-stick1_1', '(:action craft-stick1_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Stick)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Wood))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-stick1_2', '(:action craft-stick1_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Stick)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Wood))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-stick_0', '(:action craft-stick_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 WoodPlank)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Stick)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 WoodPlank))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-stick_1', '(:action craft-stick_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Stick)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-stick_2', '(:action craft-stick_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Stick)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [9.1, 9.1], "('chop_0', '(:action chop_0\\n        :parameters (?t - tile ?x - object ?i - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(inventory-empty ?i)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (object-at ?x ?t))\\n\\t\\t(inventory-holding ?i ?x)\\n\\t\\t(not (inventory-empty ?i))\\n\\t\\t(object-of-type ?x Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('chop_1', '(:action chop_1\\n        :parameters (?t - tile ?i - inventory ?x - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(inventory-holding ?i ?x)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(object-of-type ?x Wood)\\n\\t\\t(not (object-of-type ?x Tree))\\n\\t\\t(not (inventory-holding ?i ?x))\\n\\t\\t)\\n)')": [0.1, 0.1], "('chop_2', '(:action chop_2\\n        :parameters (?t - tile ?x - object ?i - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-empty ?i)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(object-of-type ?x Wood)\\n\\t\\t(not (object-of-type ?x Tree))\\n\\t\\t(not (inventory-empty ?i))\\n\\t\\t(inventory-holding ?i ?x)\\n\\t\\t(not (object-at ?x ?t))\\n\\t\\t)\\n)')": [0.1, 0.1], "('organize_1', '(:action organize_1\\n        :parameters (?t - tile ?station - object ?object1 - object ?object2 - object ?object3 - object ?object4 - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(object-of-type ?object1 Hypothetical)\\n\\t\\t(object-of-type ?object2 Hypothetical)\\n\\t\\t(object-of-type ?object3 Hypothetical)\\n\\t\\t(object-of-type ?object4 Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (object-of-type ?object1 Hypothetical))\\n\\t\\t(not (object-of-type ?object2 Hypothetical))\\n\\t\\t(not (object-of-type ?object3 Hypothetical))\\n\\t\\t(not (object-of-type ?object4 Hypothetical))\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-iron-ingot_0', '(:action craft-iron-ingot_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-iron-ingot_1', '(:action craft-iron-ingot_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-iron-ingot_2', '(:action craft-iron-ingot_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?ingredientinv3 - inventory ?target - object ?targetinv - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?ingredientinv3)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt_0', '(:action smelt_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt_1', '(:action smelt_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron-ore_0', '(:action smelt-iron-ore_0\\n        :parameters (?t - tile ?station - object ?oreinv - inventory ?ore - object ?fuelinv - inventory ?fuel - object ?productinv - inventory ?product - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?oreinv ?ore)\\n\\t\\t(object-of-type ?ore IronOre)\\n\\t\\t(inventory-holding ?fuelinv ?fuel)\\n\\t\\t(object-of-type ?fuel Coal)\\n\\t\\t(inventory-empty ?productinv)\\n\\t\\t(object-of-type ?product Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?productinv))\\n\\t\\t(inventory-holding ?productinv ?product)\\n\\t\\t(not (object-of-type ?product Hypothetical))\\n\\t\\t(object-of-type ?product IronIngot)\\n\\t\\t(not (inventory-holding ?oreinv ?ore))\\n\\t\\t(inventory-empty ?oreinv)\\n\\t\\t(not (object-of-type ?ore IronOre))\\n\\t\\t(object-of-type ?ore Hypothetical)\\n\\t\\t(not (inventory-holding ?fuelinv ?fuel))\\n\\t\\t(inventory-empty ?fuelinv)\\n\\t\\t(not (object-of-type ?fuel Coal))\\n\\t\\t(object-of-type ?fuel Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron-ore_1', '(:action smelt-iron-ore_1\\n        :parameters (?t - tile ?station - object ?oreinv - inventory ?ore - object ?fuelinv - inventory ?fuel - object ?ingotinv - inventory ?ingot - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?oreinv ?ore)\\n\\t\\t(object-of-type ?ore IronOre)\\n\\t\\t(inventory-holding ?fuelinv ?fuel)\\n\\t\\t(object-of-type ?fuel Coal)\\n\\t\\t(inventory-empty ?ingotinv)\\n\\t\\t(object-of-type ?ingot Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?ingotinv))\\n\\t\\t(inventory-holding ?ingotinv ?ingot)\\n\\t\\t(not (object-of-type ?ingot Hypothetical))\\n\\t\\t(object-of-type ?ingot IronIngot)\\n\\t\\t(not (inventory-holding ?oreinv ?ore))\\n\\t\\t(inventory-empty ?oreinv)\\n\\t\\t(not (object-of-type ?ore IronOre))\\n\\t\\t(object-of-type ?ore Hypothetical)\\n\\t\\t(not (inventory-holding ?fuelinv ?fuel))\\n\\t\\t(inventory-empty ?fuelinv)\\n\\t\\t(not (object-of-type ?fuel Coal))\\n\\t\\t(object-of-type ?fuel Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron-ore_2', '(:action smelt-iron-ore_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-gold-ingot_2', '(:action craft-gold-ingot_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 GoldOre)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 GoldOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-paper_0', '(:action craft-paper_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 SugarCane)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Paper)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 SugarCane))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-paper_1', '(:action craft-paper_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station ToolStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 SugarCane)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Paper)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 SugarCane))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-paper_2', '(:action craft-paper_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Paper)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-wood-plank1_0', '(:action craft-wood-plank1_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target WoodPlank)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-wood-plank1_1', '(:action craft-wood-plank1_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target WoodPlank)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-wood-plank1_2', '(:action craft-wood-plank1_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object ?ingredientinv2 - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target WoodPlank)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-empty ?ingredientinv2))\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-boat_0', '(:action craft-boat_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station BoatStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Boat)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Wood))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-boat_1', '(:action craft-boat_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station BoatStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Boat)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Hypothetical))\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-boat_2', '(:action craft-boat_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station BoatStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Stick)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Boat)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Stick))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-o-ore_0', '(:action mine-o-ore_0\\n        :parameters (?t - tile ?station - object ?i - inventory ?ore - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-empty ?i)\\n\\t\\t(object-at ?ore ?t)\\n\\t\\t(object-of-type ?ore IronOreVein)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (object-at ?ore ?t))\\n\\t\\t(inventory-holding ?i ?ore)\\n\\t\\t(object-of-type ?ore Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-o-ore_1', '(:action mine-o-ore_1\\n        :parameters (?t - tile ?ore - object ?i - inventory ?tool - object ?resultinv - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?ore ?t)\\n\\t\\t(object-of-type ?ore IronOreVein)\\n\\t\\t(inventory-holding ?i ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?resultinv)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (object-at ?ore ?t))\\n\\t\\t(inventory-holding ?resultinv ?ore)\\n\\t\\t(not (inventory-empty ?resultinv))\\n\\t\\t(not (inventory-holding ?i ?tool))\\n\\t\\t(inventory-empty ?i)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-o-ore_2', '(:action mine-o-ore_2\\n        :parameters (?t - tile ?ore1 - object ?i - inventory ?ore2 - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?ore1 ?t)\\n\\t\\t(object-of-type ?ore1 IronOreVein)\\n\\t\\t(inventory-empty ?i)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (object-at ?ore1 ?t))\\n\\t\\t(inventory-holding ?i ?ore2)\\n\\t\\t(not (object-of-type ?ore2 IronOre))\\n\\t\\t(object-of-type ?ore2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-cooked-potato_0', '(:action craft-cooked-potato_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?ingredientinv3 - inventory ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Potato)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Bowl)\\n\\t\\t(inventory-empty ?ingredientinv3)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?ingredientinv3))\\n\\t\\t(inventory-holding ?ingredientinv3 ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target CookedPotato)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Potato))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Bowl))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-cooked-potato_2', '(:action craft-cooked-potato_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Potato)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target CookedPotato)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Potato))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-shears_0', '(:action craft-shears_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station ToolStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronIngot)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Stick)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Shears)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronIngot))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Stick))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-shears_1', '(:action craft-shears_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station ToolStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronIngot)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Stick)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Shears)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronIngot))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Stick))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-shears_2', '(:action craft-shears_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station ToolStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronIngot)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Shears)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronIngot))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [4.1, 4.1], "('craft-bowl2_0', '(:action craft-bowl2_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Stick)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Stick))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-bowl2_1', '(:action craft-bowl2_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 WoodPlank)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 WoodPlank))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [10.1, 10.1], "('craft-bowl2_2', '(:action craft-bowl2_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 WoodPlank)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 WoodPlank)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 WoodPlank))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 WoodPlank))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('cook_1', '(:action cook_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Hypothetical))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('cook-potato_0', '(:action cook-potato_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?target - object ?targetinv - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Potato)\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target CookedPotato)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Potato))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('cook-potato_1', '(:action cook-potato_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Potato)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Stick)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target CookedPotato)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Potato))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Stick))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron-ingot_0', '(:action smelt-iron-ingot_0\\n        :parameters (?t - tile ?station - object ?oreinv - inventory ?ore - object ?fuelinv - inventory ?fuel - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?oreinv ?ore)\\n\\t\\t(object-of-type ?ore IronOre)\\n\\t\\t(inventory-holding ?fuelinv ?fuel)\\n\\t\\t(object-of-type ?fuel Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?oreinv ?ore))\\n\\t\\t(inventory-empty ?oreinv)\\n\\t\\t(not (object-of-type ?ore IronOre))\\n\\t\\t(object-of-type ?ore Hypothetical)\\n\\t\\t(not (inventory-holding ?fuelinv ?fuel))\\n\\t\\t(inventory-empty ?fuelinv)\\n\\t\\t(not (object-of-type ?fuel Coal))\\n\\t\\t(object-of-type ?fuel Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron-ingot_1', '(:action smelt-iron-ingot_1\\n        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?target - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv ?ingredient)\\n\\t\\t(object-of-type ?ingredient IronOre)\\n\\t\\t(inventory-empty ?target)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?target))\\n\\t\\t(not (inventory-holding ?ingredientinv ?ingredient))\\n\\t\\t(inventory-empty ?ingredientinv)\\n\\t\\t(not (object-of-type ?ingredient IronOre))\\n\\t\\t(object-of-type ?ingredient Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron-ingot_2', '(:action smelt-iron-ingot_2\\n        :parameters (?t - tile ?ingredientinv1 - inventory ?ingredient - object ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient)\\n\\t\\t(object-of-type ?ingredient IronOre)\\n\\t\\t(not (object-of-type ?ingredient Hypothetical))\\n\\t\\t(object-at ?target ?t)\\n\\t\\t(object-of-type ?target Furnace)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient))\\n\\t\\t(not (object-of-type ?ingredient IronOre))\\n\\t\\t(object-of-type ?ingredient Hypothetical)\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron_0', '(:action smelt-iron_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-iron_1', '(:action smelt-iron_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 IronOre)\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-gold-ore_0', '(:action smelt-gold-ore_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 GoldOre)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 GoldOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-gold-ore_1', '(:action smelt-gold-ore_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?sourceinv - inventory ?source - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 GoldOre)\\n\\t\\t(inventory-holding ?sourceinv ?source)\\n\\t\\t(object-of-type ?source Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 GoldOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?sourceinv ?source))\\n\\t\\t(inventory-empty ?sourceinv)\\n\\t\\t(not (object-of-type ?source Coal))\\n\\t\\t(object-of-type ?source Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-gold-ore_2', '(:action smelt-gold-ore_2\\n        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?oreinv - inventory ?ore - object ?resultinv - inventory ?result - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv ?ingredient)\\n\\t\\t(object-of-type ?ingredient GoldIngot)\\n\\t\\t(inventory-holding ?oreinv ?ore)\\n\\t\\t(object-of-type ?ore GoldOre)\\n\\t\\t(inventory-empty ?resultinv)\\n\\t\\t(object-of-type ?result Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?resultinv))\\n\\t\\t(inventory-holding ?resultinv ?result)\\n\\t\\t(not (object-of-type ?result Hypothetical))\\n\\t\\t(object-of-type ?result GoldIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv ?ingredient))\\n\\t\\t(inventory-empty ?ingredientinv)\\n\\t\\t(not (object-of-type ?ingredient GoldIngot))\\n\\t\\t(object-of-type ?ingredient Hypothetical)\\n\\t\\t(not (inventory-holding ?oreinv ?ore))\\n\\t\\t(inventory-empty ?oreinv)\\n\\t\\t(not (object-of-type ?ore GoldOre))\\n\\t\\t(object-of-type ?ore Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-gold_0', '(:action smelt-gold_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 GoldOre)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 GoldOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-bowl_0', '(:action craft-bowl_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-bowl_1', '(:action craft-bowl_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Wood)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Wood))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('craft-bowl_2', '(:action craft-bowl_2\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?target - object ?targetinv - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station WorkStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?target)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Bowl)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?target))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-item_0', '(:action smelt-item_0\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Coal)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 IronOre)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Coal))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 IronOre))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-item_1', '(:action smelt-item_1\\n        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?target - object ?targetinv - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient1 Coal)\\n\\t\\t(object-of-type ?ingredient2 IronOre)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient1 Coal))\\n\\t\\t(not (object-of-type ?ingredient2 IronOre))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-item_2', '(:action smelt-item_2\\n        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?fuelinv - inventory ?fuel - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?ingredientinv ?ingredient)\\n\\t\\t(inventory-holding ?fuelinv ?fuel)\\n\\t\\t(object-of-type ?ingredient IronOre)\\n\\t\\t(object-of-type ?fuel Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target IronIngot)\\n\\t\\t(not (inventory-holding ?ingredientinv ?ingredient))\\n\\t\\t(not (inventory-holding ?fuelinv ?fuel))\\n\\t\\t(inventory-empty ?ingredientinv)\\n\\t\\t(inventory-empty ?fuelinv)\\n\\t\\t(not (object-of-type ?ingredient IronOre))\\n\\t\\t(not (object-of-type ?fuel Coal))\\n\\t\\t(object-of-type ?ingredient Hypothetical)\\n\\t\\t(object-of-type ?fuel Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('cook-item_0', '(:action cook-item_0\\n        :parameters (?t - tile ?station1 - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station1 ?t)\\n\\t\\t(object-of-type ?station1 FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv1 ?ingredient1)\\n\\t\\t(object-of-type ?ingredient1 Potato)\\n\\t\\t(inventory-holding ?ingredientinv2 ?ingredient2)\\n\\t\\t(object-of-type ?ingredient2 Coal)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target CookedPotato)\\n\\t\\t(not (inventory-holding ?ingredientinv1 ?ingredient1))\\n\\t\\t(inventory-empty ?ingredientinv1)\\n\\t\\t(not (object-of-type ?ingredient1 Potato))\\n\\t\\t(object-of-type ?ingredient1 Hypothetical)\\n\\t\\t(not (inventory-holding ?ingredientinv2 ?ingredient2))\\n\\t\\t(inventory-empty ?ingredientinv2)\\n\\t\\t(not (object-of-type ?ingredient2 Coal))\\n\\t\\t(object-of-type ?ingredient2 Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('cook-item_2', '(:action cook-item_2\\n        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?resultinv - inventory ?result - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station FoodStation)\\n\\t\\t(inventory-holding ?ingredientinv ?ingredient)\\n\\t\\t(object-of-type ?ingredient Potato)\\n\\t\\t(inventory-empty ?resultinv)\\n\\t\\t(object-of-type ?result Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?resultinv))\\n\\t\\t(inventory-holding ?resultinv ?result)\\n\\t\\t(not (object-of-type ?result Hypothetical))\\n\\t\\t(object-of-type ?result CookedPotato)\\n\\t\\t(not (inventory-holding ?ingredientinv ?ingredient))\\n\\t\\t(inventory-empty ?ingredientinv)\\n\\t\\t(not (object-of-type ?ingredient Potato))\\n\\t\\t(object-of-type ?ingredient Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('smelt-gold-ingot_1', '(:action smelt-gold-ingot_1\\n        :parameters (?t - tile ?station - object ?coalinv - inventory ?coal - object ?goldinv - inventory ?gold - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?station ?t)\\n\\t\\t(object-of-type ?station Furnace)\\n\\t\\t(inventory-holding ?coalinv ?coal)\\n\\t\\t(object-of-type ?coal Coal)\\n\\t\\t(inventory-holding ?goldinv ?gold)\\n\\t\\t(object-of-type ?gold GoldOre)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldIngot)\\n\\t\\t(not (inventory-holding ?coalinv ?coal))\\n\\t\\t(inventory-empty ?coalinv)\\n\\t\\t(not (object-of-type ?coal Coal))\\n\\t\\t(object-of-type ?coal Hypothetical)\\n\\t\\t(not (inventory-holding ?goldinv ?gold))\\n\\t\\t(inventory-empty ?goldinv)\\n\\t\\t(not (object-of-type ?gold GoldOre))\\n\\t\\t(object-of-type ?gold Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-to', '(:action move-to\\n  :parameters (?t1 - tile ?t2 - tile)\\n  :precondition (and (agent-at ?t1))\\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\\n )')": [93.1, 93.1], "('pick-up', '(:action pick-up\\n  :parameters (?i - inventory ?x - object ?t - tile)\\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\\n )')": [56.1, 56.1], "('craft-wood-plank', '(:action craft-wood-plank\\n  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)\\n  :precondition (and\\n    (agent-at ?t)\\n    (object-at ?station ?t)\\n    (object-of-type ?station WorkStation)\\n    (inventory-holding ?ingredientinv1 ?ingredient1)\\n    (object-of-type ?ingredient1 Wood)\\n    (inventory-empty ?targetinv)\\n    (object-of-type ?target Hypothetical)\\n  )\\n  :effect (and\\n    (not (inventory-empty ?targetinv))\\n    (inventory-holding ?targetinv ?target)\\n    (not (object-of-type ?target Hypothetical))\\n    (object-of-type ?target WoodPlank)\\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\\n    (inventory-empty ?ingredientinv1)\\n    (not (object-of-type ?ingredient1 Wood))\\n    (object-of-type ?ingredient1 Hypothetical)\\n  )\\n )')": [9.1, 9.1], "('craft-arrow', '(:action craft-arrow\\n  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)\\n  :precondition (and\\n    (agent-at ?t)\\n    (object-at ?station ?t)\\n    (object-of-type ?station WeaponStation)\\n    (inventory-holding ?ingredientinv1 ?ingredient1)\\n    (object-of-type ?ingredient1 Stick)\\n    (inventory-holding ?ingredientinv2 ?ingredient2)\\n    (object-of-type ?ingredient2 Feather)\\n    (inventory-empty ?targetinv)\\n    (object-of-type ?target Hypothetical)\\n  )\\n  :effect (and\\n    (not (inventory-empty ?targetinv))\\n    (inventory-holding ?targetinv ?target)\\n    (not (object-of-type ?target Hypothetical))\\n    (object-of-type ?target Arrow)\\n    (not (inventory-holding ?ingredientinv1 ?ingredient1))\\n    (inventory-empty ?ingredientinv1)\\n    (not (object-of-type ?ingredient1 Stick))\\n    (object-of-type ?ingredient1 Hypothetical)\\n    (not (inventory-holding ?ingredientinv2 ?ingredient2))\\n    (inventory-empty ?ingredientinv2)\\n    (not (object-of-type ?ingredient2 Feather))\\n    (object-of-type ?ingredient2 Hypothetical)\\n  )\\n )')": [12.1, 12.1]}