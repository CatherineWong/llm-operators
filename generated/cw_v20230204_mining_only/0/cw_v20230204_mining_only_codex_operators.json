{"mine-wood": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wood\n;; Example: {'action': 'mine-wood', 'args': ['i1', 'i3', 'o4', 'o12', 'o17', 't6']}\n(:action mine-wood", "codex_output": ["(:action mine-wood\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Tree)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Axe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wood)\n  )\n )\n"]}, "mine-wool1": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-wool1\n;; Example: {'action': 'mine-wool1', 'args': ['i1', 'i3', 'o6', 'o14', 'o17', 't8']}\n(:action mine-wool1", "codex_output": ["(:action mine-wool1\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x Sheep)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n  )\n )\n"]}, "mine-potato": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-potato\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i3', 'o1', 'o2', 'o6', 't2']}\n;; Example: {'action': 'mine-potato', 'args': ['i1', 'i7', 'o1', 'o11', 'o8', 'o17', 'o16', 'o18', 'o19', 't7']}\n(:action mine-potato", "codex_output": ["(:action mine-potato\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x PotatoPlant)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Hoe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Potato)\n  )\n )\n"]}, "mine-sugar-cane": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-sugar-cane\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'i4', 'o4', 't10']}\n;; Example: {'action': 'mine-sugar-cane', 'args': ['i1', 'p3', 'p10', 'p22', 't3']}\n(:action mine-sugar-cane", "codex_output": ["(:action mine-sugar-cane\n  :parameters (?toolinv - inventory ?targetinv - inventory ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Axe)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target SugarCane)\n  )\n )\n"]}, "mine-wool2": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-wool2\n;; Example: {'action': 'mine-wool2', 'args': ['i1', 'i3', 'o14', 'o16', 't8']}\n(:action mine-wool2", "codex_output": ["(:action mine-wool2\n  :parameters (?inv - inventory ?inv2 - inventory ?tool - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (inventory-holding ?inv ?tool)\n    (object-of-type ?tool Shears)\n    (inventory-empty ?inv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?inv2))\n    (inventory-holding ?inv2 ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target Wool)\n  )\n )\n"]}, "fit-boat": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: fit-boat\n;; Example: {'action': 'fit-boat', 'args': ['o13', 'o13', 'o13', 'o13', 'o13', 'o13', 'o7']}\n(:action fit-boat", "codex_output": ["(:action fit-boat\n  :parameters (?x - object ?x1 - object ?x2 - object ?x3 - object ?x4 - object ?x5 - object ?x6 - object)\n  :precondition (and (object-of-type ?x BoatStation) (object-of-type ?x1 Cobblestone) (object-of-type ?x2 Cobblestone) (object-of-type ?x3 Cobblestone) (object-of-type ?x4 Cobblestone) (object-of-type ?x5 Cobblestone) (object-of-type ?x6 Cobblestone))\n  :effect (and (object-of-type ?x Boat))\n )\n"]}, "float-boat": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: float-boat\n;; Example: {'action': 'float-boat', 'args': ['']}\n(:action float-boat", "codex_output": ["(:action float-boat\n  :parameters ()\n  :precondition ()\n  :effect ()\n )\n"]}, "come-ashore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: come-ashore\n;; Example: {'action': 'come-ashore', 'args': ['']}\n(:action come-ashore", "codex_output": ["(:action come-ashore\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-up ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n"]}, "mine-sugar": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': []}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: mine-sugar\n;; Example: {'action': 'mine-sugar', 'args': ['i1', 'i7', 'o17', 'o9']}\n(:action mine-sugar", "codex_output": ["(:action mine-sugar\n  :parameters (?targetinv - inventory ?toolinv - inventory ?target - object ?tool - object ?t - tile)\n  :precondition (and\n    (inventory-empty ?targetinv)\n    (inventory-holding ?toolinv ?tool)\n    (agent-at ?t)\n    (object-at ?tool ?t)\n    (object-of-type ?tool Shears)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and (inventory-holding ?targetinv ?target)\n               (object-of-type ?target SugarCane)\n               (not (object-of-type ?target Hypothetical))\n  )\n )\n"]}, "mine-gold-ore": {"codex_prompt": ";;;; Define PDDL planning operators.\n\n;;;; Predicates in the PDDL domain definition.\n(:requirements :strips)\n\n (:constants\n  Key - object-type\n  WorkStation - object-type\n  Pickaxe - object-type\n  IronOreVein - object-type\n  IronOre - object-type\n  IronIngot - object-type\n  CoalOreVein - object-type\n  Coal - object-type\n  GoldOreVein - object-type\n  GoldOre - object-type\n  GoldIngot - object-type\n  CobblestoneStash - object-type\n  Cobblestone - object-type\n  Axe - object-type\n  Tree - object-type\n  Wood - object-type\n  WoodPlank - object-type\n  Stick - object-type\n  WeaponStation - object-type\n  Sword - object-type\n  Chicken - object-type\n  Feather - object-type\n  Arrow - object-type\n  ToolStation - object-type\n  Shears - object-type\n  Sheep - object-type\n  Wool - object-type\n  Bed - object-type\n  BedStation - object-type\n  BoatStation - object-type\n  Boat - object-type\n  SugarCanePlant - object-type\n  SugarCane - object-type\n  Paper - object-type\n  Furnace - object-type\n  FoodStation - object-type\n  Bowl - object-type\n  PotatoPlant - object-type\n  Potato - object-type\n  CookedPotato - object-type\n  BeetrootCrop - object-type\n  Beetroot - object-type\n  BeetrootSoup - object-type\n\n  Hypothetical - object-type\n  Trash - object-type\n )\n\n(:types\n   tile\n   object\n   inventory\n   object-type\n )\n(:predicates\n   (tile-up ?t1 - tile ?t2 - tile)  \n   (tile-down ?t1 - tile ?t2 - tile)  \n   (tile-left ?t1 - tile ?t2 - tile)  \n   (tile-right ?t1 - tile ?t2 - tile)  \n\n   (agent-at ?t - tile)\n   (object-at ?x - object ?t - tile)\n   (inventory-holding ?i - inventory ?x - object)\n   (inventory-empty ?i - inventory)\n\n   (object-of-type ?x - object ?ot - object-type)\n )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n;; Operator: mine-iron-ore\n;; Example: {'action': 'mine-iron-ore', 'args': ['i1', 'i3', 'o1', 'o11', 'o17', 't11']}\n(:action mine-iron-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x IronOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target IronOre)\n  )\n )\n\n<END>\n\n;; Operator: pick-up\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o13', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't12']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o16', 't10']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o6', 't2']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'p3', 't3']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o14', 't8']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o8', 'i7', 'o16', 'o18', 'o19', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o12', 't7']}\n;; Example: {'action': 'pick-up', 'args': ['i1', 'o11', 't13']}\n(:action pick-up\n  :parameters (?i - inventory ?x - object ?t - tile)\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\n )\n\n<END>\n\n;; Operator: move-right\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': ['']}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': []}\n;; Example: {'action': 'move-right', 'args': ['']}\n(:action move-right\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-right ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: move-left\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': ['']}\n;; Example: {'action': 'move-left', 'args': []}\n;; Example: {'action': 'move-left', 'args': ['']}\n(:action move-left\n  :parameters (?t1 - tile ?t2 - tile)\n  :precondition (and (agent-at ?t1) (tile-left ?t1 ?t2))\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\n )\n\n<END>\n\n;; Operator: mine-gold-ore\n;; Example: {'action': 'mine-gold-ore', 'args': ['i1', 'i3', 'o3', 'o11', 'o17', 't11']}\n(:action mine-gold-ore", "codex_output": ["(:action mine-gold-ore\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\n  :precondition (and\n    (agent-at ?t)\n    (object-at ?x ?t)\n    (object-of-type ?x GoldOreVein)\n    (inventory-holding ?toolinv ?tool)\n    (object-of-type ?tool Pickaxe)\n    (inventory-empty ?targetinv)\n    (object-of-type ?target Hypothetical)\n  )\n  :effect (and\n    (not (inventory-empty ?targetinv))\n    (inventory-holding ?targetinv ?target)\n    (not (object-of-type ?target Hypothetical))\n    (object-of-type ?target GoldOre)\n  )\n )\n"]}}