{"WashObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['knifeblock']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['round_container']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: WashObject\n;; Example: {'action': 'WashObject', 'args': ['lettuce', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['knife']}\n;; Example: {'action': 'WashObject', 'args': ['knife', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['spoon']}\n;; Example: {'action': 'WashObject', 'args': ['spoon']}\n;; Example: {'action': 'WashObject', 'args': ['spoon']}\n;; Example: {'action': 'WashObject', 'args': ['apple']}\n;; Example: {'action': 'WashObject', 'args': ['apple']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce']}\n;; Example: {'action': 'WashObject', 'args': ['lettuce']}\n;; Example: {'action': 'WashObject', 'args': ['egg']}\n;; Example: {'action': 'WashObject', 'args': ['egg']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['tomato']}\n;; Example: {'action': 'WashObject', 'args': ['knife']}\n;; Example: {'action': 'WashObject', 'args': ['pan']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['pan']}\n;; Example: {'action': 'WashObject', 'args': ['potato', 'sinkbasin']}\n;; Example: {'action': 'WashObject', 'args': ['plate', 'sink']}\n;; Example: {'action': 'WashObject', 'args': ['kettle']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n;;To wash an object, we interact with the object to be washed AND the receptacle that will wash the object (e.g. a sink or sink basin). So both must be parameters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (cleanable ?o)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r SinkBasinType)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (cleanable ?o)\n            (holds ?a ?o)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType) ; Assumption: We can only wash objects in a sink\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WashObject\n        :parameters (?a - agent ?o - object ?r - receptacle)\n        :precondition (and\n            (cleanable ?o)\n            (receptacleType ?r SinkBasinType)\n            (inReceptacle ?o ?r)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"]}, "SliceObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['cupboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['breadbox']}\n;; Example: {'action': 'GotoLocation', 'args': ['closet']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: SliceObject\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['cabbage', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knifeknifeblock']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'largeknifemetal']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread']}\n;; Example: {'action': 'SliceObject', 'args': ['loafofbread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['bread']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butter_knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'blacktable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable', 'sink']}\n;; Example: {'action': 'SliceObject', 'args': ['vegetable']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butterknife']}\n;; Example: {'action': 'SliceObject', 'args': ['apple', 'butter_knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['bread', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['breadloaf', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['potato']}\n;; Example: {'action': 'SliceObject', 'args': ['tomato']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce', 'cuttingboard']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['lettuce']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['apple']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bell', 'pepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n;; Example: {'action': 'SliceObject', 'args': ['bellpepper']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?t - otype ?k - object)\n        :precondition (and\n            (objectType ?o ?ot)\n            (objectType ?k ?t)\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (sliceable ?o)\n            (holds ?a ?k)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?k - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (sliceable ?o)\n            (objectType ?k KnifeType)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?kt - knifeType ?k - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (objectType ?k ?kt)\n            (holds ?a ?o)\n            (holds ?a ?k)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action SliceObject\n        :parameters (?a - agent ?l - location ?o - object ?t - otype ?k - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (objectType ?o ?t)\n            (sliceable ?o)\n            (or\n                (and\n                    (objectType ?k KnifeType)\n                    (holds ?a ?k)\n                    (receptacleType ?k ?t)\n                )\n                (and\n                    (objectType ?k CuttingBoardType)\n                    (holds ?a ?k)\n                )\n            )\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>"]}, "LookAtObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['coffeemaker']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['nightstand']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: LookAtObject\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue', 'desklamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['statue']}\n;; Example: {'action': 'LookAtObject', 'args': ['candle']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['cloth', 'lamp']}\n;; Example: {'action': 'LookAtObject', 'args': ['lamp', 'cloth']}\n;; Example: {'action': 'LookAtObject', 'args': ['laptop', 'desklamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the object(s) and agent that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAnyReceptacleObject ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action LookAtObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"]}, "CutObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['talllamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['dustbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CutObject\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['knife', 'potato']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'countertop']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'stalk']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['bread', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'slicer']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['lettuce']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['tomato', 'cuttingboard']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['potato', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '3']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '\"slice1\"']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '\"slice2\"']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife', '\"slice3\"']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n;; Example: {'action': 'CutObject', 'args': ['apple', 'knife']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cut an object, we need an object and a cutting tool like a knife. So both must be parameters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (objectType ?t KnifeType)\n            (holds ?a ?o)\n            (holds ?a ?t)\n            (not (isSliced ?o))\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?k - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (objectType ?k KnifeType)\n            (holds ?a ?o)\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectType ?o ?ot))\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?o - object ?t - otype ?k - object)\n        :precondition (and\n            (objectType ?o ?t)\n            (holds ?a ?o)\n            (receptacleType ?k CuttingBoardType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?k ?l)\n        )\n        :effect (and\n            (isSliced ?o)\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?t)\n            (sliceable ?o)\n        )\n        :effect (and\n            (isSliced ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CutObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?t)\n            (tool ?t KnifeType)\n            (receptacleType ?r CuttingBoardType)\n            (holds ?a ?t)\n        )\n        :effect (and\n            (isSliced ?o)\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"]}, "HeatObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cupboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: HeatObject\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['whitecup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['pan', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['bread']}\n;; Example: {'action': 'HeatObject', 'args': ['toaster']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['glass', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['glass']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['sliceofpotato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['cup', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mugheater']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['mug', 'microwave']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stovetop']}\n;; Example: {'action': 'HeatObject', 'args': ['egg', 'stove']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (holdable ?o)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle ?ot - otype ?rt - rtype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r ?rt)\n            (inReceptacle ?o ?r)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object ?h - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (heatable ?o)\n            (objectType ?o ?t)\n            (holds ?a ?o)\n            (receptacleType ?h StoveBurnerType)\n            (receptacleAtLocation ?h ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (toggleable ?r)\n            (isOn ?r)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action HeatObject\n        :parameters (?a - agent ?l - location ?o - object ?h - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (heatable ?o)\n            (objectType ?h ?ot)\n            (holds ?a ?o)\n            (toggleable ?h)\n            (not (isOn ?h))\n        )\n        :effect (and\n            (isHot ?o)\n            (isOn ?h)\n            (not (isCool ?o))\n        )\n    )\n\n<END>"]}, "BakeObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['window']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['desklamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['bread']}\n;; Example: {'action': 'GotoLocation', 'args': ['trash']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: BakeObject\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['toast', 'toaster']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'fridge']}\n;; Example: {'action': 'BakeObject', 'args': ['bread', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['bread', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['tomato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['apple', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'BakeObject', 'args': ['potato', 'oven']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r OvenType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?r)\n            (heatable ?o)\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (receptacleType ?r OvenType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r OvenType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (isHot ?r))\n        )\n        :effect (and\n            (isHot ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r OvenType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isBaked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action BakeObject\n        :parameters (?a - agent ?o - object ?r - receptacle)\n        :precondition (and\n            (heatable ?r)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (isHot ?r)\n        )\n        :effect (and\n            (not (isRaw ?o))\n            (not (isCold ?o))\n        )\n    )\n\n<END>"]}, "CoolObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['blacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CoolObject\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple']}\n;; Example: {'action': 'CoolObject', 'args': ['apple', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['cup']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['slicedpotato']}\n;; Example: {'action': 'CoolObject', 'args': ['bread', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['bread']}\n;; Example: {'action': 'CoolObject', 'args': ['breadslice', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['potato']}\n;; Example: {'action': 'CoolObject', 'args': ['apple', 'fridge']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['pan']}\n;; Example: {'action': 'CoolObject', 'args': ['lettuce']}\n;; Example: {'action': 'CoolObject', 'args': ['egg']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; Cooling an object usually requires interaction with a receptacle that can provide cooling (e.g. a fridge). So, the object and the optional receptacle are parameters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (coolable ?o)\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n            (not (isHot ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (coolable ?o)\n            (toggleable ?r)\n            (isOn ?r)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isCool ?o))\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CoolObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"]}, "OpenObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['couch']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: OpenObject\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['cabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['cabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['deskcabinet']}\n;; Example: {'action': 'OpenObject', 'args': ['refrigerator']}\n;; Example: {'action': 'OpenObject', 'args': ['microwave']}\n;; Example: {'action': 'OpenObject', 'args': ['drawer']}\n;; Example: {'action': 'OpenObject', 'args': ['fridge']}\n;; Example: {'action': 'OpenObject', 'args': ['safe']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (openable ?o)\n            (not (opened ?o))\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (opened ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacleObject ?o ?r)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action OpenObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (openable ?r)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (not (opened ?r))\n        )\n        :effect (and\n            (opened ?r)\n        )\n    )\n\n<END>"]}, "ToastObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['chair']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ToastObject\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['breadslice', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n;; Example: {'action': 'ToastObject', 'args': ['bread', 'toaster']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (receptacleAtLocation ?t ?l)\n            (receptacleType ?t ToasterType)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (holds ?a ?t)\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?t - toaster ?b - bread)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?t ?l)\n            (holds ?a ?b)\n            (inReceptacle ?b ?t)\n            (not (isOn ?t))\n        )\n        :effect (and\n            (isOn ?t)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?bo - otype ?ot - otype ?o - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleType ?t ToasterType)\n            (booleanEq ?o ?bo)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?t)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?b - object ?t - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?t ?l)\n            (objectAtLocation ?b ?l)\n            (objectType ?b BreadType)\n            (objectType ?t ToasterType)\n        )\n        :effect (and\n            (isHot ?b)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; The toaster is a receptacle that is used to toast the object (e.g., bread). So the toaster must be a parameter to the operator.\n(:action ToastObject\n        :parameters (?a - agent ?l - location ?o - object ?t - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?t ?l)\n            (receptacleType ?t ToasterType)\n            (holds ?a ?o)\n            (coolable ?o)\n            (not (isHot ?o))\n            (not (holdsAny ?a))\n            (not (isOn ?t))\n        )\n        :effect (and\n            (isHot ?o)\n            (holds ?a ?o)\n        )\n    )\n\n<END>"]}, "TakeObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['blacktable']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['phone']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TakeObject\n;; Example: {'action': 'TakeObject', 'args': ['bread']}\n;; Example: {'action': 'TakeObject', 'args': ['cup']}\n;; Example: {'action': 'TakeObject', 'args': ['bread']}\n;; Example: {'action': 'TakeObject', 'args': ['bread']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; In this case, the action involves the agent taking an object from the environment.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holds ?a ?o))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TakeObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>"]}, "FillObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['floor']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: FillObject\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkpot']}\n;; Example: {'action': 'FillObject', 'args': ['sink', 'pot']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['glass']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['pot']}\n;; Example: {'action': 'FillObject', 'args': ['mug']}\n;; Example: {'action': 'FillObject', 'args': ['largesink']}\n;; Example: {'action': 'FillObject', 'args': ['largesink']}\n;; Example: {'action': 'FillObject', 'args': ['largesink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bowl', 'water']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pan']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'kitchensink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'kitchensink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['bowl']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['kettle']}\n;; Example: {'action': 'FillObject', 'args': ['sink']}\n;; Example: {'action': 'FillObject', 'args': ['kettle']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n;; Example: {'action': 'FillObject', 'args': ['pan']}\n;; Example: {'action': 'FillObject', 'args': ['sinkbasin']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (coolable ?r)\n            (not (isHot ?o))\n            (isCool ?r)\n        )\n        :effect (and\n            (isHot ?o)\n            (not (isCool ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r SinkBasinType)\n            (not (isClean ?r))\n            (not (isHot ?r))\n            (not (isCool ?r))\n            (not (isSliced ?r))\n            (not (isOn ?r))\n        )\n        :effect (and\n            (isClean ?r)\n            (not (isHot ?r))\n            (not (isCool ?r))\n            (not (isSliced ?r))\n            (not (isOn ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (isClean ?o))\n            (cleanable ?o)\n            (not (inReceptacle ?o ?r))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (isClean ?o)\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action FillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r SinkBasinType)\n            (objectType ?o ?ot)\n            (inReceptacle ?o ?r)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"]}, "CloseObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['refrigerator']}\n;; Example: {'action': 'GotoLocation', 'args': ['wallet']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['floor']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CloseObject\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['fridge']}\n;; Example: {'action': 'CloseObject', 'args': ['cabinet']}\n;; Example: {'action': 'CloseObject', 'args': ['cabinet']}\n;; Example: {'action': 'CloseObject', 'args': ['microwave']}\n;; Example: {'action': 'CloseObject', 'args': ['refrigerator']}\n;; Example: {'action': 'CloseObject', 'args': ['drawer']}\n;; Example: {'action': 'CloseObject', 'args': ['safe']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?rt - rtype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleType ?r ?rt)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (openable ?r)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (opened ?r)\n        )\n        :effect (and\n            (not (opened ?r))\n            (not (isToggled ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CloseObject\n        :parameters (?a - agent ?l - location ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (openable ?r)\n            (opened ?r)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (not (opened ?r))\n        )\n    )\n\n<END>"]}, "DiscardObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['whitetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['whitetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: DiscardObject\n;; Example: {'action': 'DiscardObject', 'args': ['potato']}\n;; Example: {'action': 'DiscardObject', 'args': ['egg']}\n;; Example: {'action': 'DiscardObject', 'args': ['potato']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action DiscardObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DiscardObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DiscardObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DiscardObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DiscardObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>"]}, "TurnOnObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['floorlamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchentable']}\n;; Example: {'action': 'GotoLocation', 'args': ['desk']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOnObject\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamppost']}\n;; Example: {'action': 'TurnOnObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['light']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lightswitch']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp', 'desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['toaster']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['stove']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp', 'dresser']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['talllamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'TurnOnObject', 'args': ['dresselamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object ?ot - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object ?ot - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (toggleable ?o)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>"]}, "InvestigateObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['lamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['storage']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: InvestigateObject\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n;; Example: {'action': 'InvestigateObject', 'args': ['candle']}\n"}], "codex_output": [";; Parameter Reasoning: We simply need the object that the agent will investigate as a parameter to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (atLocation ?a ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the object that would be investigated as a parameter to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InvestigateObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (objectAtLocation ?o ?l)\n            (atLocation ?a ?l)\n        )\n        :effect (and\n            (isHot ?o)\n            (isCool ?o)\n        )\n    )\n\n<END>"]}, "TurnOffObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['knifeblock']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['silverbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['dustbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['utensildrawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOffObject\n;; Example: {'action': 'TurnOffObject', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['lamp']}\n;; Example: {'action': 'TurnOffObject', 'args': ['floorlamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (isOn ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (isOn ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?o - object)\n         :precondition (and\n            (toggleable ?o)\n            (isOn ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (isOn ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n    )\n\n<END>"]}, "InspectObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['couch']}\n;; Example: {'action': 'GotoLocation', 'args': ['dishwasher']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: InspectObject\n;; Example: {'action': 'InspectObject', 'args': ['candle']}\n;; Example: {'action': 'InspectObject', 'args': ['candle']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['clock', 'lamp']}\n;; Example: {'action': 'InspectObject', 'args': ['clock']}\n;; Example: {'action': 'InspectObject', 'args': ['laptop', 'lamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'talllamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'talllamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote', 'desklamp']}\n;; Example: {'action': 'InspectObject', 'args': ['remote']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAnyReceptacleObject ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action InspectObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"]}, "TurnOnLight": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['nightstand']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['counter']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['bin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['blacktable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOnLight\n;; Example: {'action': 'TurnOnLight', 'args': ['biglamp']}\n;; Example: {'action': 'TurnOnLight', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnLight', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOnLight', 'args': ['lamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (objectType ?o LightSwitchType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o LightSwitchType)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To turn on a light, we need the light object itself as a parameter.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOnLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (objectType ?o LightSwitchType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>"]}, "DrainObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['redcouch']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['floor']}\n;; Example: {'action': 'GotoLocation', 'args': ['stovetop']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['paper', 'towels']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: DrainObject\n;; Example: {'action': 'DrainObject', 'args': ['pot']}\n;; Example: {'action': 'DrainObject', 'args': ['sinkbasin']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DrainObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To drain an object, we interact with the object AND the receptacle that will drain the object (e.g. a sink basin). So both must be parameters to the operator.\n(:action DrainObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            \n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To drain an object, we need to have a receptacle (e.g., a sink) and an object that can be drained (e.g., a pot). So both must be parameters to the operator.\n(:action DrainObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DrainObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r SinkBasinType)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (isHot ?o))\n            (not (isCool ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action DrainObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>"]}, "ChillObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['bathtub']}\n;; Example: {'action': 'GotoLocation', 'args': ['dustbin']}\n;; Example: {'action': 'GotoLocation', 'args': ['corner']}\n;; Example: {'action': 'GotoLocation', 'args': ['wallet']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['chair']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ChillObject\n;; Example: {'action': 'ChillObject', 'args': ['pot', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['tomato', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['tomato']}\n;; Example: {'action': 'ChillObject', 'args': ['pan', 'sink']}\n;; Example: {'action': 'ChillObject', 'args': ['slice', 'fridge']}\n;; Example: {'action': 'ChillObject', 'args': ['slicedlettuce']}\n;; Example: {'action': 'ChillObject', 'args': ['lettuce']}\n;; Example: {'action': 'ChillObject', 'args': ['slice']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To chill an object, we need both the object to be chilled and the receptacle where the chilling will take place as parameters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (coolable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?ot - otype)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (coolable ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To chill an object, we need to specify both the object to be chilled and the receptacle where it will be chilled (e.g. fridge).\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To chill an object, we interact with the object to be chilled AND the receptacle that will chill the object (e.g. a fridge). So both must be parameters to the operator.\n(:action ChillObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r FridgeType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isCool ?o)\n        )\n    )\n\n<END>"]}, "WarmObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['whitetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['bed']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['trash']}\n;; Example: {'action': 'GotoLocation', 'args': ['deskshelf']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: WarmObject\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['glass', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n;; Example: {'action': 'WarmObject', 'args': ['plate', 'microwave']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (heatable ?o)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we interact with the object and the receptacle that will warm the object (e.g. a microwave). So both must be parameters to the operator. \n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (heatable ?o)\n            (not (isHot ?o))\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To warm an object, we interact with the object to be warmed AND the receptacle that will warm the object (e.g. a microwave). So both must be parameters to the operator.\n(:action WarmObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r MicrowaveType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "CookObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['wall']}\n;; Example: {'action': 'GotoLocation', 'args': ['bin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabbage']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CookObject\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slicedbread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['sliced-potato']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['pan', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['slice', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['sliced_tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['pan', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'oven']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['egg', 'pan']}\n;; Example: {'action': 'CookObject', 'args': ['egg']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['tomato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stovetop']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['apple', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n;; Example: {'action': 'CookObject', 'args': ['potato', 'stove']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To cook an object, we need both the object to be cooked AND the receptacle or tool used for cooking (e.g. stove, microwave).\n(:action CookObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?rc - rtype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleType ?r ?rc)\n            (inReceptacle ?o ?r)\n            (not (isCooked ?o))\n        )\n        :effect (and\n            (isCooked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r OvenType)\n            (not (isHot ?r))\n        )\n        :effect (and\n            (isHot ?r)\n            (heatable ?o)\n            (isCooked ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To cook an object, we need the specific object to be cooked AND the specific receptacle or tool used for cooking (e.g. stove, microwave, oven). So both must be parameters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?ot - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (objectType ?o ?ot)\n            (or\n                (and (objectType ?o TomatoType) (or (receptacleType ?r StoveBurnerType) (receptacleType ?r MicrowaveType) (receptacleType ?r OvenType)))\n                (and (objectType ?o BreadType) (receptacleType ?r StoveBurnerType))\n                (and (objectType ?o PotatoType) (receptacleType ?r StoveBurnerType) (heatable ?o))\n                (and (objectType ?o EggType) (or (receptacleType ?r StoveBurnerType) (receptacleType ?r PanType)) (heatable ?o))\n            )\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (objectAtLocation ?o ?l))\n            (objectType ?o ?ot)\n            (holds ?a ?ot)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object ?ht - otype)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ht)\n            (holds ?a ?o)\n            (heatable ?o)\n        )\n        :effect (and\n            (heated ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CookObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (holds ?a ?o)\n            (receptacleType ?r StoveBurnerType)\n            (receptacleAtLocation ?r ?l)\n        )\n        :effect (and\n            (isCooked ?o)\n        )\n    )\n\n<END>"]}, "GoToLocation": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['statue']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GoToLocation\n;; Example: {'action': 'GoToLocation', 'args': ['knifeblock']}\n;; Example: {'action': 'GoToLocation', 'args': ['table']}\n;; Example: {'action': 'GoToLocation', 'args': ['statue']}\n;; Example: {'action': 'GoToLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GoToLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GoToLocation', 'args': ['microwave']}\n;; Example: {'action': 'GoToLocation', 'args': ['shelf']}\n;; Example: {'action': 'GoToLocation', 'args': ['cupboard']}\n;; Example: {'action': 'GoToLocation', 'args': ['stove']}\n;; Example: {'action': 'GoToLocation', 'args': ['fridge']}\n;; Example: {'action': 'GoToLocation', 'args': ['shelf']}\n;; Example: {'action': 'GoToLocation', 'args': ['table']}\n;; Example: {'action': 'GoToLocation', 'args': ['inspectionarea']}\n;; Example: {'action': 'GoToLocation', 'args': ['coffeemaker']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the agent and the target location as parameters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the destination location as a parameter to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n            (not (atLocation ?a ?lEnd))\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GoToLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>"]}, "RestartObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['dresser']}\n;; Example: {'action': 'GotoLocation', 'args': ['cuttingboard']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['mugheater']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['toaster']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['garbage']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: RestartObject\n;; Example: {'action': 'RestartObject', 'args': ['lamp']}\n;; Example: {'action': 'RestartObject', 'args': ['dresserlamp']}\n;; Example: {'action': 'RestartObject', 'args': ['desklamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have the object that needs to be restarted as a parameter to the operator.\n(:action RestartObject\n        :parameters (?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (isToggled ?o)\n        )\n        :effect (and\n            (not (isToggled ?o))\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have the object that needs to be restarted as a parameter to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (toggleable ?o)\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o LightSwitchType)\n            (isOn ?o)\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>\n\n", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RestartObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isOn ?o))\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isOn ?o)\n            (isToggled ?o)\n        )\n    )\n\n<END>"]}, "ExamineObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['bathroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['drawer']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['blackshelvingunit']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ExamineObject\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['remote_control', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remote', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remote']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['round_container', 'desklamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['roundcontainer']}\n;; Example: {'action': 'ExamineObject', 'args': ['container']}\n;; Example: {'action': 'ExamineObject', 'args': ['round_container']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['statue']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['pillow']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['towel', 'lamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['remotecontrol']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch', 'floorlamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['watch']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n;; Example: {'action': 'ExamineObject', 'args': ['phone', 'talllamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n            (not (holdsAnyReceptacleObject ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and)\n    )\n\n<END>", ";; Parameter Reasoning: We only need the object to be examined as a parameter for this operator.\n(:action ExamineObject\n        :parameters (?a - agent ?o - object)\n        :precondition (and\n            (holds ?a ?o)\n        )\n        :effect (and\n            (truth-value (not (isClean ?o)))\n            (truth-value (not (isHot ?o)))\n            (truth-value (not (isCool ?o)))\n            (truth-value (not (isOn ?o)))\n            (truth-value (not (isToggled ?o)))\n            (truth-value (not (isSliced ?o)))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We only need the object to be examined as a parameter for this operator.\n(:action ExamineObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"]}, "ActivateLight": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['electriccooker']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n;; Example: {'action': 'GotoLocation', 'args': ['diningtable']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ActivateLight\n;; Example: {'action': 'ActivateLight', 'args': ['floorlamp']}\n;; Example: {'action': 'ActivateLight', 'args': ['floorlamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ActivateLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To activate a light, we need the object that represents the light (e.g. a floor lamp) as a parameter.\n(:action ActivateLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (objectType ?o FloorLampType)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (isOn ?o))\n        )\n        :effect (and\n            (isOn ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ActivateLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ActivateLight\n        :parameters (?a - agent ?l - location ?light - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?light ?l)\n            (toggleable ?light)\n            (not (isToggled ?light))\n        )\n        :effect (and\n            (isOn ?light)\n            (isToggled ?light)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ActivateLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (not (isToggled ?o))\n        )\n        :effect (and\n            (isToggled ?o)\n        )\n    )\n\n<END>"]}, "PlaceObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['sinkbasin']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sidetable']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PlaceObject\n;; Example: {'action': 'PlaceObject', 'args': ['bread', 'stove']}\n;; Example: {'action': 'PlaceObject', 'args': ['tomato', 'microwave']}\n;; Example: {'action': 'PlaceObject', 'args': ['lettuce', 'sink']}\n;; Example: {'action': 'PlaceObject', 'args': ['lettuce', 'sidetable']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (not (holdsAny ?a))\n            (not (inReceptacle ?o ?r))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?o - object ?r - receptacle)\n        :precondition (and\n            (holds ?a ?o)\n            (receptacleType ?r otype)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (not (inReceptacle ?o ?r))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r ?rt)\n            (inReceptacleObject ?o ?r)\n            (holds ?a ?o)\n            (forall\n                (?oi - object)\n                (implies\n                    (inReceptacleObject ?oi ?r)\n                    (isClean ?oi)\n                )\n            )\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (inReceptacle ?o ?r))\n            (holdsAny ?a)\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PlaceObject\n        :parameters (?a - agent ?l - location ?o - object ?r -receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (receptacleType ?r ?rt)\n            (objectType ?o ?ot)\n            (or\n                (not (isReceptacleObject ?o))\n                (and\n                    (isReceptacleObject ?o)\n                    (inReceptacleObject ?innerObj ?o)\n                    (inReceptacle ?innerObj ?r)\n                )\n            )\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (objectAtLocation ?o ?l))\n            (not (holds ?a ?o))\n        )\n    )\n\n<END>"]}, "MicrowaveObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['bread']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['stovetop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: MicrowaveObject\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['fruit', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['egg', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['potato', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['mug']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['bread', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', '30']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['apple', 'microwave']}\n;; Example: {'action': 'MicrowaveObject', 'args': ['plate']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (objectType ?o FoodType)\n            (receptacleType ?r MicrowaveType)\n        )\n        :effect (and\n            (isHot ?o)\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?m - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?m ?l)\n            (objectType ?o ?ot)\n            (objectType ?m MicrowaveType)\n            (inReceptacle ?o ?m)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (isHot ?o)\n            (not (holds ?a ?o))\n            (not (inReceptacle ?o ?m))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; Also, in this case, we have an optional parameter 'time' to specify the duration of microwaving. If not specified, default value will be used.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle ?time - number)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?r ?o)\n            (receptacleType ?r MicrowaveType)\n            (holds ?a ?o)\n            (cleanable ?o)\n        )\n        :effect (and\n            (isHot ?o)\n            (not (cleanable ?o))\n            (not (heatable ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r MicrowaveType)\n            (isHot ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (objectAtLocation ?o ?l)\n            (isHot ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action MicrowaveObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (receptacleType ?r MicrowaveType)\n        )\n        :effect (and\n            (isHot ?o)\n        )\n    )\n\n<END>"]}, "RinseObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['bedroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['couch']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['table']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: RinseObject\n;; Example: {'action': 'RinseObject', 'args': ['tomato']}\n;; Example: {'action': 'RinseObject', 'args': ['egg']}\n;; Example: {'action': 'RinseObject', 'args': ['knife', 'sink']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;; To rinse an object, we interact with the object to be rinsed AND the receptacle that will rinse the object (e.g. a sink). So both must be parameters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            ; Assuming this operator only cleans the object superficially,\n            ; i.e. it does not change the \"isClean\" status of the object\n            (not (isDirty ?o))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To rinse an object, we interact with the object to be rinsed AND the receptacle that will rinse the object (e.g. a sink). So both must be parameters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (inReceptacle ?o ?r)\n            (not (isClean ?o))\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To rinse an object, we interact with the object to be rinsed AND the receptacle that will be used to rinse the object (e.g. a sink). So both must be parameters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action RinseObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>"]}, "CheckObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['deskshelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['oven']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CheckObject\n;; Example: {'action': 'CheckObject', 'args': ['microwave']}\n;; Example: {'action': 'CheckObject', 'args': ['cup']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CheckObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CheckObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (holdsAny ?a)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CheckObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CheckObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CheckObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (holdsAny ?a))\n        )\n    )\n\n<END>"]}, "TurnOffLight": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['blackstand']}\n;; Example: {'action': 'GotoLocation', 'args': ['microwave']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['desklamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['stove']}\n;; Example: {'action': 'GotoLocation', 'args': ['bedroom']}\n;; Example: {'action': 'GotoLocation', 'args': ['couch']}\n;; Example: {'action': 'GotoLocation', 'args': ['cabinet']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: TurnOffLight\n;; Example: {'action': 'TurnOffLight', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOffLight', 'args': ['desklamp']}\n;; Example: {'action': 'TurnOffLight', 'args': ['lamp']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffLight\n        :parameters (?a - agent ?l - location ?light - lightSwitchType)\n        :precondition (and\n            (atLocation ?a ?l)\n            (toggleable ?light)\n            (isOn ?light)\n        )\n        :effect (and\n            (not (isOn ?light))\n            (isToggled ?light)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action TurnOffLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (toggleable ?o)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We only need the object (light) that needs to be turned off as a parameter to the operator.\n(:action TurnOffLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (isOn ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n;; To turn off a light, we need to specify the object that represents the light source (e.g. a lamp).\n(:action TurnOffLight\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (toggleable ?o)\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (isOn ?o)\n        )\n        :effect (and\n            (not (isOn ?o))\n            (isToggled ?o)\n        )\n    )\n\n<END>"]}, "ThrowObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['statue']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['sink']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['desklamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: ThrowObject\n;; Example: {'action': 'ThrowObject', 'args': ['egg', 'trashcan']}\n;; Example: {'action': 'ThrowObject', 'args': ['tomato', 'trash']}\n;; Example: {'action': 'ThrowObject', 'args': ['bottle', 'trashcan']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (inReceptacle ?o ?r))\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (inReceptacle ?o ?r)\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action ThrowObject\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (not (atLocation ?o ?l))\n            (not (holds ?a ?o))\n            (not (objectAtLocation ?o ?l))\n            (inReceptacle ?o ?r)\n        )\n    )\n\n<END>"]}, "CarryObject": {"codex_prompt": [{"role": "user", "content": ";;;; Define PDDL planning operators.\n\n"}, {"role": "user", "content": ";;;; Predicates in the PDDL domain definition.\n(:requirements :adl\n    )\n(:otype\n        CandleType - otype\n        ShowerGlassType - otype\n        CDType - otype\n        TomatoType - otype\n        MirrorType - otype\n        ScrubBrushType - otype\n        MugType - otype\n        ToasterType - otype\n        PaintingType - otype\n        CellPhoneType - otype\n        LadleType - otype\n        BreadType - otype\n        PotType - otype\n        BookType - otype\n        TennisRacketType - otype\n        ButterKnifeType - otype\n        ShowerDoorType - otype\n        KeyChainType - otype\n        BaseballBatType - otype\n        EggType - otype\n        PenType - otype\n        ForkType - otype\n        VaseType - otype\n        ClothType - otype\n        WindowType - otype\n        PencilType - otype\n        StatueType - otype\n        LightSwitchType - otype\n        WatchType - otype\n        SpatulaType - otype\n        PaperTowelRollType - otype\n        FloorLampType - otype\n        KettleType - otype\n        SoapBottleType - otype\n        BootsType - otype\n        TowelType - otype\n        PillowType - otype\n        AlarmClockType - otype\n        PotatoType - otype\n        ChairType - otype\n        PlungerType - otype\n        SprayBottleType - otype\n        HandTowelType - otype\n        BathtubType - otype\n        RemoteControlType - otype\n        PepperShakerType - otype\n        PlateType - otype\n        BasketBallType - otype\n        DeskLampType - otype\n        FootstoolType - otype\n        GlassbottleType - otype\n        PaperTowelType - otype\n        CreditCardType - otype\n        PanType - otype\n        ToiletPaperType - otype\n        SaltShakerType - otype\n        PosterType - otype\n        ToiletPaperRollType - otype\n        LettuceType - otype\n        WineBottleType - otype\n        KnifeType - otype\n        LaundryHamperLidType - otype\n        SpoonType - otype\n        TissueBoxType - otype\n        BowlType - otype\n        BoxType - otype\n        SoapBarType - otype\n        HousePlantType - otype\n        NewspaperType - otype\n        CupType - otype\n        DishSpongeType - otype\n        LaptopType - otype\n        TelevisionType - otype\n        StoveKnobType - otype\n        CurtainsType - otype\n        BlindsType - otype\n        TeddyBearType - otype\n        AppleType - otype\n        WateringCanType - otype\n        SinkType - otype\n(:rtype\n        ArmChairType - rtype\n        BedType - rtype\n        BathtubBasinType - rtype\n        DresserType - rtype\n        SafeType - rtype\n        DiningTableType - rtype\n        SofaType - rtype\n        HandTowelHolderType - rtype\n        StoveBurnerType - rtype\n        CartType - rtype\n        DeskType - rtype\n        CoffeeMachineType - rtype\n        MicrowaveType - rtype\n        ToiletType - rtype\n        CounterTopType - rtype\n        GarbageCanType - rtype\n        CoffeeTableType - rtype\n        CabinetType - rtype\n        SinkBasinType - rtype\n        OttomanType - rtype\n        ToiletPaperHangerType - rtype\n        TowelHolderType - rtype\n        FridgeType - rtype\n        DrawerType - rtype\n        SideTableType - rtype\n        ShelfType - rtype\n        LaundryHamperType - rtype\n)\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n        (wasInReceptacle ?o - object ?r - receptacle)\n    )\n\n\n;;;; Only use predicates and functions available in the PDDL domain.\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectInReceptacle\n        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (inReceptacle ?o ?r)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (not (inReceptacle ?o ?r))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PickupObjectNotInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PickupObjectNotInReceptacle\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n            (forall\n                (?re - receptacle)\n                (not (inReceptacle ?o ?re))\n            )\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CleanObject\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['plate']}\n;; Example: {'action': 'CleanObject', 'args': ['apple']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['cloth']}\n;; Example: {'action': 'CleanObject', 'args': ['mug']}\n;; Example: {'action': 'CleanObject', 'args': ['lettuce']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n;;To clean an object, we interact with the object to be cleaned AND the receptacle that will clean the object (e.g. a sink). So both must be parameters to the operator.\n(:action CleanObject\n        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)\n        :precondition (and\n            (receptacleType ?r SinkBasinType)\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (holds ?a ?o)\n        )\n        :effect (and\n            (isClean ?o)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: GotoLocation\n;; Example: {'action': 'GotoLocation', 'args': ['talllamp']}\n;; Example: {'action': 'GotoLocation', 'args': ['trashcan']}\n;; Example: {'action': 'GotoLocation', 'args': ['corner']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['countertop']}\n;; Example: {'action': 'GotoLocation', 'args': ['fridge']}\n;; Example: {'action': 'GotoLocation', 'args': ['shelf']}\n;; Example: {'action': 'GotoLocation', 'args': ['kitchen']}\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action GotoLocation\n        :parameters (?a - agent ?lStart - location ?lEnd - location)\n        :precondition (and\n            (atLocation ?a ?lStart)\n        )\n        :effect (and\n            (atLocation ?a ?lEnd)\n            (not (atLocation ?a ?lStart))\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: PutObjectInReceptacle\n"}, {"role": "assistant", "content": ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action PutObjectInReceptacle\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object ?r - receptacle)\n        :precondition (and\n            (atLocation ?a ?l)\n            (receptacleAtLocation ?r ?l)\n            (objectType ?o ?ot)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n        )\n        :effect (and\n            (inReceptacle ?o ?r)\n            (not (holds ?a ?o))\n            (not (holdsAny ?a))\n            (objectAtLocation ?o ?l)\n        )\n    )\n\n<END>\n\n"}, {"role": "user", "content": ";; Operator: CarryObject\n;; Example: {'action': 'CarryObject', 'args': ['cd']}\n;; Example: {'action': 'CarryObject', 'args': ['remote']}\n"}], "codex_output": [";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (holds ?a ?o)\n            (holdsAny ?a)\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (holdsAny ?a)\n            (not (holds ?a ?o))\n            (not (isReceptacleObject ?o))\n        )\n        :effect (and\n            (holds ?a ?o)\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as parameters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n        )\n        :effect (and\n            (holds ?a ?o)\n            (not (objectAtLocation ?o ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?ot - otype ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (objectType ?o ?ot)\n            (not (holdsAny ?a))\n            (not (inReceptacle ?o ?r))\n        )\n        :effect (and\n            (holds ?a ?o)\n            (not (objectAtLocation ?o ?l))\n            (not (atLocation ?a ?l))\n        )\n    )\n\n<END>", ";; Parameter Reasoning: We must have ALL objects, receptacles, and tools that would be used to execute the operator as paramaters to the operator.\n(:action CarryObject\n        :parameters (?a - agent ?l - location ?o - object)\n        :precondition (and\n            (atLocation ?a ?l)\n            (objectAtLocation ?o ?l)\n            (not (holdsAny ?a))\n        )\n        :effect (and\n            (not (objectAtLocation ?o ?l))\n            (holds ?a ?o)\n            (holdsAny ?a)\n        )\n    )\n\n<END>"]}}