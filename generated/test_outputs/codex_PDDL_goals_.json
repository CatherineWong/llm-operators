{
    "train/pick_cool_then_place_in_recep-Cup-None-DiningTable-4/trial_T20190918_182252_255211": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# get cup from sink , chill in refrigerator , put cup on table.",
        "codex_output": [
            " (these are NOT how we were told to write them) \n(:requirements\n    -strict-typing\n)\n(:init\n(atLocation Arthur Kitchen)\n(agent Arthur)\n(object CupType)\n(object RefrectorType)\n(receptacle RefrectorType)\n(object TableType)\n(receptacle RefrectorType)\n(toggleable CupType)\n(pickupable CupType)\n(coolable CupType)\n(not\n(isCool\nCupType))\n(cleanable CupType)\n(isClean\nCupType)\n(not\n(holdsAny\nArthur))\n(heatable\nCupType)\n(isHot\nCupType))\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCupType)\n(inReceptacle\n?o1\n?r)))\n)\n(exists\n(?ab\n-\nagent)\n(exists\n(?oc\n-\n"
        ]
    },
    "train/look_at_obj_in_light-KeyChain-None-FloorLamp-228/trial_T20190907_055048_650574": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# get the keys from the round table.",
        "codex_output": [
            "\n(:goal\n(holds\nrobot1\ntheKeyToEverything)\n)"
        ]
    },
    "train/pick_heat_then_place_in_recep-BreadSliced-None-CounterTop-4/trial_T20190909_021644_891574": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# put a heated slice of bread on the counter.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?o\n-\nobject)\n(and\n(objectType\n?o\nBreadType)\n(receptacleType\n?r\nCounterType)\n(inReceptacle\n?o\n?r)\n(isSliced\n?o)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/look_at_obj_in_light-CellPhone-None-DeskLamp-320/trial_T20190908_093241_795263": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# pick up a phone and turn a lamp on.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?a\n-\nagent)\n(holdsAny\n?a)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_clean_then_place_in_recep-Pan-None-CounterTop-22/trial_T20190910_161415_317849": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# clean a pan and place it on the counter.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?o\n-\nobject)\n(and\n(inReceptacleObject\n?o\nPanType)\n(isClean\n?o)\n)\n)\n(forall\n(?ob\n-\nobject)\n(not\n(and\n(isClean\n?ob)\n(dropable\n?ob)\n)\n)\n)\n)\n)"
        ]
    },
    "train/pick_cool_then_place_in_recep-Plate-None-Cabinet-4/trial_T20190908_082502_482243": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# place a chilled plate inside the second cabinet on the left.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o\n-\nobject)\n(and\n(objectType\n?o\nPlateType)\n(receptacleType\n?r\nCabinetType)\n(inReceptacle\n?o\n?r)\n(isCool\n?o)\n(receptacleAtLocation\n?r\nDownHallEntrance)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_and_place_with_movable_recep-Vase-Box-DiningTable-201/trial_T20190907_053028_584525": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# put a cardboard box with a yellow vase inside of it on the glass table.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?o1\n-\nobject)\n(exists\n(?o2\n-\nobject)\n(and\n(objectType\n?o1\nCardboardBoxType)\n(inReceptacleObject\n?o2\n?o1)\n(objectType\n?o2\nVaseType)\n(objectColor\n?o2\nYellow)\n(exists\n(?r\n-\nreceptacle)\n(and\n(inReceptacle\n?o1\n?r)\n(receptacleType\n?r\nNightTableType)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_and_place_simple-WineBottle-None-DiningTable-15/trial_T20190906_184025_017468": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# move the bottle from the waste basket to the white table.",
        "codex_output": [
            "\n(:goal\n(and\n (exists\n    (?o\n    -\n    object)\n    (and\n    (objectType\n        ?o\n        ParacetemolType)\n        (receptacleType\n        ?from\n        WasteBasketType)\n        (isReceptacleObject\n        ?from)\n        (receptacleType\n        ?to\n        TableType)\n        (isReceptacleObject\n        ?to)\n        (inReceptacle\n        ?o\n        ?from)))\n    (receptacleType\n        ?to\n        TableType)\n    (not\n        (inReceptacle\n        ?o\n        ?from))\n    (inReceptacle\n        ?o\n        ?to)))\n(forall\n    (?re\n    -\n    receptacle)\n    (not\n        (opened\n        ?re)))\n)"
        ]
    },
    "train/pick_and_place_with_movable_recep-ButterKnife-Pan-CounterTop-18/trial_T20190907_191730_675084": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# pick up the knife with the pan , place them in the corner of the counter top beside the coffee maker.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nPanType)\n(receptacleType\n?r\nCounterType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKnifeType)\n(receptacleType\n?r\nCounterType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_heat_then_place_in_recep-TomatoSliced-None-Fridge-5/trial_T20190908_061553_146524": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# put the cooked tomato slice in the fridge.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n( ?o - object )\n(and\n(objectType ?o TomatoSliceType)\n(isHot ?o)\n(inReceptacle ?o\nfridge21)\n)\n)\n\n(exists\n(?o3\n-\nobject)\n(and\n(objectType\n?o3\nHotSliceOfTomato)\n(isSliced\n?o3)\n(inReceptacle\n?o3\nfridge21)\n)\n)\n(exists\n(?o\n-\nobject)\n(and\n(objectType\n?o\nCookingPanType)\n(opened\n?o)\n)\n)\n\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n\n)\n)\n"
        ]
    },
    "train/pick_clean_then_place_in_recep-SoapBar-None-CounterTop-414/trial_T20190908_215405_138970": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# put a clean bar of soap on the counter.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nSoapType)\n(isClean\n?o1)\n(receptacleType\n?r\nCounterType)\n(inReceptacle\n?o1\n?r)\n)\n)\n)\n(exists\n(?o2\n-\nobject)\n(and\n(=\n?r\n(r\n?o2\n))\n(objectType\n?o2\nTowelType)\n(inReceptacle\n?o2\n?r)\n)\n)\n(keep-receptacles-closed)\n)\n)"
        ]
    },
    "train/pick_cool_then_place_in_recep-Apple-None-GarbageCan-5/trial_T20190908_111836_482484": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# put an apple in the garbage.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o\n-\nobject)\n(and\n(inReceptacle\n?o\n?r)\n(exists\n(?o\n-\nobject)\n(and\n(objectType\n?o\nAppleType)            \n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_and_place_simple-Box-None-Sofa-206/trial_T20190909_102133_696249": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# place a box on a couch.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o\n-\nobject)\n(and\n(objectType\n?o\nBoxType)\n(receptacleType\n?r\nCouchType)\n(inReceptacle\n?o\n?r)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_cool_then_place_in_recep-TomatoSliced-None-Microwave-27/trial_T20190908_102220_103784": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# to cool a slice of tomato and place it in the microwave.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?o1\n-\nobject)\n(and\n(coolable\n?o1)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nTomatoType)\n(heatable\n?o2)\n(inReceptacleObject\n?o1\n?o2)\n(holds\n?oa\n?o2)\n(agentName\n?oa\nRobot1)\n(isClean\n?o2)\n(exists\n(?o3\n-\nobject)\n(and\n(not\n(=\n?o3\n?o2))\n(not\n(=\n?o3\n?o1))\n(heatable\n?o3)\n(inReceptacleObject\n?o1\n?o3)\n(inReceptacle\n?o3\n?r)\n(isClean\n?o3)\n(holds\n?oa\n?o3)\n(receptacleType\n?r\nMicrow"
        ]
    },
    "train/pick_cool_then_place_in_recep-Pan-None-DiningTable-15/trial_T20190909_003937_964362": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# put a cold pan on the table.",
        "codex_output": [
            "\n\n# Other: place the coffee pot on the counter, place a coffee cup on the counter, place a white coffee cup on the counter, place the remote on the nightstand, place the alarm clock on the bedside table\n\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o\n-\nobject)\n(and\n(objectType\n?o\nPanType)\n(receptacleType\n?r\nCounterType)\n(inReceptacle\n?o\n?r)\n(isHot\n?o)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_and_place_simple-Box-None-ArmChair-225/trial_T20190908_182813_945109": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# place a small box on top of a chair in the corner of the room.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nSmallBoxType)\n(receptacleType\n?r\nChairType)\n(inReceptacle\n?o1\n?r)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_two_obj_and_place-SoapBar-None-Cart-430/trial_T20190909_145901_138802": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# move two bars of soap to a shelf.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nSoapType)\n(receptacleType\n?r\nShelfType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nSoapType)\n(receptacleType\n?r\nShelfType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)"
        ]
    },
    "train/pick_and_place_with_movable_recep-Pencil-Bowl-CounterTop-311/trial_T20190906_181947_674402": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# place a bowl with a pencil in it on a counter.",
        "codex_output": [
            "\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nBowlType)\n(receptacleType\n?r\nCounterType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nPencilType)\n(inReceptacleObject\n?o2\n?o1))))))\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))))\n)\n\n\n"
        ]
    },
    "train/pick_and_place_simple-HandTowel-None-BathtubBasin-419/trial_T20190908_023413_470763": {
        "codex_prompt": "(:requirements\n    :adl\n    :action-costs\n    :typing\n )\n(:types\n  agent\n  location\n  receptacle\n  object\n  rtype\n  otype\n  )\n(:predicates\n    (atLocation ?a - agent ?l - location)                     \n    (receptacleAtLocation ?r - receptacle ?l - location)      \n    (objectAtLocation ?o - object ?l - location)              \n    (openable ?r - receptacle)                                \n    (opened ?r - receptacle)                                  \n    (inReceptacle ?o - object ?r - receptacle)                \n    (isReceptacleObject ?o - object)                          \n    (inReceptacleObject ?innerObject - object ?outerObject - object)                \n    (isReceptacleObjectFull ?o - object)                      \n    (wasInReceptacle ?o - object ?r - receptacle)             \n    (checked ?r - receptacle)                                 \n    (examined ?l - location)                                  \n    (receptacleType ?r - receptacle ?t - rtype)               \n    (canContain ?rt - rtype ?ot - otype)                      \n    (objectType ?o - object ?t - otype)                       \n    (holds ?a - agent ?o - object)                            \n    (holdsAny ?a - agent)                                     \n    (holdsAnyReceptacleObject ?a - agent)                        \n    (full ?r - receptacle)                                    \n    (isClean ?o - object)                                     \n    (cleanable ?o - object)                                   \n    (isHot ?o - object)                                       \n    (heatable ?o - object)                                    \n    (isCool ?o - object)                                      \n    (coolable ?o - object)                                    \n    (pickupable ?o - object)                                   \n    (moveable ?o - object)                                      \n    (toggleable ?o - object)                                  \n    (isOn ?o - object)                                        \n    (isToggled ?o - object)                                   \n    (sliceable ?o - object)                                   \n    (isSliced ?o - object)                                    \n )\n(:functions\n    (distance ?from ?to)\n    (total-cost) - number\n   )\n#### Natural language goals and PDDL goals\n\n\n#put two phones on the dresser at the foot of the bed.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nCellPhoneType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n#place both keys on top of the black dresser.\n(:goal\n(and\n(exists\n(?r\n-\nreceptacle)\n(exists\n(?o1\n-\nobject)\n(and\n(objectType\n?o1\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o1\n?r)\n(exists\n(?o2\n-\nobject)\n(and\n(not\n(=\n?o1\n?o2))\n(objectType\n?o2\nKeyChainType)\n(receptacleType\n?r\nDresserType)\n(inReceptacle\n?o2\n?r)\n)\n)\n)\n)\n)\n(forall\n(?re\n-\nreceptacle)\n(not\n(opened\n?re))\n)\n)\n)\n<END>\n\n# move a hand towel to the bath tub.",
        "codex_output": [
            "\n(:goal (and (exists (?o-BathTowelType - object) (and (exists (?r-BathTubType - receptacle) (inReceptacle ?o-BathTowelType ?r-BathTubType))) (forall (?o - object) (not (holder ?o-BathTowelType))) (forall (?re - receptacle) (not (opened ?re))))) "
        ]
    }
}