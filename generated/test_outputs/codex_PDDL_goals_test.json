{
    "0_put a slice of vegetable on a counter.": {
        "codex_prompt": "(:requirements :adl\n    )\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (wasInReceptacle ?o - object ?r - receptacle) \n        \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n    )\n(:functions\n        (distance ?from ?to)\n        (totalCost)\n    )\n#### Natural language goals and PDDL goals\n\n\n#wash a teapot to put it away under the counter.\n(:goal\n            (and\n                (forall (?re - receptacle)\n                    (not (opened ?re))\n                )\n                (exists (?r - receptacle)\n                    (exists (?o - object)\n                        (and \n                            (cleanable ?o)\n                            (objectType ?o KettleType) \n                            (receptacleType ?r CabinetType)\n                            (isClean ?o)\n                            (inReceptacle ?o ?r) \n                        )\n                    )\n                )\n            )\n        )\n<END>\n\n# put a slice of vegetable on a counter.",
        "codex_output": [
            "\n(:goal\n                (exists (?l - location)\n                    (exists (?o - object)\n                        (exists (?inner - object)\n                            (and \n                                (receptacleAtLocation ?l CounterType) \n                                (objectType ?o SlicedTomatoType) \n                                (objectAtLocation ?o ?l)\n                                (sliceable ?innder)\n                                (inReceptacleObject ?inner ?o) \n                                (isSliced ?inner) \n                            )\n                        )\n                    )\n                )\n            )"
        ]
    },
    "3_put two candles in a cabinet underneath the sink.": {
        "codex_prompt": "(:requirements :adl\n    )\n(:types\n        agent location receptacle object rtype otype\n    )\n(:predicates\n        (atLocation ?a - agent ?l - location) \n        (receptacleAtLocation ?r - receptacle ?l - location) \n        (objectAtLocation ?o - object ?l - location) \n        (openable ?r - receptacle) \n        (opened ?r - receptacle) \n        (inReceptacle ?o - object ?r - receptacle) \n        (isReceptacleObject ?o - object) \n        (inReceptacleObject ?innerObject - object ?outerObject - object) \n        (wasInReceptacle ?o - object ?r - receptacle) \n        \n        (receptacleType ?r - receptacle ?t - rtype) \n        (objectType ?o - object ?t - otype) \n        (holds ?a - agent ?o - object) \n        (holdsAny ?a - agent) \n        (holdsAnyReceptacleObject ?a - agent) \n        \n        (isClean ?o - object) \n        (cleanable ?o - object) \n        (isHot ?o - object) \n        (heatable ?o - object) \n        (isCool ?o - object) \n        (coolable ?o - object) \n        (toggleable ?o - object) \n        (isOn ?o - object) \n        (isToggled ?o - object) \n        (sliceable ?o - object) \n        (isSliced ?o - object) \n    )\n(:functions\n        (distance ?from ?to)\n        (totalCost)\n    )\n#### Natural language goals and PDDL goals\n\n\n#wash a teapot to put it away under the counter.\n(:goal\n            (and\n                (forall (?re - receptacle)\n                    (not (opened ?re))\n                )\n                (exists (?r - receptacle)\n                    (exists (?o - object)\n                        (and \n                            (cleanable ?o)\n                            (objectType ?o KettleType) \n                            (receptacleType ?r CabinetType)\n                            (isClean ?o)\n                            (inReceptacle ?o ?r) \n                        )\n                    )\n                )\n            )\n        )\n<END>\n\n# put two candles in a cabinet underneath the sink.",
        "codex_output": [
            "\n<START>\n(:goal\n            (exists (?o1 - object)\n                (exists (?o2 - object)\n                    (exists (?r - receptacle)\n                        (and\n                            (objectType ?o1 CandleType)\n                            (objectType ?o2 CandleType)\n                            (objectType ?r CabinetType)\n                            (not (isInReceptacle ?o1))\n                            (not (isInReceptacle ?o2)) \n                            (inReceptacle ?o1 ?r)\n                            (inReceptacle ?o2 ?r)\n                        )\n                    )\n                )\n            )\n        )"
        ]
    }
}