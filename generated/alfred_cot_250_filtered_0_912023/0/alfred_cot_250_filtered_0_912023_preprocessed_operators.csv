operator_name,gt_operator,codex_raw_operator,codex_preprocessed_operator,
ExamineObject,,"
;; Operator, ExamineObject.
;; ExamineObject takes an object to examine and does not require any tool objects or tool receptacles.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be examined.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: none.
(:action ExamineObject1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
        )
    )
",FAILED,
ExamineObject,,"
;; Operator, ExamineObject.
;; ExamineObject takes an object to examine and a specific tool of type CellPhoneType.
;; CellPhoneType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be examined, ?toolobject - object to use to examine.
;; Preconditions: The toolobject is a CellPhoneType, the agent is at a location and the object is at the same location, and the agent is holding the tool.
;; Postconditions: none.
(:action ExamineObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject CellPhoneType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
        )
    )
",FAILED,
ExamineObject,,"
;; Operator, ExamineObject.
;; ExamineObject takes an object to examine and a specific tool receptacle of type CoffeeMachineType.
;; CoffeeMachineType is an rtype. Therefore, the tool receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be examined, ?toolreceptacle - receptacle to use to examine.
;; Preconditions: The toolreceptacle is a CoffeeMachineType, the agent is at a location and the tool receptacle is at the same location.
;; Postconditions: none.
(:action ExamineObject3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle CoffeeMachineType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
        )
        :effect (and
        )
    )
",FAILED,
TurnOnObject,,"
;; Operator, TurnOnObject
;; TurnOnObject takes an object to turn on.
;; Parameters: ?a - agent, ?l - location of the object, ?o - object to be turned on.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is toggleable.
;; Postconditions: The ?o object is now toggled on.
(:action TurnOnObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
        )
        :effect (and
            (isToggled ?o)
        )
)
","(:action TurnOnObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
TurnOnObject,,"
;; Operator, TurnOnObjectWithToolObject
;; TurnOnObjectWithToolObject takes an object to turn on and a specific tool of type LightSwitchType.
;; LightSwitchType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object, ?o - object to be turned on, ?toolobject - object to turn on the object with.
;; Preconditions: The toolobject is a LightSwitchType, the agent is at a location and the object is at the same location, the object is toggleable, and the agent is holding the tool.
;; Postconditions: The ?o object is now toggled on.
(:action TurnOnObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isToggled ?o)
        )
)
","(:action TurnOnObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject LightSwitchType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
TurnOnObject,,"
;; Operator, TurnOnObjectWithToolReceptacle
;; TurnOnObjectWithToolReceptacle takes an object to turn on and a specific tool of type LightSwitchType.
;; LightSwitchType is a rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object, ?o - object to be turned on, ?toolreceptacle - receptacle to turn on the object with.
;; Preconditions: The toolreceptacle is a LightSwitchType, the agent is at a location and the object is at the same location, the object is toggleable, and the toolreceptacle is opened.
;; Postconditions: The ?o object is now toggled on.
(:action TurnOnObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
            (opened ?toolreceptacle)
        )
        :effect (and
            (isToggled ?o)
        )
)
","(:action TurnOnObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(opened ?toolreceptacle)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
LookForObject,,"
(:action LookForObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (not (objectAtLocation ?o ?l))
        )
        :effect (and

        )
    )
",FAILED,
LookForObject,,"
(:action LookForObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (not (objectAtLocation ?o ?l))
            (holds ?a ?toolobject)
            (objectType ?toolobject TowelType)
        )
        :effect (and

        )
    )
",FAILED,
LookForObject,,"
(:action LookForObjectInReceptacle
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (not (objectAtLocation ?o ?l))
            (receptacleAtLocation ?r ?l)
        )
        :effect (and

        )
    )
",FAILED,
TurnOffObject,,"
(:action TurnOffObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject LightSwitchType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject LightSwitchType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
TurnOffObject,,"
(:action TurnOffObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (toggleable ?o)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
TurnOffObject,,"
(:action TurnOffObjectWithReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle LightSwitchType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (isToggled ?o))
        )
    )
","(:action TurnOffObject_2
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (isToggled ?o))
		)
)",
ThrowObject,,"
(:action ThrowObject_NoTool
      :parameters (?a - agent ?l - location ?o - object)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
      )
      :effect (and
          (not (objectAtLocation ?o ?l))
      )
)
","(:action ThrowObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowObject,,"
(:action ThrowObject_WithTool
      :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
      :precondition (and
          (objectType ?toolobject BaseballBatType)
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
          (holds ?a ?toolobject)
      )
      :effect (and
          (not (objectAtLocation ?o ?l))
      )
)
","(:action ThrowObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject BaseballBatType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowObject,,"
(:action ThrowObject_WithToolReceptacle
      :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
      :precondition (and
          (receptacleType ?toolreceptacle GarbageCanType)
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
          (holds ?a ?o)
      )
      :effect (and
          (not (objectAtLocation ?o ?l))
          (inReceptacle ?o ?toolreceptacle)
      )
)
","(:action ThrowObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle GarbageCanType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		(inReceptacle ?o ?toolreceptacle)
		)
)",
CutObject,,"
;; Operator, CutObject with a tool object (ButterKnifeType).
;; CutObject takes an object to cut and a specific tool object of type ButterKnifeType.
;; ButterKnifeType is an otype.
;; Parameters: ?a - agent, ?l - location of object to cut; ?o - object to be cut, ?toolobject - object to cut with.
;; Preconditions: The toolobject is a ButterKnifeType, the agent is at a location and the object to be cut is at the same location, the object is sliceable, and the agent is holding the tool.
;; Postconditions: the ?o object is now sliced.
(:action CutObject_WithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ButterKnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isSliced ?o)
        )
)
","(:action CutObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ButterKnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
CutObject,,"
;; Operator, CutObject with a tool receptacle (CuttingBoardType).
;; CutObject takes an object to cut and a specific tool receptacle of type CuttingBoardType.
;; CuttingBoardType is an rtype.
;; Parameters: ?a - agent, ?l - location of the object to cut; ?o - object to be cut, ?toolreceptacle - receptacle to cut the object on.
;; Preconditions: The toolreceptacle is a CuttingBoardType, the agent is at a location and the object is at the same location, and the agent is holding the object to be cut.
;; Postconditions: the ?o object is now sliced.
(:action CutObject_WithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle CuttingBoardType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isSliced ?o)
        )
)
","(:action CutObject_1
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
CutObject,,"
;; Operator, CutObject without any tools.
;; CutObject takes an object to cut without any tools.
;; Parameters: ?a - agent, ?l - location of object to cut; ?o - object to be cut.
;; Preconditions: The agent is at a location and the object to be cut is at the same location, and the object is sliceable.
;; Postconditions: the ?o object is now sliced.
(:action CutObject_WithoutTools
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
        )
        :effect (and
            (isSliced ?o)
        )
)
","(:action CutObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ButterKnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action SliceObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ButterKnifeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle CuttingBoardType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
            (inReceptacle ?o ?toolreceptacle)
        )
        :effect (and
           (isSliced ?o)
        )
    )
","(:action SliceObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		(inReceptacle ?o ?toolreceptacle)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
SliceObject,"(:action SliceObject
        :parameters (?a - agent ?l - location ?co - object ?ko - object)
        :precondition (and
            (objectType ?ko KnifeType)
            (atLocation ?a ?l)
            (objectAtLocation ?co ?l)
            (sliceable ?co)
            (holds ?a ?ko)
        )
        :effect (and
            (isSliced ?co)
        )
    )","
(:action SliceObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (sliceable ?o)
        )
        :effect (and
            (isSliced ?o)
        )
    )
","(:action SliceObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(sliceable ?o)
		)
        :effect (and 
		(isSliced ?o)
		)
)",
InspectObject,,"
(:action InspectObjectNoTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            ;; No effect
        )
)
",FAILED,
InspectObject,,"
(:action InspectObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject MirrorType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            ;; No effect
        )
)
",FAILED,
InspectObject,,"
(:action InspectObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SafeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
        )
        :effect (and
            ;; No effect
        )
)
",FAILED,
LightObject,,"
(:action LightObject1
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (toggleable ?o)
    )
    :effect (and
        (isToggled ?o)
    )
)
","(:action LightObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
LightObject,,"
(:action LightObject2
    :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
    :precondition (and
        (objectType ?toolobject CandleType)
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (toggleable ?o)
        (holds ?a ?toolobject)
    )
    :effect (and
        (isToggled ?o)
    )
)
","(:action LightObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject CandleType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
LightObject,,"
(:action LightObject3
    :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
    :precondition (and
        (receptacleType ?toolreceptacle LampType)
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (toggleable ?o)
        (holds ?a ?toolreceptacle)
    )
    :effect (and
        (isToggled ?o)
    )
)
","(:action LightObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(toggleable ?o)
		(holds ?a ?toolreceptacle)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
(:action HeatObjectUsingToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
(:action HeatObjectUsingToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle StoveBurnerType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle StoveBurnerType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
HeatObject,"(:action HeatObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )","
(:action HeatObjectNoTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action HeatObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
;; Operator, CookObject 1.
;; CookObject takes an object to cook and a specific tool of type PanType.
;; PanType is a rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be cooked, ?toolreceptacle - receptacle to cook the object in.
;; Preconditions: The toolreceptacle is a PanType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be cooked.
;; Postconditions: the ?o object is now hot.
(:action CookObject1
    :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
    :precondition (and
        (receptacleType ?toolreceptacle PanType)
        (atLocation ?a ?l)
        (receptacleAtLocation ?toolreceptacle ?l)
        (holds ?a ?o)
    )
    :effect (and
        (isHot ?o)
    )
)
","(:action CookObject_0
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
;; Operator, CookObject 2.
;; CookObject takes an object to cook and a specific tool of type ToasterType.
;; ToasterType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be cooked, ?toolobject - object to cook the object with.
;; Preconditions: The toolobject is a ToasterType, the agent is at a location and the object to be cooked is at the same location, and the agent is holding the tool object.
;; Postconditions: the ?o object is now hot.
(:action CookObject2
    :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
    :precondition (and
        (objectType ?toolobject ToasterType)
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (holds ?a ?toolobject)
    )
    :effect (and
        (isHot ?o)
    )
)
","(:action CookObject_1
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
CookObject,,"
;; Operator, CookObject 3.
;; CookObject takes an object to cook and does not require any tool.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be cooked.
;; Preconditions: The agent is at a location and the object to be cooked is at the same location.
;; Postconditions: the ?o object is now hot.
(:action CookObject3
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
    )
    :effect (and
        (isHot ?o)
    )
)
","(:action CookObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isHot ?o)
		)
)",
WashObject,,"
(:action WashObjectWithWater
    :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
    :precondition (and
        (receptacleType ?toolreceptacle SinkType)
        (atLocation ?a ?l)
        (receptacleAtLocation ?toolreceptacle ?l)
        (holds ?a ?o)
    )
    :effect (and
        (isClean ?o)
    )
)
","(:action WashObject_0
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
WashObject,,"
(:action WashObjectWithSoap
    :parameters (?a - agent ?l - location ?o - object ?toolobject - object ?toolreceptacle - receptacle)
    :precondition (and
        (objectType ?toolobject SoapBarType)
        (receptacleType ?toolreceptacle SinkType)
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
        (receptacleAtLocation ?toolreceptacle ?l)
        (cleanable ?o)
        (holds ?a ?o)
        (holds ?a ?toolobject)
        (not (inReceptacle ?toolobject ?toolreceptacle))
    )
    :effect (and
        (isClean ?o)
    )
)
",FAILED,
WashObject,,"
(:action WashObjectInSink
    :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
    :precondition (and
        (receptacleType ?toolreceptacle SinkBasinType)
        (atLocation ?a ?l)
        (receptacleAtLocation ?toolreceptacle ?l)
        (holds ?a ?o)
    )
    :effect (and
        (isClean ?o)
    )
)
","(:action WashObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle SinkBasinType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
ToastObject,,"
;; Operator, ToastObject1.
;; ToastObject1 takes an object to toast and a specific tool of type ToasterType.
;; ToasterType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of object to be toasted; ?o - object to be toasted, ?toolobject - object to toast with.
;; Preconditions: The toolobject is a ToasterType, the agent is at a location and the object to be toasted is at the same location, and the agent is holding the tool.
;; Postconditions: the ?o object is now toasted.
(:action ToastObject1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action ToastObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ToastObject,,"
;; Operator, ToastObject2.
;; ToastObject2 takes an object to toast and a specific tool receptacle of type OvenType.
;; OvenType is an rtype. Therefore, the tool receptacle is an receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be toasted, ?toolreceptacle - receptacle to toast the object in.
;; Preconditions: The toolreceptacle is an OvenType, the agent is at a location and the receptacle is at the same location, the toolreceptacle is opened, and the agent is holding the object to be toasted.
;; Postconditions: the ?o object is now hot.
(:action ToastObject2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle OvenType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (opened ?toolreceptacle)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action ToastObject_1
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(opened ?toolreceptacle)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ToastObject,,"
;; Operator, ToastObject3.
;; ToastObject3 takes an object to toast, and no tool object or tool receptacle.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be toasted.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: the ?o object is now toasted.
(:action ToastObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action ToastObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isHot ?o)
		)
)",
MicrowaveObject,,"
(:action MicrowaveObject_Receptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle MicrowaveType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action MicrowaveObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle MicrowaveType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
MicrowaveObject,,"
(:action MicrowaveObject_NoTools
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isHot ?o)
        )
    )
","(:action MicrowaveObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
MicrowaveObject,,"
(:action MicrowaveObject_WithTools
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object ?toolreceptacle - receptacle)
        :precondition (and
            (objectType ?toolobject CDType)
            (receptacleType ?toolreceptacle SafeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
           (isHot ?o)
        )
    )
",FAILED,
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
(:action CoolObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (opened ?toolreceptacle)
            (isClean ?toolreceptacle)
            (holds ?a ?o)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action CoolObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle FridgeType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(opened ?toolreceptacle)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
(:action CoolObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject IcePackType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (isClean ?toolobject)
            (holds ?a ?toolobject)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action CoolObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(isClean ?toolobject)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isCool ?o)
		)
)",
CoolObject,"(:action CoolObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r FridgeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isCool ?o)
        )
    )","
(:action CoolObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action CoolObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isCool ?o)
		)
)",
DryObject,,"
(:action DryObjectWithTowel
        :parameters (?a - agent ?l - location ?o - object ?towel - object)
        :precondition (and
            (objectType ?towel TowelType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?towel)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action DryObject_0
        :parameters (?towel - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?towel TowelType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?towel)
		)
        :effect (and 
		(isClean ?o)
		)
)",
DryObject,,"
(:action DryObjectWithAir
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action DryObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
DryObject,,"
(:action DryObjectWithHairDryer
        :parameters (?a - agent ?l - location ?o - object ?hairdryer - object)
        :precondition (and
            (objectType ?hairdryer HairDryerType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?hairdryer)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action DryObject_2
        :parameters (?a - agent ?l - location ?o - object ?hairdryer - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?hairdryer)
		)
        :effect (and 
		(isClean ?o)
		)
)",
PlaceObject,,"
(:action PlaceObject
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o ?t)
            (receptacleType ?r ?t)
        )
        :effect (and
            (inReceptacle ?o ?r)
        )
    )
",FAILED,
PlaceObject,,"
(:action PlaceObjectNoReceptacle
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action PlaceObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
PlaceObject,,"
(:action PlaceObjectWithTypeCheck
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o ?t)
            (receptacleType ?r ?t)
        )
        :effect (and
            (inReceptacle ?o ?r)
        )
    )
",FAILED,
ChillObject,,"
(:action ChillObject1
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle FreezerType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_0
        :parameters (?a - agent ?l - location ?toolreceptacle - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ChillObject,,"
(:action ChillObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject IcePackType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isCool ?o)
		)
)",
ChillObject,,"
(:action ChillObject3
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
           (isCool ?o)
        )
    )
","(:action ChillObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isCool ?o)
		)
)",
RinseObject,,"
(:action RinseObject1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action RinseObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
RinseObject,,"
(:action RinseObject2
        :parameters (?a - agent ?l - location ?o - object ?sink - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (receptacleAtLocation ?sink ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
)
","(:action RinseObject_1
        :parameters (?a - agent ?l - location ?o - object ?sink - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(receptacleAtLocation ?sink ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
RinseObject,,"
(:action RinseObject3
        :parameters (?a - agent ?l - location ?o - object ?faucet - object ?sink - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (objectType ?faucet FaucetType)
            (holds ?a ?faucet)
            (receptacleAtLocation ?sink ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
",FAILED,
AdjustLighting,,"
;; Operator, AdjustLighting with tool receptacle.
;; AdjustLighting takes a specific lighting receptacle of type LampType and adjusts its lighting level.
;; Parameters: ?a - agent, ?l - location of the lighting receptacle; ?r - lighting receptacle to adjust.
;; Preconditions: The agent is at a location and the lighting receptacle is at the same location, and the lighting receptacle is a LampType.
;; Postconditions: the lighting level of the ?r receptacle is adjusted.
(:action AdjustLightingWithReceptacle
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (receptacleType ?r LampType)
        )
        :effect (and
            ;; adjust lighting level of ?r receptacle
        )
    )
",FAILED,
AdjustLighting,,"
;; Operator, AdjustLighting with tool object.
;; AdjustLighting takes a specific lighting object of type FloorLampType and adjusts its lighting level.
;; Parameters: ?a - agent, ?l - location of the lighting object; ?o - lighting object to adjust.
;; Preconditions: The agent is at a location and the lighting object is at the same location, and the lighting object is a FloorLampType.
;; Postconditions: the lighting level of the ?o object is adjusted.
(:action AdjustLightingWithObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o FloorLampType)
        )
        :effect (and
            ;; adjust lighting level of ?o object
        )
    )
",FAILED,
AdjustLighting,,"
;; Operator, AdjustLighting without tool.
;; AdjustLighting takes a specific lighting receptacle of type LampType and adjusts its lighting level without needing any tool.
;; Parameters: ?a - agent, ?l - location of the lighting receptacle to adjust.
;; Preconditions: The agent is at a location and the lighting receptacle is at the same location, and the lighting receptacle is a LampType.
;; Postconditions: the lighting level of the ?r receptacle is adjusted.
(:action AdjustLightingWithoutTool
        :parameters (?a - agent ?l - location)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (receptacleType ?r LampType)
        )
        :effect (and
            ;; adjust lighting level of ?r receptacle
        )
    )
",FAILED,
WarmObject,,"
(:action WarmObjectWithToolObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ToasterType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action WarmObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ToasterType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isHot ?o)
		)
)",
WarmObject,,"
(:action WarmObjectWithToolReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle StoveBurnerType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (heatable ?o)
            (holds ?a ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action WarmObject_1
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle StoveBurnerType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(heatable ?o)
		(holds ?a ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
WarmObject,,"
(:action WarmObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (heatable ?o)
        )
        :effect (and
            (isHot ?o)
        )
    )
","(:action WarmObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(heatable ?o)
		)
        :effect (and 
		(isHot ?o)
		)
)",
ThrowAwayObject,,"
;; Operator, ThrowAwayObject with Tool
;; ThrowAwayObject takes an object to throw away and a specific tool of type GarbageCanType.
;; GarbageCanType is an rtype. Therefore, the tool is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be thrown away, ?toolreceptacle - receptacle to throw the object into.
;; Preconditions: The toolreceptacle is a GarbageCanType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be thrown away.
;; Postconditions: The object is no longer at any location.
(:action ThrowAwayObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle GarbageCanType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle GarbageCanType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowAwayObject,,"
;; Operator, ThrowAwayObject without Tool
;; ThrowAwayObject takes an object to throw away without any specific tool.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be thrown away.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: The object is no longer at any location.
(:action ThrowAwayObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
ThrowAwayObject,,"
;; Operator, ThrowAwayObject with Discardable Object Type
;; ThrowAwayObject takes an object to throw away without any specific tool, but the object must be of type DiscardableType.
;; DiscardableType is an otype. Therefore, the object is a specific type.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be thrown away.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is of type DiscardableType.
;; Postconditions: The object is no longer at any location.
(:action ThrowAwayObjectWithType
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (objectType ?o DiscardableType)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action ThrowAwayObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
PutdownObject,,"
(:action PutdownObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (holds ?a ?o))
            (objectAtLocation ?o ?l)
        )
    )
","(:action PutdownObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (holds ?a ?o))
		(objectAtLocation ?o ?l)
		)
)",
PutdownObject,,"
(:action PutdownObjectInReceptacle
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (holds ?a ?o)
            (receptacleAtLocation ?r ?l)
        )
        :effect (and
            (not (holds ?a ?o))
            (inReceptacle ?o ?r)
        )
    )
","(:action PutdownObject_1
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(holds ?a ?o)
		(receptacleAtLocation ?r ?l)
		)
        :effect (and 
		(not (holds ?a ?o))
		(inReceptacle ?o ?r)
		)
)",
PutdownObject,,"
(:action PutdownObjectInReceptacleWithTool
        :parameters (?a - agent ?l - location ?o - object ?r - receptacle ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (holds ?a ?o)
            (receptacleAtLocation ?r ?l)
            (objectType ?toolobject GraterType)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (holds ?a ?o))
            (inReceptacle ?o ?r)
        )
    )
",FAILED,
TakeObject,,"
;; Operator, TakeObject1.
;; Takes a specific object and agent.
;; Parameters: ?a - agent, ?l - location of the object to take, ?o - object to take.
;; Preconditions: The object is at the location, the agent is at a location, and the agent is not holding any objects.
;; Postconditions: The object is held by the agent.
(:action TakeObject1
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holdsAny ?a)
        )
        :effect (and
            (holds ?a ?o)
            (not (objectAtLocation ?o ?l))
        )
)
","(:action TakeObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holdsAny ?a)
		)
        :effect (and 
		(holds ?a ?o)
		(not (objectAtLocation ?o ?l))
		)
)",
TakeObject,,"
;; Operator, TakeObject2.
;; Takes a specific object and agent, and uses a specific tool object.
;; Parameters: ?a - agent, ?l - location of the object to take, ?o - object to take, ?toolobject - object to use for taking the object.
;; Preconditions: The object is at the location, the agent is at a location, and the agent is holding the tool object.
;; Postconditions: The object is held by the agent.
(:action TakeObject2
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
        )
        :effect (and
            (holds ?a ?o)
            (not (objectAtLocation ?o ?l))
        )
)
","(:action TakeObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(holds ?a ?o)
		(not (objectAtLocation ?o ?l))
		)
)",
TakeObject,,"
;; Operator, TakeObject3.
;; Takes a specific object and agent, and uses a specific tool receptacle.
;; Parameters: ?a - agent, ?l - location of the object to take, ?o - object to take, ?toolreceptacle - receptacle to use for taking the object.
;; Preconditions: The object is at the location, the agent is at a location, the receptacle is at the same location as the agent, and the receptacle contains the object.
;; Postconditions: The object is held by the agent.
(:action TakeObject3
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (inReceptacle ?o ?toolreceptacle)
        )
        :effect (and
            (holds ?a ?o)
            (not (objectAtLocation ?o ?l))
            (not (inReceptacle ?o ?toolreceptacle))
        )
)
","(:action TakeObject_2
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(inReceptacle ?o ?toolreceptacle)
		)
        :effect (and 
		(holds ?a ?o)
		(not (objectAtLocation ?o ?l))
		(not (inReceptacle ?o ?toolreceptacle))
		)
)",
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject with a tool object.
;; OpenObject takes any object to open with a specific tool of type KeyChainType.
;; KeyChainType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened, ?toolobject - object to open the object with.
;; Preconditions: The toolobject is a KeyChainType, the agent is at a location and the object is at the same location, the object is openable, and the agent is holding the tool.
;; Postconditions: the ?o object is now opened.
(:action OpenObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject KeyChainType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (opened ?o)
        )
    )
",FAILED,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject with a tool receptacle.
;; OpenObject takes any object to open with a specific tool receptacle of type SafeType.
;; SafeType is an rtype. Therefore, the tool receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?o - object to be opened, ?toolreceptacle - receptacle to open the object with.
;; Preconditions: The toolreceptacle is a SafeType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be opened.
;; Postconditions: the ?o object is now opened.
(:action OpenObjectWithReceptacle
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SafeType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (opened ?o)
        )
    )
",FAILED,
OpenObject,"(:action OpenObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            
            
            
            
        )
        :effect (and
            (opened ?r)
        )
    )","
;; Operator, OpenObject without a tool.
;; OpenObject takes any object to open without any tool.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be opened.
;; Preconditions: The agent is at a location and the object is at the same location, and the object is openable.
;; Postconditions: the ?o object is now opened.
(:action OpenObjectWithoutTool
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (openable ?o)
        )
        :effect (and
            (opened ?o)
        )
    )
",FAILED,
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
;; Operator, CloseObject.
;; CloseObject takes any receptacle to close.
;; This action is applicable to any openable receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?r - receptacle to be closed.
;; Preconditions: The agent is at a location and the receptacle is at the same location, and the receptacle is openable and opened.
;; Postconditions: the ?r receptacle is now closed.
(:action CloseObject
        :parameters (?a - agent ?l - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )
    )
","(:action CloseObject_0
        :parameters (?a - agent ?l - location ?r - receptacle)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(openable ?r)
		(opened ?r)
		)
        :effect (and 
		(not (opened ?r))
		)
)",
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
;; Operator, CloseObjectWithTool.
;; CloseObjectWithTool takes a tool object and a receptacle to close.
;; The tool object must have the same type of the receptacle to be closed.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?r - receptacle to be closed; ?toolobject - tool object to use.
;; Preconditions: The agent is at a location and the receptacle is at the same location, the receptacle is openable and opened, the toolobject is of the same type as the receptacle, and the agent is holding the toolobject.
;; Postconditions: the ?r receptacle is now closed.
(:action CloseObjectWithTool
        :parameters (?a - agent ?l - location ?r - receptacle ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            (opened ?r)
            (receptacleType ?r ?t)
            (objectType ?toolobject ?t)
            (holds ?a ?toolobject)
        )
        :effect (and
            (not (opened ?r))
        )
    )
",FAILED,
CloseObject,"(:action CloseObject
        :parameters (?a - agent ?al - location ?r - receptacle)
        :precondition (and
            (atLocation ?a ?al)
            (receptacleAtLocation ?r ?al)
            (openable ?r)
            (opened ?r)
        )
        :effect (and
            (not (opened ?r))
        )

    )","
;; Operator, CloseObjectWithReceptacle.
;; CloseObjectWithReceptacle takes a tool receptacle and a receptacle to close.
;; The tool receptacle must have the same type of the receptacle to be closed.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?r - receptacle to be closed; ?toolreceptacle - tool receptacle to use.
;; Preconditions: The agent is at a location and the receptacle is at the same location, the receptacle is openable and opened, the toolreceptacle is of the same type as the receptacle, and the agent is holding the ?toolreceptacle with the opened receptacle inside.
;; Postconditions: the ?r receptacle is now closed.
(:action CloseObjectWithReceptacle
        :parameters (?a - agent ?l - location ?r - receptacle ?toolreceptacle - receptacle)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (openable ?r)
            (opened ?r)
            (receptacleType ?r ?t)
            (receptacleType ?toolreceptacle ?t)
            (inReceptacle ?r ?toolreceptacle)
        )
        :effect (and
            (not (opened ?r))
        )
    )
",FAILED,
ActivateObject,,"
;; Operator, ActivateObject.
;; ActivateObject takes any object to activate. The object may or may not require a tool to activate.
;; This action is applicable to any object that is toggleable or has a toggleable component.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be activated.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: the ?o object is now activated.
(:action ActivateObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (or
              (toggleable ?o)
              (exists (?c - object) 
                      (and 
                        (isComponentOf ?c ?o) 
                        (toggleable ?c)))))
        :effect (and
            (isToggled ?o)
        )
)
","(:action ActivateObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
ActivateObject,,"
;; Operator, ActivateObjectWithTool.
;; ActivateObjectWithTool takes any object to activate. The object requires a specific tool of type KeyChainType to activate.
;; KeyChainType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to be activated; ?toolobject - object to activate the object with.
;; Preconditions: The agent is at a location and the object is at the same location, the object is toggleable or has a toggleable component, and the agent is holding the tool.
;; Postconditions: the ?o object is now activated.
(:action ActivateObjectWithTool
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (or
              (toggleable ?o)
              (exists (?c - object) 
                      (and 
                        (isComponentOf ?c ?o) 
                        (toggleable ?c)))))
        :effect (and
            (isToggled ?o)
        )
)
","(:action ActivateObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
ActivateObject,,"
;; Operator, ActivateObjectInReceptacle.
;; ActivateObjectInReceptacle takes any object to activate. The object requires a specific tool receptacle of type FridgeType to activate.
;; FridgeType is an rtype. Therefore, the tool receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the receptacle; ?r - receptacle containing the object to be activated; ?o - object to be activated.
;; Preconditions: The agent is at a location and the receptacle is at the same location, the object is inside the receptacle, the object is toggleable or has a toggleable component, and the receptacle is of type FridgeType.
;; Postconditions: the ?o object is now activated.
(:action ActivateObjectInReceptacle
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (inReceptacle ?o ?r)
            (receptacleType ?r FridgeType)
            (or
              (toggleable ?o)
              (exists (?c - object) 
                      (and 
                        (isComponentOf ?c ?o) 
                        (toggleable ?c)))))
        :effect (and
            (isToggled ?o)
        )
)
","(:action ActivateObject_2
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(receptacleAtLocation ?r ?l)
		(inReceptacle ?o ?r)
		(receptacleType ?r FridgeType)
		)
        :effect (and 
		(isToggled ?o)
		)
)",
LookAtObject,,"
(:action LookAtObject
    :parameters (?a - agent ?l - location ?o - object)
    :precondition (and
        (atLocation ?a ?l)
        (objectAtLocation ?o ?l)
    )
    :effect (and
        ; No effect specified
    )
)
",FAILED,
TurnOnLight,,"
;; Operator, TurnOnLight.
;; TurnOnLight takes a specific light switch object and a specific light receptacle.
;; Parameters: ?a - agent, ?lSwitch - location of the light switch object; ?lLight - location of the light receptacle.
;; Preconditions: The agent is at a location, the light switch object and the light receptacle are at the same location, the light switch object is toggleable, and the agent is holding the light switch object.
;; Postconditions: the light switch object is now toggled and the light receptacle is now opened.
(:action TurnOnLight
        :parameters (?a - agent ?lSwitch - location ?lLight - location)
        :precondition (and
            (atLocation ?a ?lSwitch)
            (atLocation ?lLight ?lSwitch)
            (objectType ?lSwitch LightSwitchType)
            (toggleable ?lSwitch)
            (holds ?a ?lSwitch)
        )
        :effect (and
            (isToggled ?lSwitch)
            (opened ?lLight)
        )
    )
",FAILED,
TurnOnLight,,"
;; Operator, TurnOnLight.
;; TurnOnLight takes a specific tool object that can be used to turn on the light.
;; Parameters: ?a - agent, ?l - location of the tool object; ?lLight - location of the light receptacle.
;; Preconditions: The agent is at a location, the tool object and the light receptacle are at the same location, the agent is holding the tool object, and the light receptacle is toggleable.
;; Postconditions: the light receptacle is now opened.
(:action TurnOnLight
        :parameters (?a - agent ?l - location ?lLight - location)
        :precondition (and
            (atLocation ?a ?l)
            (atLocation ?lLight ?l)
            (toggleable ?lLight)
            (holds ?a ?l)
        )
        :effect (and
            (opened ?lLight)
        )
    )
",FAILED,
TurnOnLight,,"
;; Operator, TurnOnLight.
;; TurnOnLight takes a specific tool receptacle that can be used to turn on the light.
;; Parameters: ?a - agent, ?lSwitch - location of the light switch object; ?lLight - location of the tool receptacle to turn on the light.
;; Preconditions: The agent is at a location, the light switch object and the tool receptacle are at the same location, the light switch object is toggleable, and the agent is holding the light switch object.
;; Postconditions: the light switch object is now toggled and the light receptacle is now opened.
(:action TurnOnLight
        :parameters (?a - agent ?lSwitch - location ?lLight - location)
        :precondition (and
            (atLocation ?a ?lSwitch)
            (atLocation ?lLight ?lSwitch)
            (objectType ?lSwitch LightSwitchType)
            (toggleable ?lSwitch)
            (holds ?a ?lSwitch)
        )
        :effect (and
            (isToggled ?lSwitch)
            (opened ?lLight)
        )
    )
",FAILED,
LookObject,,"
;; Operator, LookObject 1
;; LookObject takes an object to look at.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to look at.
;; Preconditions: The agent is at a location and the object is at the same location.
;; Postconditions: None
(:action LookObject1
      :parameters (?a - agent ?l - location ?o - object)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
      )
      :effect (and
      )
  )
",FAILED,
LookObject,,"
;; Operator, LookObject 2
;; LookObject takes an object to look at and a tool receptacle to help inspect the object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to look at, ?toolreceptacle - tool receptacle to help inspect the object.
;; Preconditions: The agent is at a location and the object is at the same location, the toolreceptacle is openable and is at the location.
;; Postconditions: None
(:action LookObject2
      :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
          (openable ?toolreceptacle)
          (receptacleAtLocation ?toolreceptacle ?l)
      )
      :effect (and
      )
  )
",FAILED,
LookObject,,"
;; Operator, LookObject 3
;; LookObject takes an object to look at and a tool object to help inspect the object.
;; Parameters: ?a - agent, ?l - location of the object; ?o - object to look at, ?toolobject - tool object to help inspect the object.
;; Preconditions: The agent is at a location and the object is at the same location, the toolobject is at the location.
;; Postconditions: None
(:action LookObject3
      :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
          (objectAtLocation ?toolobject ?l)
      )
      :effect (and
      )
  )
",FAILED,
GoToObject,,"
;; Operator, GoToObject (Option 1)
;; GoToObject takes an object to approach and the agent goes to the location of the object.
;; Parameters: ?a - agent, ?o - object to approach; ?l - location of the object.
;; Preconditions: The agent is not at the location of the object and the object is at a specific location.
;; Postconditions: The agent is at the location of the object and is not at the previous location.
(:action GoToObject
      :parameters (?a - agent ?o - object ?l - location)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
      )
      :effect (and
          (atLocation ?a ?l)
          (not (atLocation ?a ?l))
      )
  )
","(:action GoToObject_0
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(atLocation ?a ?l)
		(not (atLocation ?a ?l))
		)
)",
GoToObject,,"
;; Operator, GoToObject (Option 2)
;; GoToObject takes an object to approach and the agent goes to the location of the object.
;; Parameters: ?a - agent, ?o - object to approach; ?l - location of the object.
;; Preconditions: The agent is not at the location of the object and the object is at a specific location.
;; Postconditions: The agent is at the location of the object and is not at the previous location.
(:action GoToObject
      :parameters (?a - agent ?o - object ?l - location)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
      )
      :effect (and
          (atLocation ?a ?l)
          (not (atLocation ?a ?l))
      )
  )
","(:action GoToObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(atLocation ?a ?l)
		(not (atLocation ?a ?l))
		)
)",
GoToObject,,"
;; Operator, GoToObject (Option 3)
;; GoToObject takes an object to approach and the agent goes to the location of the object.
;; Parameters: ?a - agent, ?o - object to approach; ?l - location of the object.
;; Preconditions: The agent is not at the location of the object and the object is at a specific location.
;; Postconditions: The agent is at the location of the object and is not at the previous location.
(:action GoToObject
      :parameters (?a - agent ?o - object ?l - location)
      :precondition (and
          (atLocation ?a ?l)
          (objectAtLocation ?o ?l)
      )
      :effect (and
          (atLocation ?a ?l)
          (not (atLocation ?a ?l))
      )
  )
","(:action GoToObject_2
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(atLocation ?a ?l)
		(not (atLocation ?a ?l))
		)
)",
DiscardObject,,"
;; Operator, DiscardObject.
;; DiscardObject takes an object to discard and a specific tool receptacle of type GarbageCanType.
;; GarbageCanType is an rtype. Therefore, the tool receptacle is a receptacle.
;; Parameters: ?a - agent, ?l - location of the object to be discarded; ?o - object to be discarded, ?toolreceptacle - receptacle to discard the object in.
;; Preconditions: The toolreceptacle is a GarbageCanType, the agent is at a location and the receptacle is at the same location, and the agent is holding the object to be discarded.
;; Postconditions: the ?o object is no longer at the location and is in the garbage can.
(:action DiscardObject
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle GarbageCanType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?toolreceptacle ?l)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
            (inReceptacle ?o ?toolreceptacle)
        )
    )
","(:action DiscardObject_0
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle GarbageCanType)
		(atLocation ?a ?l)
		(receptacleAtLocation ?toolreceptacle ?l)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		(inReceptacle ?o ?toolreceptacle)
		)
)",
DiscardObject,,"
;; Operator, DiscardObject.
;; DiscardObject takes an object to discard without a tool receptacle.
;; Parameters: ?a - agent, ?l - location of the object to be discarded; ?o - object to be discarded.
;; Preconditions: The agent is at a location and the object to be discarded is at the same location.
;; Postconditions: the ?o object is no longer at the location.
(:action DiscardObject
        :parameters (?a - agent ?l - location ?o - object)
        :precondition (and
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
        )
    )
","(:action DiscardObject_1
        :parameters (?a - agent ?l - location ?o - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		)
)",
DiscardObject,,"
;; Operator, DiscardObject.
;; DiscardObject takes an object to discard with a specific tool object of type DishSpongeType.
;; DishSpongeType is an otype. Therefore, the tool object is an object.
;; Parameters: ?a - agent, ?l - location of the object to be discarded; ?o - object to be discarded, ?toolobject - object to discard the object with.
;; Preconditions: The toolobject is a DishSpongeType, the agent is at a location and the object to be discarded is at the same location, and the agent is holding the tool object and the object to be discarded.
;; Postconditions: the ?o object is no longer at the location and is cleaned with the tool object.
(:action DiscardObject
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject DishSpongeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (holds ?a ?toolobject)
            (holds ?a ?o)
        )
        :effect (and
            (not (objectAtLocation ?o ?l))
            (cleanable ?o)
            (isClean ?o)
        )
    )
","(:action DiscardObject_2
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject DishSpongeType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(holds ?a ?toolobject)
		(holds ?a ?o)
		)
        :effect (and 
		(not (objectAtLocation ?o ?l))
		(cleanable ?o)
		(isClean ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
;; Operator, CleanObject with Cloth.
;; CleanObject with Cloth takes an object to clean, and a specific tool of type ClothType.
;; ClothType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of object to be cleaned; ?o - object to be cleaned, ?toolobject - object to clean with.
;; Preconditions: The toolobject is a ClothType, the agent is at a location and the object to be cleaned is at the same location, the object is cleanable, and the agent is holding the tool.
;; Postconditions: the ?o object is now clean.
(:action CleanObject-Cloth
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject ClothType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action CleanObject_0
        :parameters (?toolobject - object ?a - agent ?l - location ?o - object)

        :precondition (and 
		(objectType ?toolobject ClothType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isClean ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
;; Operator, CleanObject with Sponge.
;; CleanObject with Sponge takes an object to clean, and a specific tool of type SpongeType.
;; SpongeType is an otype. Therefore, the tool is an object.
;; Parameters: ?a - agent, ?l - location of object to be cleaned; ?o - object to be cleaned, ?toolobject - object to clean with.
;; Preconditions: The toolobject is a SpongeType, the agent is at a location and the object to be cleaned is at the same location, the object is cleanable, and the agent is holding the tool.
;; Postconditions: the ?o object is now clean.
(:action CleanObject-Sponge
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)
        :precondition (and
            (objectType ?toolobject SpongeType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
            (holds ?a ?toolobject)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action CleanObject_1
        :parameters (?a - agent ?l - location ?o - object ?toolobject - object)

        :precondition (and 
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		(holds ?a ?toolobject)
		)
        :effect (and 
		(isClean ?o)
		)
)",
CleanObject,"(:action CleanObject
        :parameters (?a - agent ?l - location ?r - receptacle ?o - object)
        :precondition (and
            (receptacleType ?r SinkBasinType)
            (atLocation ?a ?l)
            (receptacleAtLocation ?r ?l)
            (holds ?a ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )","
;; Operator, CleanObject in Sink.
;; CleanObject in Sink takes an object to clean, and a specific tool of type SinkBasinType, which is a receptacle type.
;; Parameters: ?a - agent, ?l - location of object to be cleaned; ?o - object to be cleaned, ?toolreceptacle - receptacle to clean in.
;; Preconditions: The toolreceptacle is a SinkBasinType, the agent is at a location and the object to be cleaned is at the same location, the object is cleanable.
;; Postconditions: the ?o object is now clean.
(:action CleanObject-Sink
        :parameters (?a - agent ?l - location ?o - object ?toolreceptacle - receptacle)
        :precondition (and
            (receptacleType ?toolreceptacle SinkBasinType)
            (atLocation ?a ?l)
            (objectAtLocation ?o ?l)
            (cleanable ?o)
        )
        :effect (and
            (isClean ?o)
        )
    )
","(:action CleanObject_2
        :parameters (?toolreceptacle - receptacle ?a - agent ?l - location ?o - object)

        :precondition (and 
		(receptacleType ?toolreceptacle SinkBasinType)
		(atLocation ?a ?l)
		(objectAtLocation ?o ?l)
		(cleanable ?o)
		)
        :effect (and 
		(isClean ?o)
		)
)",
