operator_name,gt_operator,codex_raw_operator,codex_preprocessed_operator,
craft-beetroot-soup,"(:action craft-beetroot-soup
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Beetroot)
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Bowl)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Beetroot))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Bowl))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )","
;; Guess number 1
;; ingredients = ['beetroot', 'potato']
(:action craft-beetroot-soup
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a FoodStation
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    ;; the first ingredient is a Beetroot
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Beetroot)
    ;; the second ingredient is a Potato
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Potato)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a BeetrootSoup
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Beetroot))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Potato))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-beetroot-soup_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station FoodStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Beetroot)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Potato)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target BeetrootSoup)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Beetroot))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Potato))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-beetroot-soup,"(:action craft-beetroot-soup
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Beetroot)
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Bowl)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Beetroot))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Bowl))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )","
;; Guess number 2
;; ingredients = ['beetroot', 'cooked_potato']
(:action craft-beetroot-soup
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a FoodStation
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    ;; the first ingredient is a Beetroot
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Beetroot)
    ;; the second ingredient is a CookedPotato
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 CookedPotato)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a BeetrootSoup
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Beetroot))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 CookedPotato))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-beetroot-soup_1
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station FoodStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Beetroot)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 CookedPotato)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target BeetrootSoup)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Beetroot))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 CookedPotato))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-beetroot-soup,"(:action craft-beetroot-soup
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Beetroot)
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Bowl)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Beetroot))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Bowl))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )","
;; Guess number 3
;; ingredients = ['beetroot']
(:action craft-beetroot-soup
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a FoodStation
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    ;; the first ingredient is a Beetroot
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Beetroot)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a BeetrootSoup
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Beetroot))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-beetroot-soup_2
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station FoodStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Beetroot)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target BeetrootSoup)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Beetroot))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-stick,"(:action craft-stick
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 1
;; ingredients = ['wood']
(:action craft-stick
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Stick
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-stick_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Stick)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-stick,"(:action craft-stick
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 2
;; ingredients = ['wood', 'wood']
(:action craft-stick
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the second ingredient is a Wood
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Stick
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Wood))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-stick_1
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Stick)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Wood))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-stick,"(:action craft-stick
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 3
;; ingredients = ['wood', 'cobblestone', 'coal']
(:action craft-stick
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the second ingredient is a Cobblestone
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Cobblestone)
    ;; the third ingredient is a Coal
    (inventory-holding ?ingredientinv3 ?ingredient3)
    (object-of-type ?ingredient3 Coal)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Stick
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Cobblestone))
    (object-of-type ?ingredient2 Hypothetical)
    ;; the third ingredient will be removed
    (not (inventory-holding ?ingredientinv3 ?ingredient3))
    (inventory-empty ?ingredientinv3)
    (not (object-of-type ?ingredient3 Coal))
    (object-of-type ?ingredient3 Hypothetical)
  )
 )
",FAILED,
craft-bowl1,"(:action craft-bowl1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 1
;; ingredients = ['wood']
(:action craft-bowl1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Bowl
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-bowl1_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Bowl)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-bowl1,"(:action craft-bowl1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 2
;; ingredients = ['wood', 'wood']
(:action craft-bowl1
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the second ingredient is also a Wood
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Bowl
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    ;; both ingredients will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Wood))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-bowl1_1
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Bowl)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Wood))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-bowl1,"(:action craft-bowl1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 3
;; ingredients = ['stick', 'wood']
(:action craft-bowl1
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Stick
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Stick)
    ;; the second ingredient is a Wood
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Bowl
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Stick))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Wood))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-bowl1_2
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Stick)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Bowl)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Stick))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Wood))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-bowl,,"
;; Guess number 1
;; ingredient = ['wood']
(:action craft-bowl
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Bowl
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    ;; the ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-bowl_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Bowl)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-bowl,,"
;; Guess number 2
;; ingredient = ['WoodPlank', 'Stick']
(:action craft-bowl
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a WoodPlank
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    ;; the second ingredient is a Stick
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Stick)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Bowl
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Stick))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-bowl_1
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 WoodPlank)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Stick)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Bowl)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 WoodPlank))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Stick))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-bowl,,"
;; Guess number 3
;; ingredient = ['Stick', 'Wood']
(:action craft-bowl
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Stick
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Stick)
    ;; the second ingredient is a Wood
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Bowl
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Bowl)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Stick))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Wood))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-bowl_2
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Stick)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Bowl)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Stick))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Wood))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-boat,"(:action craft-boat
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station BoatStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Boat)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 1
;; ingredients = ['wood']
(:action craft-boat
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a BoatStation
    (object-at ?station ?t)
    (object-of-type ?station BoatStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Boat
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Boat)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-boat_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station BoatStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Boat)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-boat,"(:action craft-boat
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station BoatStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Boat)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 2
;; ingredients = ['wood', 'stick']
(:action craft-boat
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a BoatStation
    (object-at ?station ?t)
    (object-of-type ?station BoatStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the second ingredient is a Stick
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Stick)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Boat
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Boat)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Stick))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )
","(:action craft-boat_1
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?ingredientinv2 - inventory ?ingredient2 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station BoatStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-holding ?ingredientinv2 ?ingredient2)
		(object-of-type ?ingredient2 Stick)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Boat)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		(not (inventory-holding ?ingredientinv2 ?ingredient2))
		(inventory-empty ?ingredientinv2)
		(not (object-of-type ?ingredient2 Stick))
		(object-of-type ?ingredient2 Hypothetical)
		)
)",
craft-boat,"(:action craft-boat
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station BoatStation)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 WoodPlank)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Boat)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 WoodPlank))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )","
;; Guess number 3
;; ingredients = ['stick', 'stick', 'stick', 'wood']
(:action craft-boat
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?ingredientinv3 - inventory ?ingredientinv4 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?ingredient3 - object ?ingredient4 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a BoatStation
    (object-at ?station ?t)
    (object-of-type ?station BoatStation)
    ;; the first ingredient is a Stick
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Stick)
    ;; the second ingredient is a Stick
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Stick)
    ;; the third ingredient is a Stick
    (inventory-holding ?ingredientinv3 ?ingredient3)
    (object-of-type ?ingredient3 Stick)
    ;; the fourth ingredient is a Wood
    (inventory-holding ?ingredientinv4 ?ingredient4)
    (object-of-type ?ingredient4 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
  )
  :effect (and
    ;; the target inventory will become a Boat
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (object-of-type ?target Boat)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    ;; the second ingredient will be removed
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    ;; the third ingredient will be removed
    (not (inventory-holding ?ingredientinv3 ?ingredient3))
    (inventory-empty ?ingredientinv3)
    ;; the fourth ingredient will be removed
    (not (inventory-holding ?ingredientinv4 ?ingredient4))
    (inventory-empty ?ingredientinv4)
  )
 )
",FAILED,
craft-cooked-potato,"(:action craft-cooked-potato
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station Furnace)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Potato)
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Coal)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target CookedPotato)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Potato))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Coal))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )","
;; Guess number 1
;; ingredients = ['potato']
(:action craft-cooked-potato
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a Furnace
    (object-at ?station ?t)
    (object-of-type ?station Furnace)
    ;; the first ingredient is a Potato
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Potato)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a CookedPotato
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target CookedPotato)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Potato))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-cooked-potato_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station Furnace)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Potato)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target CookedPotato)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Potato))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-cooked-potato,"(:action craft-cooked-potato
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station Furnace)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Potato)
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Coal)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target CookedPotato)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Potato))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Coal))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )","
;; Guess number 2
;; ingredients = []
(:action craft-cooked-potato
  :parameters (?targetinv - inventory ?station - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a Furnace
    (object-at ?station ?t)
    (object-of-type ?station Furnace)
    ;; there are no ingredients required
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a CookedPotato
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target CookedPotato)
  )
 )
","(:action craft-cooked-potato_1
        :parameters (?t - tile ?station - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station Furnace)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target CookedPotato)
		)
)",
craft-cooked-potato,"(:action craft-cooked-potato
  :parameters (?ingredientinv1 - inventory ?ingredientinv2 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?ingredient2 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    (object-at ?station ?t)
    (object-of-type ?station Furnace)
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Potato)
    (inventory-holding ?ingredientinv2 ?ingredient2)
    (object-of-type ?ingredient2 Coal)
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target CookedPotato)
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Potato))
    (object-of-type ?ingredient1 Hypothetical)
    (not (inventory-holding ?ingredientinv2 ?ingredient2))
    (inventory-empty ?ingredientinv2)
    (not (object-of-type ?ingredient2 Coal))
    (object-of-type ?ingredient2 Hypothetical)
  )
 )","
;; Guess number 3
;; ingredients = ['potato']
(:action craft-cooked-potato
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a Furnace
    (object-at ?station ?t)
    (object-of-type ?station Furnace)
    ;; the first ingredient is a Potato
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Potato)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a CookedPotato
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target CookedPotato)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Potato))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-cooked-potato_2
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station Furnace)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Potato)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target CookedPotato)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Potato))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-soup,,"
;; Guess number 1 
;; Craft BeetrootSoup with 2 beetroot
(:action craft-soup
  :parameters (?ingredientinv - inventory ?targetinv - inventory ?station - object ?ingredient - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a FoodStation
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    ;; the first ingredient is a Beetroot
    (inventory-holding ?ingredientinv ?ingredient)
    (object-of-type ?ingredient Beetroot)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a BeetrootSoup
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    ;; the ingredient will be removed
    (not (inventory-holding ?ingredientinv ?ingredient))
    (inventory-empty ?ingredientinv)
    (not (object-of-type ?ingredient Beetroot))
    (object-of-type ?ingredient Hypothetical)
  )
 )
","(:action craft-soup_0
        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station FoodStation)
		(inventory-holding ?ingredientinv ?ingredient)
		(object-of-type ?ingredient Beetroot)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target BeetrootSoup)
		(not (inventory-holding ?ingredientinv ?ingredient))
		(inventory-empty ?ingredientinv)
		(not (object-of-type ?ingredient Beetroot))
		(object-of-type ?ingredient Hypothetical)
		)
)",
craft-soup,,"
;; Guess number 2 
;; Craft BeetrootSoup with 2 beetroot
(:action craft-soup
  :parameters (?ingredientinv - inventory ?targetinv - inventory ?station - object ?ingredient - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a FoodStation
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    ;; the first ingredient is a Beetroot
    (inventory-holding ?ingredientinv ?ingredient)
    (object-of-type ?ingredient Beetroot)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a BeetrootSoup
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    ;; the ingredient will be removed
    (not (inventory-holding ?ingredientinv ?ingredient))
    (inventory-empty ?ingredientinv)
    (not (object-of-type ?ingredient Beetroot))
    (object-of-type ?ingredient Hypothetical)
  )
 )
","(:action craft-soup_1
        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station FoodStation)
		(inventory-holding ?ingredientinv ?ingredient)
		(object-of-type ?ingredient Beetroot)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target BeetrootSoup)
		(not (inventory-holding ?ingredientinv ?ingredient))
		(inventory-empty ?ingredientinv)
		(not (object-of-type ?ingredient Beetroot))
		(object-of-type ?ingredient Hypothetical)
		)
)",
craft-soup,,"
;; Guess number 3 
;; Craft BeetrootSoup with 1 beetroot
(:action craft-soup
  :parameters (?ingredientinv - inventory ?targetinv - inventory ?station - object ?ingredient - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a FoodStation
    (object-at ?station ?t)
    (object-of-type ?station FoodStation)
    ;; the first ingredient is a Beetroot
    (inventory-holding ?ingredientinv ?ingredient)
    (object-of-type ?ingredient Beetroot)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a BeetrootSoup
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target BeetrootSoup)
    ;; the ingredient will be removed
    (not (inventory-holding ?ingredientinv ?ingredient))
    (inventory-empty ?ingredientinv)
    (not (object-of-type ?ingredient Beetroot))
    (object-of-type ?ingredient Hypothetical)
  )
 )
","(:action craft-soup_2
        :parameters (?t - tile ?station - object ?ingredientinv - inventory ?ingredient - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station FoodStation)
		(inventory-holding ?ingredientinv ?ingredient)
		(object-of-type ?ingredient Beetroot)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target BeetrootSoup)
		(not (inventory-holding ?ingredientinv ?ingredient))
		(inventory-empty ?ingredientinv)
		(not (object-of-type ?ingredient Beetroot))
		(object-of-type ?ingredient Hypothetical)
		)
)",
craft-stick1,,"
;; Guess number 1
;; ingredients = ['wood']
(:action craft-stick1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Stick
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-stick1_0
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Stick)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-stick1,,"
;; Guess number 2
;; ingredients = ['wood']
(:action craft-stick1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Stick
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-stick1_1
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Stick)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
craft-stick1,,"
;; Guess number 3
;; ingredients = ['wood']
(:action craft-stick1
  :parameters (?ingredientinv1 - inventory ?targetinv - inventory ?station - object ?ingredient1 - object ?target - object ?t - tile)
  :precondition (and
    (agent-at ?t)
    ;; you are currently at a WorkStation
    (object-at ?station ?t)
    (object-of-type ?station WorkStation)
    ;; the first ingredient is a Wood
    (inventory-holding ?ingredientinv1 ?ingredient1)
    (object-of-type ?ingredient1 Wood)
    ;; the target inventory is empty
    (inventory-empty ?targetinv)
    (object-of-type ?target Hypothetical)
  )
  :effect (and
    ;; the target inventory will become a Stick
    (not (inventory-empty ?targetinv))
    (inventory-holding ?targetinv ?target)
    (not (object-of-type ?target Hypothetical))
    (object-of-type ?target Stick)
    ;; the first ingredient will be removed
    (not (inventory-holding ?ingredientinv1 ?ingredient1))
    (inventory-empty ?ingredientinv1)
    (not (object-of-type ?ingredient1 Wood))
    (object-of-type ?ingredient1 Hypothetical)
  )
 )
","(:action craft-stick1_2
        :parameters (?t - tile ?station - object ?ingredientinv1 - inventory ?ingredient1 - object ?targetinv - inventory ?target - object)

        :precondition (and 
		(agent-at ?t)
		(object-at ?station ?t)
		(object-of-type ?station WorkStation)
		(inventory-holding ?ingredientinv1 ?ingredient1)
		(object-of-type ?ingredient1 Wood)
		(inventory-empty ?targetinv)
		(object-of-type ?target Hypothetical)
		)
        :effect (and 
		(not (inventory-empty ?targetinv))
		(inventory-holding ?targetinv ?target)
		(not (object-of-type ?target Hypothetical))
		(object-of-type ?target Stick)
		(not (inventory-holding ?ingredientinv1 ?ingredient1))
		(inventory-empty ?ingredientinv1)
		(not (object-of-type ?ingredient1 Wood))
		(object-of-type ?ingredient1 Hypothetical)
		)
)",
