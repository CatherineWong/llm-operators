{"('mine-wood_1', '(:action mine-wood_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wood_2', '(:action mine-wood_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [1.1, 1.1], "('mine-wool1_0', '(:action mine-wool1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [1.1, 1.1], "('mine-wool1_1', '(:action mine-wool1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool1_2', '(:action mine-wool1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-right_0', '(:action move-right_0\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-right ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-right_2', '(:action move-right_2\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-right ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-potato_0', '(:action mine-potato_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [1.1, 1.1], "('mine-potato_1', '(:action mine-potato_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-potato_2', '(:action mine-potato_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_0', '(:action mine-sugar-cane_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_1', '(:action mine-sugar-cane_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_2', '(:action mine-sugar-cane_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [1.1, 1.1], "('move-to', '(:action move-to\\n  :parameters (?t1 - tile ?t2 - tile)\\n  :precondition (and (agent-at ?t1))\\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\\n )')": [8.1, 8.1], "('pick-up', '(:action pick-up\\n  :parameters (?i - inventory ?x - object ?t - tile)\\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\\n )')": [5.1, 5.1], "('mine-iron-ore', '(:action mine-iron-ore\\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\\n  :precondition (and\\n    (agent-at ?t)\\n    (object-at ?x ?t)\\n    (object-of-type ?x IronOreVein)\\n    (inventory-holding ?toolinv ?tool)\\n    (object-of-type ?tool Pickaxe)\\n    (inventory-empty ?targetinv)\\n    (object-of-type ?target Hypothetical)\\n  )\\n  :effect (and\\n    (not (inventory-empty ?targetinv))\\n    (inventory-holding ?targetinv ?target)\\n    (not (object-of-type ?target Hypothetical))\\n    (object-of-type ?target IronOre)\\n  )\\n )')": [1.1, 1.1]}