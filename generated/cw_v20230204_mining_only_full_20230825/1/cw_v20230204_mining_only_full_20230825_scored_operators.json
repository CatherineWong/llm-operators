{"('move-right_1', '(:action move-right_1\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-right_2', '(:action move-right_2\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-right ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-left_2', '(:action move-left_2\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-left ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wood_0', '(:action mine-wood_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [8.1, 8.1], "('mine-wood_1', '(:action mine-wood_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wood_2', '(:action mine-wood_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Tree)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wood)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool1_0', '(:action mine-wool1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool1_1', '(:action mine-wool1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool1_2', '(:action mine-wool1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-potato_0', '(:action mine-potato_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [13.1, 13.1], "('mine-potato_1', '(:action mine-potato_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-potato_2', '(:action mine-potato_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x PotatoPlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Potato)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_0', '(:action mine-sugar-cane_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [5.1, 5.1], "('mine-sugar-cane_1', '(:action mine-sugar-cane_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane_2', '(:action mine-sugar-cane_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane1_0', '(:action mine-sugar-cane1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane1_1', '(:action mine-sugar-cane1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-sugar-cane1_2', '(:action mine-sugar-cane1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x SugarCanePlant)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target SugarCane)\\n\\t\\t)\\n)')": [3.1, 3.1], "('mine-wool2_0', '(:action mine-wool2_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool2_1', '(:action mine-wool2_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool2_2', '(:action mine-wool2_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore_0', '(:action mine-gold-ore_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [10.1, 10.1], "('mine-gold-ore_1', '(:action mine-gold-ore_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-gold-ore_2', '(:action mine-gold-ore_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x GoldOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target GoldOre)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-beetroot_0', '(:action mine-beetroot_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-beetroot_1', '(:action mine-beetroot_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [9.1, 9.1], "('mine-beetroot_2', '(:action mine-beetroot_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x BeetrootCrop)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Beetroot)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal_0', '(:action mine-coal_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal_1', '(:action mine-coal_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal_2', '(:action mine-coal_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [11.1, 11.1], "('mine-cobblestone_0', '(:action mine-cobblestone_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CobblestoneStash)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Cobblestone)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-cobblestone_1', '(:action mine-cobblestone_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CobblestoneStash)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Cobblestone)\\n\\t\\t)\\n)')": [2.1, 2.1], "('mine-cobblestone_2', '(:action mine-cobblestone_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CobblestoneStash)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Cobblestone)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather1_0', '(:action mine-feather1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Sword)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [13.1, 13.1], "('move-down_0', '(:action move-down_0\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-down ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-down_1', '(:action move-down_1\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(tile-down ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-down_2', '(:action move-down_2\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(tile-down ?t1 ?t2)\\n\\t\\t(agent-at ?t1)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool_0', '(:action mine-wool_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-wool_1', '(:action mine-wool_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [13.1, 13.1], "('mine-wool_2', '(:action mine-wool_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Sheep)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Wool)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal1_0', '(:action mine-coal1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal1_1', '(:action mine-coal1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-coal1_2', '(:action mine-coal1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x CoalOreVein)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Pickaxe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Coal)\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-far-right_0', '(:action move-far-right_0\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-far-right_1', '(:action move-far-right_1\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-far-right_2', '(:action move-far-right_2\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-to', '(:action move-to\\n  :parameters (?t1 - tile ?t2 - tile)\\n  :precondition (and (agent-at ?t1))\\n  :effect (and (agent-at ?t2) (not (agent-at ?t1)))\\n )')": [206.1, 206.1], "('pick-up', '(:action pick-up\\n  :parameters (?i - inventory ?x - object ?t - tile)\\n  :precondition (and (agent-at ?t) (object-at ?x ?t) (inventory-empty ?i))\\n  :effect (and (inventory-holding ?i ?x) (not (object-at ?x ?t)) (not (inventory-empty ?i)))\\n )')": [116.1, 116.1], "('mine-iron-ore', '(:action mine-iron-ore\\n  :parameters (?toolinv - inventory ?targetinv - inventory ?x - object ?tool - object ?target - object ?t - tile)\\n  :precondition (and\\n    (agent-at ?t)\\n    (object-at ?x ?t)\\n    (object-of-type ?x IronOreVein)\\n    (inventory-holding ?toolinv ?tool)\\n    (object-of-type ?tool Pickaxe)\\n    (inventory-empty ?targetinv)\\n    (object-of-type ?target Hypothetical)\\n  )\\n  :effect (and\\n    (not (inventory-empty ?targetinv))\\n    (inventory-holding ?targetinv ?target)\\n    (not (object-of-type ?target Hypothetical))\\n    (object-of-type ?target IronOre)\\n  )\\n )')": [13.1, 13.1], "('move-right_1', '(:action move-right_1\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-right ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('move-left_1', '(:action move-left_1\\n        :parameters (?t1 - tile ?t2 - tile)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t1)\\n\\t\\t(tile-left ?t1 ?t2)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(agent-at ?t2)\\n\\t\\t(not (agent-at ?t1))\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_1', '(:action mine-feather_1\\n        :parameters (?toolinv - inventory ?obj - object ?targetinv - inventory ?target - object ?objinv - inventory ?tool - object ?t - tile)\\n\\n        :precondition (and \\n\\t\\t(inventory-holding ?toolinv ?obj)\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(inventory-empty ?objinv)\\n\\t\\t(object-of-type ?obj Chicken)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?obj ?t)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?objinv))\\n\\t\\t(inventory-holding ?objinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(not ( object-of-type ?obj Chicken ))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather3_1_2', '(:action mine-feather3_1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Sword)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Feather))\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_2_0', '(:action mine-feather_2_0\\n        :parameters (?t - tile ?toolinv1 - inventory ?target1 - object ?toolinv2 - inventory ?target2 - object ?targetinv1 - inventory ?targetinv2 - inventory)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(inventory-holding ?toolinv1 ?target1)\\n\\t\\t(inventory-holding ?toolinv2 ?target2)\\n\\t\\t(not (object-of-type ?target1 Hypothetical))\\n\\t\\t(not (object-of-type ?target2 Hypothetical))\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (object-of-type ?target1 Feather))\\n\\t\\t(inventory-empty ?toolinv1)\\n\\t\\t(inventory-holding ?targetinv1 ?target1)\\n\\t\\t(not (object-of-type ?target2 Feather))\\n\\t\\t(inventory-empty ?toolinv2)\\n\\t\\t(inventory-holding ?targetinv2 ?target2)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_0_0', '(:action mine-feather_0_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Sword)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 0.1], "('mine-feather_0', '(:action mine-feather_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather_2', '(:action mine-feather_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather1_1', '(:action mine-feather1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather1_2', '(:action mine-feather1_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather3_1_1', '(:action mine-feather3_1_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 1.1], "('mine-feather_1', '(:action mine-feather_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 2.1], "('mine-feather3_1_0', '(:action mine-feather3_1_0\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Shears)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 2.1], "('mine-feather_0_2', '(:action mine-feather_0_2\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 2.1], "('mine-feather_0_1', '(:action mine-feather_0_1\\n        :parameters (?t - tile ?x - object ?toolinv - inventory ?tool - object ?targetinv - inventory ?target - object)\\n\\n        :precondition (and \\n\\t\\t(agent-at ?t)\\n\\t\\t(object-at ?x ?t)\\n\\t\\t(object-of-type ?x Chicken)\\n\\t\\t(inventory-holding ?toolinv ?tool)\\n\\t\\t(object-of-type ?tool Axe)\\n\\t\\t(inventory-empty ?targetinv)\\n\\t\\t(object-of-type ?target Hypothetical)\\n\\t\\t)\\n        :effect (and \\n\\t\\t(not (inventory-empty ?targetinv))\\n\\t\\t(inventory-holding ?targetinv ?target)\\n\\t\\t(not (object-of-type ?target Hypothetical))\\n\\t\\t(object-of-type ?target Feather)\\n\\t\\t)\\n)')": [0.1, 5.1]}